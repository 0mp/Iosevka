
###### ASCII SYMBOLS

### Symbols with many strokes: $ & @

create-glyph 'dollar' : glyph-construction {
	set-width WIDTH; assign-unicode '$'
	include glyphs.S
	put-shapes : create-stroke 
		:.start-from MIDDLE [CAP - HALFSTROKE] 
		:.set-width HALFSTROKE HALFSTROKE 
		:.line-to MIDDLE [CAP - DESCENDER / 2]
		:.to-outline
	put-shapes : create-stroke
		:.start-from MIDDLE [DESCENDER / 2]
		:.set-width HALFSTROKE HALFSTROKE
		:.line-to MIDDLE HALFSTROKE
		:.to-outline
}

create-glyph 'ampersand' : glyph-construction {
	set-width WIDTH
	assign-unicode '&'
	
	local fine : Math.min STROKE [[RIGHTSB - SB] * 0.25]
	local p 0.85
	local l 0.05
	local pr 0.9
	local q 0.45
	local r 1.1
	local s 0
	
	put-shapes : create-stroke
		:.start-from [RIGHTSB - O] CAPMIDDLE
		:.set-width  0 STROKE
		:.heads-to   DOWNWARD
		:.line-to    [RIGHTSB - O] SMOOTHA
		:.arc-vh-to  MIDDLE O
		:.heads-to   LEFTWARD
		:.arc-hv-to  [SB + O] SMOOTHB
		:.to-outline

	put-shapes : xsStrand [SB + O] SMOOTHB [mix SB RIGHTSB p] [CAP - SMOOTHB * pr] HALFSTROKE [fine / 2]

	put-shapes : create-stroke
		:.start-from [mix SB RIGHTSB p] [CAP - SMOOTHB * pr]
		:.set-width  fine 0
		:.arc-vh-to  [mix SB RIGHTSB [mix p l 0.5]] CAPO
		:.heads-to   LEFTWARD
		:.arc-hv-to  [mix SB RIGHTSB l] [CAP - SMOOTHA * pr]
		:.to-outline
		
	put-shapes : xsStrand [mix SB RIGHTSB l] [CAP - SMOOTHA * pr] [mix SB RIGHTSB r] [SMOOTHA * s] [fine / 2] [fine / 2] null null [SMOOTHA * pr * 0.6]

}

create-glyph 'at' : glyph-construction {
	set-width WIDTH
	assign-unicode '@'
	
	local top [CAP + HALFSTROKE]
	local bot [DESCENDER + HALFSTROKE]
	local otop : mix bot top 0.75
	local obot : mix top bot 0.8

	local sw : Math.min STROKE [[WIDTH - SB * 2] * 0.25]
	local m1 : [mix [SB + sw] [RIGHTSB - sw] 0.47] - sw / 2
	local m2 : mix m1 RIGHTSB 0.5
	
	local sma : SMOOTHA * [[RIGHTSB - m1] / [RIGHTSB - SB]]
	local smb : SMOOTHB * [[RIGHTSB - m1] / [RIGHTSB - SB]]
	
	put-shapes : create-stroke
		:.start-from RIGHTSB [otop - O]
		:.heads-to  LEFTWARD
		:.set-width sw 0
		:.line-to   m2 [otop - O]
		:.arc-hv-to m1 [otop - sma]
		:.line-to   m1 [obot + smb]
		:.arc-vh-to [m2 + STROKE * globalTransform.yx] [obot + O]
		:.arc-hv-to RIGHTSB [obot + sma]
		:.line-to   RIGHTSB [top - SMOOTHB]
		:.arc-vh-to MIDDLE [top - O]
		:.set-width STROKE 0
		:.arc-hv-to SB [top - SMOOTHA]
		:.set-width sw 0
		:.line-to   SB [bot + SMOOTHB]
		:.arc-vh-to MIDDLE [bot + O]
		:.set-width STROKE 0
		:.heads-to  RIGHTWARD
		:.line-to   [RIGHTSB - HALFSTROKE] [bot + O]
		:.heads-to  RIGHTWARD
		:.to-outline
}

### Brackets

local hyphenCenter [XH * 0.6]

local parenTop [hyphenCenter + [CAP - XH] * 2.3]
local parenBot [hyphenCenter - [CAP - XH] * 2.3]
local parenMid [mix parenTop parenBot 0.5]

local parenOutside 0.15
local parenInside  0.65
local bracketOutside 0.15
local bracketInside 0.9
local braceOutside  0.1
local braceInside   0.9

create-glyph 'parenleft' : glyph-construction {
	set-width WIDTH
	assign-unicode '('
	
	local p 0.6

	put-shapes : create-stroke
		:.start-from [mix SB RIGHTSB parenInside] parenTop
		:.set-width  STROKE 0
		:.curve-to   [mix SB RIGHTSB parenOutside] [mix parenMid parenTop p] [mix SB RIGHTSB parenOutside] parenMid
		:.curve-to   [mix SB RIGHTSB parenOutside] [mix parenMid parenBot p] [mix SB RIGHTSB parenInside] parenBot
		:.to-outline
}

create-glyph 'parenright' : glyph-construction {
	set-width WIDTH
	assign-unicode ')'
	
	local p 0.6
	
	put-shapes : create-stroke
		:.start-from [mix RIGHTSB SB parenInside] parenTop
		:.set-width  0 STROKE
		:.curve-to   [mix RIGHTSB SB parenOutside] [mix parenMid parenTop p] [mix RIGHTSB SB parenOutside] parenMid
		:.curve-to   [mix RIGHTSB SB parenOutside] [mix parenMid parenBot p] [mix RIGHTSB SB parenInside] parenBot
		:.to-outline
}

create-glyph 'bracketleft' : glyph-construction {
	set-width WIDTH
	assign-unicode '['

	put-shapes : create-stroke
		:.start-from [mix SB RIGHTSB bracketOutside] parenBot
		:.set-width  STROKE 0
		:.heads-to   RIGHTWARD
		:.line-to    [mix SB RIGHTSB bracketInside] parenBot
		:.heads-to   RIGHTWARD
		:.to-outline

	put-shapes : create-stroke
		:.start-from [mix SB RIGHTSB bracketOutside] parenTop
		:.set-width  0 STROKE
		:.heads-to   RIGHTWARD
		:.line-to    [mix SB RIGHTSB bracketInside] parenTop
		:.heads-to   RIGHTWARD
		:.to-outline
		
	put-shapes : create-stroke
		:.start-from [mix SB RIGHTSB bracketOutside] parenBot
		:.set-width  0 STROKE
		:.heads-to   UPWARD
		:.line-to    [mix SB RIGHTSB bracketOutside] parenTop
		:.heads-to   UPWARD
		:.to-outline
}

create-glyph 'parenright' : glyph-construction {
	set-width WIDTH
	assign-unicode ']'
	
	put-shapes : create-stroke
		:.start-from [mix RIGHTSB SB bracketOutside] parenBot
		:.set-width  0 STROKE
		:.heads-to   LEFTWARD
		:.line-to    [mix RIGHTSB SB bracketInside] parenBot
		:.heads-to   LEFTWARD
		:.to-outline

	put-shapes : create-stroke
		:.start-from [mix RIGHTSB SB bracketOutside] parenTop
		:.set-width  STROKE 0
		:.heads-to   LEFTWARD
		:.line-to    [mix RIGHTSB SB bracketInside] parenTop
		:.heads-to   LEFTWARD
		:.to-outline
		
	put-shapes : create-stroke
		:.start-from [mix RIGHTSB SB bracketOutside] parenBot
		:.set-width  STROKE 0
		:.heads-to   UPWARD
		:.line-to    [mix RIGHTSB SB bracketOutside] parenTop
		:.heads-to   UPWARD
		:.to-outline
}

create-glyph 'braceleft' : glyph-construction {
	set-width WIDTH
	assign-unicode '{'
	
	local parenCenter [mix SB RIGHTSB [mix braceInside braceOutside 0.5]]
	local radius    : [mix SB RIGHTSB braceInside] - parenCenter

	put-shapes : create-stroke
		:.start-from [mix SB RIGHTSB braceInside] [parenTop - HALFSTROKE]
		:.set-width  HALFSTROKE HALFSTROKE
		:.heads-to   LEFTWARD
		:.arc-hv-to  parenCenter [parenTop - radius]
		:.line-to    parenCenter [parenMid + radius]
		:.arc-vh-to  [mix SB RIGHTSB braceOutside] parenMid
		:.heads-to   LEFTWARD
		:.to-outline
	
	put-shapes : create-stroke
		:.start-from [mix SB RIGHTSB braceInside] [parenBot + HALFSTROKE]
		:.set-width  HALFSTROKE HALFSTROKE
		:.heads-to   LEFTWARD
		:.arc-hv-to  parenCenter [parenBot + radius]
		:.line-to    parenCenter [parenMid - radius]
		:.arc-vh-to  [mix SB RIGHTSB braceOutside] parenMid
		:.heads-to   LEFTWARD
		:.to-outline
}

create-glyph 'braceright' : glyph-construction {
	set-width WIDTH
	assign-unicode '}'
	
	local parenCenter [mix RIGHTSB SB [mix braceInside braceOutside 0.5]]
	local radius    : [mix RIGHTSB SB braceOutside] - parenCenter

	put-shapes : create-stroke
		:.start-from [mix RIGHTSB SB braceInside] [parenTop - HALFSTROKE]
		:.set-width  HALFSTROKE HALFSTROKE
		:.heads-to   RIGHTWARD
		:.arc-hv-to  parenCenter [parenTop - radius]
		:.line-to    parenCenter [parenMid + radius]
		:.arc-vh-to  [mix RIGHTSB SB braceOutside] parenMid
		:.heads-to   RIGHTWARD
		:.to-outline
	
	put-shapes : create-stroke
		:.start-from [mix RIGHTSB SB braceInside] [parenBot + HALFSTROKE]
		:.set-width  HALFSTROKE HALFSTROKE
		:.heads-to   RIGHTWARD
		:.arc-hv-to  parenCenter [parenBot + radius]
		:.line-to    parenCenter [parenMid - radius]
		:.arc-vh-to  [mix RIGHTSB SB braceOutside] parenMid
		:.heads-to   RIGHTWARD
		:.to-outline
}

### Symbols with dots: period, comma, colon, semicolon

create-glyph 'period' : glyph-construction {
	set-width WIDTH
	assign-unicode '.'

	put-shapes : list : Ring [PERIODSIZE - O] O [MIDDLE - PERIODRADIUS + O] [MIDDLE + PERIODRADIUS - O]
}

create-glyph 'xhdot' : glyph-construction {
	set-width WIDTH

	put-shapes : list : Ring [XH - O] [XH - PERIODSIZE + O] [MIDDLE - PERIODRADIUS + O] [MIDDLE + PERIODRADIUS - O]
}

create-glyph 'comma' : glyph-construction {
	set-width WIDTH
	assign-unicode ','
	include glyphs.period
	
	local sw : PERIODSIZE * 0.5
	put-shapes : create-stroke
		:.start-from [MIDDLE + PERIODRADIUS - O] [mix O [PERIODSIZE - O] 0.5]
		:.set-width  0 sw
		:.curve-to   [MIDDLE + PERIODRADIUS - O] [mix [mix O [PERIODSIZE - O] 0.5] DESCENDER 0.5] [mix MIDDLE [MIDDLE - PERIODRADIUS] 0.3] DESCENDER
		:.to-outline
}

create-glyph 'colon' : glyph-construction {
	set-width WIDTH
	assign-unicode ':'
	include glyphs.period
	include glyphs.xhdot
}
create-glyph 'semicolon' : glyph-construction {
	set-width WIDTH
	assign-unicode ';'
	include glyphs.comma
	include glyphs.xhdot
}

create-glyph 'question' : glyph-construction {
	set-width WIDTH
	assign-unicode '?'
	put-shapes : xsStrand [MIDDLE - HALFSTROKE] [mix [DOTSIZE + STROKE] [XH / 2] 0.5] RIGHTSB [CAP - SMOOTHB]
	put-shapes : twoHookUpper CAP SMOOTHB HOOK
	put-shapes : list : Ring [DOTSIZE - O] O [MIDDLE - DOTRADIUS + O] [MIDDLE + DOTRADIUS - O]
}
create-glyph 'exclam' : glyph-construction {
	set-width WIDTH
	assign-unicode '!'
	put-shapes : create-stroke
		:.start-from MIDDLE CAP
		:.set-width  HALFSTROKE HALFSTROKE
		:.heads-to   DOWNWARD
		:.line-to    MIDDLE [mix [DOTSIZE + STROKE] [XH / 2] 0.5]
		:.heads-to   DOWNWARD
		:.to-outline
	put-shapes : list : Ring [DOTSIZE - O] O [MIDDLE - DOTRADIUS + O] [MIDDLE + DOTRADIUS - O]
}

### Symbols with bars

create-glyph 'underscore' : glyph-construction {
	set-width WIDTH
	assign-unicode '_'
	
	put-shapes : create-stroke :.start-from SB 0 :.heads-to RIGHTWARD :.set-width STROKE 0
		:.line-to RIGHTSB 0 :.heads-to RIGHTWARD :.to-outline
}

create-glyph 'hyphen' : glyph-construction {
	set-width WIDTH
	assign-unicode '-'
	
	put-shapes : hbar SB RIGHTSB hyphenCenter
}
create-glyph 'plus' : glyph-construction {
	set-width WIDTH
	assign-unicode '+'
	
	include glyphs.hyphen
	
	put-shapes : vbar MIDDLE [hyphenCenter - [RIGHTSB - SB] * 0.55] [hyphenCenter + [RIGHTSB - SB] * 0.55]
}

create-glyph 'equal' : glyph-construction {
	set-width WIDTH
	assign-unicode '='
	
	put-shapes : hbar SB RIGHTSB [hyphenCenter - XH * 0.2]
	put-shapes : hbar SB RIGHTSB [hyphenCenter + XH * 0.2]
}
create-glyph 'bar' : glyph-construction {
	set-width WIDTH
	assign-unicode '|'
	put-shapes : create-stroke
		:.start-from MIDDLE parenTop
		:.heads-to DOWNWARD
		:.set-width [STROKE / 2] [STROKE / 2]
		:.line-to MIDDLE parenBot
		:.heads-to DOWNWARD
		:.to-outline
}
create-glyph 'slash' : glyph-construction {
	set-width WIDTH
	assign-unicode '/'
	
	local cor : 1 / [Math.sqrt [1 - [Math.pow [[RIGHTSB - SB - STROKE] / [parenTop - parenBot]] 2]]]
	
	start-from SB parenBot
	line-to [SB + STROKE * cor] parenBot
	line-to RIGHTSB parenTop
	line-to [RIGHTSB - STROKE * cor] parenTop
	reverse-last
}
create-glyph 'backslash' : glyph-construction {
	set-width WIDTH
	assign-unicode "\\"
	
	local cor : 1 / [Math.sqrt [1 - [Math.pow [[RIGHTSB - SB - STROKE] / [parenTop - parenBot]] 2]]]
	
	start-from RIGHTSB parenBot
	line-to [RIGHTSB - STROKE * cor] parenBot
	line-to SB parenTop
	line-to [SB + STROKE * cor] parenTop
	reverse-last
}
create-glyph 'numbersign' : glyph-construction {
	set-width WIDTH
	assign-unicode '#'
	
	local fine : Math.min STROKE [[RIGHTSB - SB] * 0.25]
	
	put-shapes : hbar SB RIGHTSB [mix parenTop parenBot 0.33]
	put-shapes : hbar SB RIGHTSB [mix parenTop parenBot 0.67]
	put-shapes : vbar [mix SB RIGHTSB 0.3] [parenBot + fine] [parenTop - fine] fine
	put-shapes : vbar [mix SB RIGHTSB 0.7] [parenBot + fine] [parenTop - fine] fine
}

create-glyph 'less' : glyph-construction {
	set-width WIDTH
	assign-unicode '<'
	
	local top : mix 0 CAP 0.75
	local bot : mix 0 CAP 0.1
	
	put-shapes : create-stroke
		:.start-from RIGHTSB top
		:.set-width  HALFSTROKE HALFSTROKE
		:.line-to    SB [mix top bot 0.5]
		:.heads-to   LEFTWARD
		:.to-outline 0 0 1 true
	
	put-shapes : create-stroke
		:.start-from SB [mix top bot 0.5]
		:.set-width  HALFSTROKE HALFSTROKE
		:.heads-to   RIGHTWARD
		:.line-to    RIGHTSB bot
		:.to-outline 0 0 1 true
}

create-glyph 'greater' : glyph-construction {
	set-width WIDTH
	assign-unicode '>'
	
	local top : mix 0 CAP 0.75
	local bot : mix 0 CAP 0.1
	
	put-shapes : create-stroke
		:.start-from SB top
		:.set-width  HALFSTROKE HALFSTROKE
		:.line-to    RIGHTSB [mix top bot 0.5]
		:.heads-to   RIGHTWARD
		:.to-outline 0 0 1 true
	
	put-shapes : create-stroke
		:.start-from RIGHTSB [mix top bot 0.5]
		:.set-width  HALFSTROKE HALFSTROKE
		:.heads-to   LEFTWARD
		:.line-to    SB bot
		:.to-outline 0 0 1 true
}

### Overmarks
create-glyph 'quotesingle' : glyph-construction {
	set-width WIDTH
	assign-unicode 0x27
	
	put-shapes : create-stroke
		:.start-from MIDDLE CAP
		:.heads-to   DOWNWARD
		:.set-width  HALFSTROKE HALFSTROKE
		:.line-to    MIDDLE [XH - HALFSTROKE]
		:.set-width  [STROKE * 0.4] [STROKE * 0.4]
		:.heads-to   DOWNWARD
		:.to-outline
}

create-glyph 'quotedouble' : glyph-construction {
	set-width WIDTH
	assign-unicode 0x22
	
	put-shapes : create-stroke
		:.start-from [mix SB RIGHTSB 0.25] CAP
		:.heads-to   DOWNWARD
		:.set-width  HALFSTROKE HALFSTROKE
		:.line-to    [mix SB RIGHTSB 0.25] [XH - HALFSTROKE]
		:.set-width  [STROKE * 0.4] [STROKE * 0.4]
		:.heads-to   DOWNWARD
		:.to-outline
	
	put-shapes : create-stroke
		:.start-from [mix SB RIGHTSB 0.75] CAP
		:.heads-to   DOWNWARD
		:.set-width  HALFSTROKE HALFSTROKE
		:.line-to    [mix SB RIGHTSB 0.75] [XH - HALFSTROKE]
		:.set-width  [STROKE * 0.4] [STROKE * 0.4]
		:.heads-to   DOWNWARD
		:.to-outline
}

create-glyph 'grave' : glyph-construction {
	assign-unicode '`'
	include glyphs.space BASE
	include glyphs.graveAbove
}
create-glyph 'acute' : glyph-construction {
	assign-unicode 0xB4
	include glyphs.space BASE
	include glyphs.acuteAbove
}
create-glyph 'asciicircum' : glyph-construction {
	set-width WIDTH
	assign-unicode 0x5E
	include glyphs.space BASE
	include glyphs.circumflexAbove
}
create-glyph 'asciicircum' : glyph-construction {
	set-width WIDTH
	assign-unicode '~'
	include glyphs.space BASE
	include glyphs.tildeAbove
}

### Asterisk
create-glyph 'asterisk' : glyph-construction {
	set-width WIDTH
	assign-unicode '*'
	
	local radius : LONGJUT * 1.2
	local centery : parenTop - LONGJUT * 1.5
	local fine : STROKE * 0.4
	local final : 0.5 * [Math.min STROKE [radius * Math.PI * 2 / 10]]
	
	foreach j [range 0 5] : begin {
		put-shapes : create-stroke
			:.start-from MIDDLE centery
			:.set-width  fine fine
			:.line-to    [MIDDLE + radius * [Math.sin [j / 5 * Math.PI * 2]]] [centery + radius * [Math.cos [j / 5 * Math.PI * 2]]]
			:.set-width  final final
			:.to-outline 0 0 1 true
	}
}

create-glyph 'agrave' : glyph-construction {
	assign-unicode 0xE0
	include glyphs.a BASE
	include glyphs.graveAbove
}
create-glyph 'aacute' : glyph-construction {
	assign-unicode 0xE1
	include glyphs.a BASE
	include glyphs.acuteAbove
}
create-glyph 'acircumflex' : glyph-construction {
	assign-unicode 0xE2
	include glyphs.a BASE
	include glyphs.circumflexAbove
}
create-glyph 'atilde' : glyph-construction {
	assign-unicode 0xE3
	include glyphs.a BASE
	include glyphs.tildeAbove
}

create-glyph 'percent' : glyph-construction {
	set-width WIDTH
	assign-unicode '%'
	local percentDotSize 0.3
	
	local cor : 1 / [Math.sqrt [1 - [Math.pow [[RIGHTSB - SB - STROKE] / [CAP - 0]] 2]]]
	
	start-from SB 0
	line-to [SB + STROKE * cor] 0
	line-to RIGHTSB CAP
	line-to [RIGHTSB - STROKE * cor] CAP
	
	put-shapes : create-stroke
		:.start-from SB CAP
		:.heads-to   DOWNWARD
		:.set-width  [Math.min [[RIGHTSB - SB] * 0.33] [STROKE * 1.5]] 0
		:.line-to    SB [mix CAP 0 0.3]
		:.heads-to   DOWNWARD
		:.to-outline
	
	put-shapes : create-stroke
		:.start-from RIGHTSB 0
		:.heads-to   UPWARD
		:.set-width  [Math.min [[RIGHTSB - SB] * 0.33] [STROKE * 1.5]] 0
		:.line-to    RIGHTSB [mix 0 CAP 0.3]
		:.heads-to   UPWARD
		:.to-outline
}