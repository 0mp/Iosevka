### Automatic build accented letters

define [isAboveMark mark] : mark && mark.anchors && mark.anchors.above && mark.anchors.above.type === MARK

foreach code [range 0x00A0 0xFFFF] : if [not unicodeGlyphs`code] : begin {
	local str : String.fromCharCode code
	local nfd : str.normalize 'NFD'
	if [nfd.length > 1] : begin {
		local parts ()
		local allFound true
		local hasMarkAbove false
		foreach j [range 0 nfd.length] : begin {
			set parts`j unicodeGlyphs`[nfd.charCodeAt j]
			if [not parts`j] : set allFound false
			if [isAboveMark parts`j] : set hasMarkAbove true
		}
		if allFound : begin {
			if [parts.0 === glyphs.i && hasMarkAbove] : parts.0 = glyphs.dotlessi
			if [parts.0 === glyphs.j && hasMarkAbove] : parts.0 = glyphs.dotlessj
			
			create-glyph [parts.map [[part] -> part.name] :.join '_'] : glyph-construction {
				assign-unicode code
				include parts.0 AS_BASE
				foreach part [items-of : parts.slice 1] : include part
			}
		}
	}
}

create-glyph 'grave' : glyph-construction {
	assign-unicode '`'
	include glyphs.space AS_BASE
	include glyphs.graveAbove
}
create-glyph 'acute' : glyph-construction {
	assign-unicode 0xB4
	include glyphs.space AS_BASE
	include glyphs.acuteAbove
}
create-glyph 'asciicircum' : glyph-construction {
	set-width WIDTH
	assign-unicode 0x5E
	include glyphs.space AS_BASE
	include glyphs.circumflexAbove
}
create-glyph 'asciitilde' : glyph-construction {
	set-width WIDTH
	assign-unicode '~'
	include glyphs.space AS_BASE
	include glyphs.tildeAbove
}
create-glyph 'latin1dieresis' : glyph-construction {
	set-width WIDTH
	assign-unicode 0xA8
	include glyphs.space AS_BASE
	include glyphs.dieresisAbove
}
create-glyph 'latin1cedilla' : glyph-construction {
	set-width WIDTH
	assign-unicode 0xB8
	include glyphs.space AS_BASE
	include glyphs.cedillaBelow
}