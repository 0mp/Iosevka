###### EXTENDED LATIN CHARACTERS
###### DECORATED


# Slashed

create-glyph 'lambdaslash' : glyph-construction
	assign-unicode 0x19B
	include glyphs.lambda AS_BASE
	local fine : 0.5 * [adviceBlackness 5]
	local middle : mix 0 CAP 0.7
	local middlex [tp [Upright] glyphs.l.anchors.above].x
	include : dispiro
		flat (middlex - LONGJUT * 0.8) (middle - LONGJUT * 0.4) [widths fine fine]
		curl (middlex + LONGJUT * 0.8) (middle + LONGJUT * 0.4)

# Barred






# Dotted
create-glyph 'glottalstopbar' : glyph-construction
	assign-unicode 0x2A1
	include glyphs.glottalstop AS_BASE
	include : HOverlayBar (MIDDLE - LONGJUT * 0.6) (MIDDLE + LONGJUT * 0.6) (CAP * 0.25)

create-glyph 'revglottalstopbar' : glyph-construction
	assign-unicode 0x2A2
	include glyphs.revglottalstop AS_BASE
	include : HOverlayBar (MIDDLE - LONGJUT * 0.6) (MIDDLE + LONGJUT * 0.6) (CAP * 0.25)

# Right-tail


create-glyph 'ezhtail' : glyph-construction
	assign-unicode 0x1BA
	local b : mix DESCENDER XH 0.25
	include : EzhShape XH b nothing true
	local y : mix [mix b XH 0.6] b 0.5
	include : dispiro
		widths.rhs
		g4.down.start RIGHTSB y [heading DOWNWARD]
		arcvh
		flat [mix SB RIGHTSB 0.45] b
		curl [mix SB RIGHTSB 0.4] b
		archv
		g4 (SB + STROKE * CORRECTION_HX) [mix (DESCENDER + STROKE) b 0.5]
		arcvh
		flat [mix SB RIGHTSB 0.4] (DESCENDER + STROKE)
		curl RIGHTSB (DESCENDER + STROKE)



create-glyph 'ezhcurlytail' : glyph-construction
	assign-unicode 0x293
	include eMarks
	include : EzhShape XH DESCENDER nothing true
	local fine : adviceBlackness 3
	local rinner : (XH * 0.4 - fine * 1.5) / 2
	local m1 : RIGHTSB - STROKE * CORRECTION_HX
	local x2 : RIGHTSB - HALFSTROKE
	local y2 DESCENDER
	include : dispiro
		widths.lhs
		flat m1 [mix [mix DESCENDER XH 0.6] DESCENDER 0.5] [heading DOWNWARD]
		curl m1 ([mix [mix DESCENDER XH 0.6] DESCENDER 0.5] - 1) [heading DOWNWARD]
		CurlyTail fine rinner m1 DESCENDER SB x2 y2


# Rhotic hook
define [ErTail left w dohook] : glyph-construction
	local right WIDTH
	local mid : mix left right 0.5
	local rise : (WIDTH - left) * 0.3
	local sw : fallback w (markFine * 2)
	include : dispiro
		widths.center sw
		g2 (left) (XH * 0.5)
		g2 (mid - sw * CORRECTION_HX) (XH * 0.5 + rise) [widths 0 sw]
	include : dispiro
		widths.rhs sw
		flat mid (XH * 0.5 + rise) [heading DOWNWARD]
		curl mid (XH * 0.5 + [if dohook 0 (rise - 1)]) [heading DOWNWARD]
		if dohook {[hookend (XH * 0.5 - rise)]} {[arcvh]}
		g4 (right - [if dohook (markFine * 2) 0]) (XH * 0.5 - [if dohook (rise * 0.5) rise]) [if dohook nothing [heading RIGHTWARD]]
		#if dohook {[hookend (XH * 0.5 - rise)] [g4 right (XH * 0.5)]} {}

create-glyph 'rhotichook' : glyph-construction
	assign-unicode 0x2DE
	include : ErTail (-STROKE * CORRECTION_HX) STROKE true

if [not recursive] : let [thinfont : Widen {'schwa' 'revlatinepsilon'} 0.85 1] : begin
	create-glyph 'er' : glyph-construction
		assign-unicode 0x25A
		include eMarks
		include thinfont.schwa
		include : ErTail (WIDTH * 0.85 - SB - markFine * CORRECTION_HX)
	create-glyph 'revlatinepsiloner' : glyph-construction
		assign-unicode 0x25D
		include eMarks
		include thinfont.revlatinepsilon
		include : ErTail (WIDTH * 0.85 - SB - markFine * CORRECTION_HX)

# Double stack
create-glyph 'bidentalpercussive' : glyph-construction
	assign-unicode 0x2AD
	local g : create-glyph : glyph-construction
		include : HBarTop SB RIGHTSB (CAP * 0.4)
		include : VBarLeft SB (CAP * 0.1) (CAP * 0.4)
		include : VBarRight RIGHTSB (CAP * 0.1) (CAP * 0.4)
	include g
	apply-transform : Upright
	apply-transform : Translate 0 (CAP / 2)
	apply-transform : Italify
	include g

# Turned glyphs
turned nothing 0x2C79 'rrtail' MIDDLE (XH / 2)