###### EXTENDED LATIN CHARACTERS
###### DECORATED
# Czech háčeks
create-glyph 'tcaron' : glyph-construction
	assign-unicode 0x165
	include glyphs.commaAbove
	apply-transform : Translate (WIDTH + (RIGHTSB - SB) / 2) 0
	include glyphs.t AS_BASE
create-glyph 'dcaron' : glyph-construction
	assign-unicode 0x10F
	include glyphs.commaAbove
	apply-transform : Translate (WIDTH + (RIGHTSB - SB) / 2 + markExtend / 2) 0
	local f : Thinner {'d'} 0.95
	include f.d
	include bMarks
create-glyph 'Lcaron' : glyph-construction
	assign-unicode 0x13D
	include glyphs.commaAbove
	apply-transform : Translate (WIDTH + (RIGHTSB - SB) * 0.375) 0
	include glyphs.L AS_BASE
create-glyph 'lcaron' : glyph-construction
	assign-unicode 0x13E
	include glyphs.commaAbove
	apply-transform : Translate (WIDTH + (RIGHTSB - SB) * 0.375) 0
	include glyphs.l AS_BASE
# Slashed
create-glyph 'Oslash' : glyph-construction
	assign-unicode 0xD8
	
	local fine : 0.5 * OVERLAYSTROKE
	
	include glyphs.O AS_BASE
	include : dispiro
		flat (SB + O + fine) [mix CAP 0 1.05] [widths fine fine]
		curl (RIGHTSB - O - fine) [mix 0 CAP 1.05]

create-glyph 'oslash' : glyph-construction
	assign-unicode 0xF8
	
	local fine : 0.5 * OVERLAYSTROKE
	
	include glyphs.o AS_BASE
	include : dispiro
		flat (SB + O + fine) [mix XH 0 1.05] [widths fine fine]
		curl (RIGHTSB - O - fine) [mix 0 XH 1.05]

create-glyph 'Lslash' : glyph-construction
	assign-unicode 0x141
	include glyphs.L AS_BASE
	local fine : 0.5 * OVERLAYSTROKE
	local middle : mix STROKE CAP 0.5
	include : dispiro
		flat [mix 0 SB 0.5] (middle - LONGJUT * 0.4) [widths fine fine]
		curl (1.6 * LONGJUT + [mix 0 SB 0.5]) (middle + LONGJUT * 0.4)

define [FlatSlashShape middlex middle fine] : glyph-construction
	include : dispiro
		flat (middlex - LONGJUT * 0.8) (middle - LONGJUT * 0.4) [widths fine fine]
		curl (middlex + LONGJUT * 0.8) (middle + LONGJUT * 0.4)

create-glyph 'lslash' : glyph-construction
	assign-unicode 0x142
	include glyphs.l AS_BASE
	include : FlatSlashShape [tp [Upright] glyphs.l.anchors.above].x [mix 0 CAP BARPOS] (0.5 * OVERLAYSTROKE)

create-glyph 'lambdaslash' : glyph-construction
	assign-unicode 0x19B
	include glyphs.lambda AS_BASE
	local fine : 0.5 * [adviceBlackness 5]
	local middle : mix 0 CAP 0.7
	local middlex [tp [Upright] glyphs.l.anchors.above].x
	include : dispiro
		flat (middlex - LONGJUT * 0.8) (middle - LONGJUT * 0.4) [widths fine fine]
		curl (middlex + LONGJUT * 0.8) (middle + LONGJUT * 0.4)

create-glyph 'longsslash' : glyph-construction
	assign-unicode 0x1E9C
	include glyphs.longs AS_BASE
	include : FlatSlashShape [tp [Upright] glyphs.l.anchors.above].x [mix 0 CAP BARPOS] (0.5 * OVERLAYSTROKE)

# Barred
create-glyph 'Gbar' : glyph-construction
	assign-unicode 0x1E4
	include glyphs.G AS_BASE
	include : HOverlayBar [mix SB RIGHTSB 0.5] [mix RIGHTSB WIDTH 0.7] [mix 0 CAPMIDDLE 0.55]

create-glyph 'gbar' : glyph-construction
	assign-unicode 0x1E5
	include glyphs.g AS_BASE
	include : HBar [mix 0 SB 0.5] [mix SB RIGHTSB 0.5] glyphs.g.anchors.overlay.y OVERLAYSTROKE

create-glyph 'Hbar' : glyph-construction
	assign-unicode 0x126
	
	include glyphs.H AS_BASE
	include : HOverlayBar [mix SB 0 0.7] [mix RIGHTSB WIDTH 0.7] [mix CAPMIDDLE CAP 0.45]

create-glyph 'hbar' : glyph-construction
	assign-unicode 0x127
	
	include glyphs.h AS_BASE
	include : HOverlayBar [mix SB 0 0.7] [mix SB RIGHTSB 0.5] [mix XH CAP 0.45]

create-glyph 'Bbar' : glyph-construction
	assign-unicode 0x243
	
	include glyphs.B AS_BASE
	include : HOverlayBar [mix SB 0 0.7] [mix SB RIGHTSB 0.5] [mix 0 CAP 0.3]

create-glyph 'bbar' : glyph-construction
	assign-unicode 0x180
	
	include glyphs.b AS_BASE
	include : HOverlayBar [mix SB 0 0.7] [mix SB RIGHTSB 0.5] [mix XH CAP 0.45]

create-glyph 'Tbar' : glyph-construction
	assign-unicode 0x166
	
	include glyphs.T AS_BASE
	include : HOverlayBar [mix MIDDLE SB 0.8] [mix MIDDLE RIGHTSB 0.8] [mix 0 CAP 0.45]

create-glyph 'tbar' : glyph-construction
	assign-unicode 0x167
	
	include glyphs.t AS_BASE
	include : HOverlayBar ([mix MIDDLE SB 0.7] - TBALANCE * 0.5) ([mix MIDDLE RIGHTSB 0.7] - TBALANCE * 0.5) [mix 0 XH 0.6]

create-glyph 'Lbar' : glyph-construction
	assign-unicode 0x23D
	include glyphs.L AS_BASE
	include : HOverlayBar (SB * 0.3) [mix (SB + STROKE) (RIGHTSB - STROKE) 0.55] (CAP * BARPOS)

create-glyph 'Cbar' : glyph-construction
	assign-unicode 0xA792
	include glyphs.C AS_BASE
	include : HOverlayBar (SB * 0.3) [mix (SB + STROKE) (RIGHTSB - STROKE) 0.55] (CAP * BARPOS)

create-glyph 'cbar' : glyph-construction
	assign-unicode 0xA793
	include glyphs.c AS_BASE
	include : HOverlayBar (SB * 0.3) [mix (SB + STROKE) (RIGHTSB - STROKE) 0.55] (XH * BARPOS)

# Dotted
create-glyph 'Ldot' : glyph-construction
	assign-unicode 0x13F
	include glyphs.L AS_BASE
	include : Ring ([mix STROKE CAP 0.5] + DOTRADIUS) ([mix STROKE CAP 0.5] - DOTRADIUS) ([mix SB RIGHTSB 0.65] - DOTRADIUS) ([mix SB RIGHTSB 0.65] + DOTRADIUS)

create-glyph 'ldot' : glyph-construction
	assign-unicode 0x140
	include glyphs.l AS_BASE
	apply-transform : Translate (-DOTRADIUS / 2) 0
	include : Ring ([mix STROKE CAP 0.5] + DOTRADIUS) ([mix STROKE CAP 0.5] - DOTRADIUS) ([mix SB RIGHTSB 1] - DOTSIZE) [mix SB RIGHTSB 1]

create-glyph 'Obar' : glyph-construction
	assign-unicode 0x19F
	include glyphs.O AS_BASE
	include : HOverlayBar (SB - O) (RIGHTSB + O) (CAP * 0.5)

create-glyph 'obar' : glyph-construction
	assign-unicode 0x275
	include glyphs.o AS_BASE
	include : HOverlayBar (SB - O) (RIGHTSB + O) (XH * 0.5)

create-glyph 'glottalstopbar' : glyph-construction
	assign-unicode 0x2A1
	include glyphs.glottalstop AS_BASE
	include : HOverlayBar (MIDDLE - LONGJUT * 0.6) (MIDDLE + LONGJUT * 0.6) (CAP * 0.25)

create-glyph 'revglottalstopbar' : glyph-construction
	assign-unicode 0x2A2
	include glyphs.revglottalstop AS_BASE
	include : HOverlayBar (MIDDLE - LONGJUT * 0.6) (MIDDLE + LONGJUT * 0.6) (CAP * 0.25)

create-glyph 'eshbar' : glyph-construction
	assign-unicode 0x284
	include glyphs.esh AS_BASE
	include : HOverlayBar (MIDDLE - LONGJUT * 0.6) (MIDDLE + LONGJUT * 0.6) (XH * 0.25)

# bdot and ddot 's dots are closer to the glyph
create-glyph 'bdot' : glyph-construction
	include glyphs.dotAbove
	apply-transform : Translate (WIDTH + HALFSTROKE) 0
	include glyphs.b AS_BASE
	assign-unicode 0x1E03

create-glyph 'ddot' : glyph-construction
	include glyphs.dotAbove
	apply-transform : Translate (WIDTH - HALFSTROKE) 0
	include glyphs.d AS_BASE
	assign-unicode 0x1E0B

# Legged
create-glyph 'rlongleg' : glyph-construction
	assign-unicode 0x27C
	include pMarks
	include glyphs.r false {'serifLB'}
	include : VBarLeft (SB + RBALANCE) DESCENDER 0
	if SLAB : begin
		include : CenterBottomSerif (SB + RBALANCE + STROKE * 0.75 * CORRECTION_HX) DESCENDER (JUT + HALFSTROKE / 2)
		tag-contour 'serifLB'

create-glyph 'turnmleg' : glyph-construction
	assign-unicode 0x270
	include pMarks
	include glyphs.m
	eject-contour 'serifLT'
	include : FlipAround MIDDLE (XH / 2)
	include : VBarRight (RIGHTSB - O) DESCENDER 0 MVERTSTROKE

# Hookleft
create-glyph 'Bhookleft' : glyph-construction
	assign-unicode 0x181
	include glyphs.B AS_BASE {"serifLT"}
	include : LeftHook SB CAP

create-glyph 'Dhookleft' : glyph-construction
	assign-unicode 0x18A
	include glyphs.D AS_BASE {"serifLT"}
	include : LeftHook SB CAP

create-glyph 'Phookleft' : glyph-construction
	assign-unicode 0x1A4
	include glyphs.P AS_BASE {"serifLT"}
	include : LeftHook (SB * 1.25) CAP

create-glyph 'Thookleft' : glyph-construction
	assign-unicode 0x1AC
	include capitalMarks {"serifLT"}
	include : LeftHook (SB + [adviceBlackness 4.25] * 1.5) CAP MIDDLE
	include : HBarTop MIDDLE RIGHTSB CAP
	include : VBar MIDDLE 0 CAP

# Hooktop
define [HooktopLeftBar stroke bottom] : glyph-construction
	include : dispiro
		widths.lhs [fallback stroke STROKE]
		g4 RIGHTSB (CAP - HOOK)
		hookstart CAPO
		flat SB (CAP - SMALLSMOOTHA)
		curl SB [fallback bottom 0] [heading DOWNWARD]

create-glyph 'hhooktop' : glyph-construction
	assign-unicode 0x266
	include bMarks
	include : nShoulder (SB + STROKE * CORRECTION_HX) RIGHTSB SHOULDERFINE
	include : HooktopLeftBar
	if SLAB : begin
		if (para.italicangle > 0)
		: then : include : RightwardBottomSerif RIGHTSB 0 SIDEJUT
		: else : include : CenterBottomSerif (RIGHTSB - HALFSTROKE * CORRECTION_HX) 0 JUT
		tag-contour 'serifRB'
		if (para.italicangle === 0) : begin
			include : CenterBottomSerif (SB + HALFSTROKE * CORRECTION_HX) 0 JUT
			tag-contour 'serifLB'

create-glyph 'bhooktop' : glyph-construction
	assign-unicode 0x253
	include bMarks
	include : oLeft
	include : HooktopLeftBar
	if SLAB : begin
		include : LeftwardBottomSerif SB 0 SIDEJUT
		tag-contour 'serifLB'

create-glyph 'phooktop' : glyph-construction
	assign-unicode 0x1A5
	include ifMarks
	include : oLeft
	include : HooktopLeftBar nothing DESCENDER
	if SLAB : begin
		include : CenterBottomSerif (SB + HALFSTROKE * CORRECTION_HX) DESCENDER JUT
		tag-contour 'serifLB'

create-glyph 'Khooktop' : glyph-construction
	assign-unicode 0x198
	include capitalMarks
	include : KShape CAP
	include : VBarLeft SB 0 (CAP - HOOK - HALFSTROKE)
	include : VerticalHook (SB + HALFSTROKE * CORRECTION_HX) (CAP - HOOK - HALFSTROKE) HOOKX (-HOOK)

create-glyph 'khooktop' : glyph-construction
	assign-unicode 0x199
	include bMarks
	include : KShape XH
	include : VBarLeft SB 0 (CAP - HOOK - HALFSTROKE)
	include : VerticalHook (SB + HALFSTROKE * CORRECTION_HX) (CAP - HOOK - HALFSTROKE) HOOKX (-HOOK)

create-glyph 'scriptghooktop' : glyph-construction
	assign-unicode 0x260
	include glyphs.scriptg AS_BASE
	eject-contour 'serifRT'
	include : VerticalHook (RIGHTSB - HALFSTROKE * CORRECTION_HX) XH HOOKX (-HOOK)

create-glyph 'thooktop' : glyph-construction
	assign-unicode 0x1AD
	include eMarks
	include : SmallTShape (XH - HALFSTROKE) 0
	include : VerticalHook (MIDDLE - TBALANCE) XH HOOKX (-HOOK)

create-glyph 'dhooktop' : glyph-construction
	assign-unicode 0x257
	include bMarks
	include glyphs.'a.italic'
	include : VerticalHook (RIGHTSB - HALFSTROKE * CORRECTION_HX) XH HOOKX (-HOOK)

create-glyph 'qhooktop' : glyph-construction
	assign-unicode 0x2A0
	include pMarks
	include glyphs.q
	eject-contour 'serifRT'
	include : VerticalHook (RIGHTSB - HALFSTROKE * CORRECTION_HX) XH HOOKX (-HOOK)
	#include : VBarRight RIGHTSB DESCENDER 0

create-glyph 'Chooktop' : glyph-construction
	assign-unicode 0x187
	include glyphs.C AS_BASE
	include : VBarRight RIGHTSB (CAP - HOOK) CAP
	include : VerticalHook (RIGHTSB - HALFSTROKE * CORRECTION_HX) CAP HOOKX (-HOOK)

create-glyph 'chooktop' : glyph-construction
	assign-unicode 0x188
	include glyphs.c AS_BASE
	include : VBarRight RIGHTSB (XH - HOOK) XH
	include : VerticalHook (RIGHTSB - HALFSTROKE * CORRECTION_HX) XH HOOKX (-HOOK)

create-glyph 'Ghooktop' : glyph-construction
	assign-unicode 0x193
	include glyphs.G AS_BASE
	include : VBarRight RIGHTSB (CAP - HOOK) CAP
	include : VerticalHook (RIGHTSB - HALFSTROKE * CORRECTION_HX) CAP HOOKX (-HOOK)

create-glyph 'smcpGhooktop' : glyph-construction
	assign-unicode 0x29B
	include glyphs.smcpG AS_BASE
	include : VBarRight RIGHTSB (XH - HOOK) XH
	include : VerticalHook (RIGHTSB - HALFSTROKE * CORRECTION_HX) XH HOOKX (-HOOK)

define [VHooktopShape top] : glyph-construction
	include : VShape top
	eject-contour 'serifRT'
	eject-contour 'strokeUp'
	
	include : dispiro
		widths.rhs
		straight.left.start (RIGHTSB + HOOKX / 3) (top - STROKE)
		g4 (RIGHTSB - HOOKX / 3) (top - HALFSTROKE - HOOK)
		quadcontrols 0.4 0.75 10 unimportant g2
		g4   (MIDDLE + HALFSTROKE * CORRECTION_HX) 0 [widths.rhs VShape.fine]

create-glyph 'vhooktop' : glyph-construction
	assign-unicode 0x2C71
	include eMarks
	include : VHooktopShape XH


define [WHooktopShape top] : glyph-construction
	include : WShape top
	this.contours.pop
	if SLAB : begin
		local s : this.contours.pop
		this.contours.pop
		this.contours.push s

	include : dispiro
		widths.rhs
		straight.down.start RIGHTSB (top - HOOK) [heading DOWNWARD]
		quadcontrols 0 0.3 6 unimportant g2
		g4   (WShape.m2 + WShape.fine / 2 * CORRECTION_HX) 0 [widths.rhs (WShape.fine * 0.8)]
	include : VerticalHook (RIGHTSB - HALFSTROKE * CORRECTION_HX) (top - HOOK) (HOOKX * 0.65) (-HOOK + HALFSTROKE)

create-glyph 'Whooktop' : glyph-construction
	assign-unicode 0x2C72
	include capitalMarks
	
	include : WHooktopShape CAP
create-glyph 'whooktop' : glyph-construction
	assign-unicode 0x2C73
	include eMarks
	
	include : WHooktopShape XH

create-glyph 'Yhooktop' : glyph-construction
	assign-unicode 0x1B3
	include glyphs.Y AS_BASE
	eject-contour 'strokeRT'
	eject-contour 'serifRT'
	local cross (CAP * 0.4)
	include : dispiro
		widths.rhs
		straight.left.start (RIGHTSB + HOOKX / 3) (CAP - STROKE)
		g4 (RIGHTSB - HOOKX / 3) (CAP - HOOK)
		quadcontrols 0.55 0.7 8 unimportant
		g4   (MIDDLE + STROKE / 2 * CORRECTION_HX) cross

create-glyph 'yhooktop' : glyph-construction
	assign-unicode 0x1B4
	include glyphs.y AS_BASE
	eject-contour 'strokeR'
	eject-contour 'serifRT'
	
	local xbottom : mix SB RIGHTSB 0.28
	local turnp : XH / (XH - DESCENDER)
	local xb : mix SB RIGHTSB 0.49
	local yb : mix 0 XH (0.05 * turnp)
	
	# include : xStrand xbottom DESCENDER RIGHTSB XH 0.1 0.6 0.14
	include : dispiro
		widths.center
		flat (xbottom + HALFSTROKE * CORRECTION_HX) DESCENDER [heading UPWARD]
		curl (xbottom + HALFSTROKE * CORRECTION_HX) (DESCENDER + 1) [heading UPWARD]
		alsothruthem {{0 0.05} {0.1 0.19} {0.2125 0.33} {0.44 0.6} {0.93 0.98}} important
		g2   (RIGHTSB - HOOKX / 6) [mix DESCENDER (XH - HALFSTROKE) 0.98]
		flat (RIGHTSB + HOOKX / 4 - 1) (XH - HALFSTROKE)
		curl (RIGHTSB + HOOKX / 4) (XH - HALFSTROKE)

# Left-tail
create-glyph 'fltail' : glyph-construction
	assign-unicode 0x192
	include glyphs.'longs.italic' AS_BASE
	include : HBarTop (MIDDLE - LONGJUT) (MIDDLE + LONGJUT) XH

create-glyph 'Fltail' : glyph-construction
	assign-unicode 0x191
	include glyphs.F AS_BASE {'serifBottom'}
	include : VerticalHook (SB * 1.5 + HALFSTROKE * CORRECTION_HX) 0 (-HOOKX) HOOK

create-glyph 'nltail' : glyph-construction
	assign-unicode 0x272
	include glyphs.n AS_BASE
	eject-contour 'serifLB'
	include : VerticalHook (SB + HALFSTROKE * CORRECTION_HX) 0 (-HOOKX) HOOK

create-glyph 'tltail' : glyph-construction
	assign-unicode 0x1AB
	include ifMarks
	include glyphs.t
	local attach : utp currentGlyph.gizmo glyphs.t.anchors.bottomright
	include : VBarRight attach.x 0 attach.y
	include : VerticalHook (attach.x - HALFSTROKE * CORRECTION_HX) 0 (-HOOKX) HOOK

create-glyph 'Nltail' : glyph-construction
	assign-unicode 0x19D
	include glyphs.N AS_BASE {'serifLB'}
	include : VerticalHook (SB + HALFSTROKE * CORRECTION_HX) 0 (-HOOKX) HOOK

create-glyph 'mltail' : glyph-construction
	assign-unicode 0x271
	include pMarks
	include glyphs.m
	eject-contour 'serifRB'
	include : VerticalHook (RIGHTSB - O - MVERTSTROKE / 2 * CORRECTION_HX) 0 (-HOOKX) HOOK MVERTSTROKE

create-glyph 'hhooktopltail' : glyph-construction
	assign-unicode 0x267
	include pMarks
	include glyphs.hhooktop
	eject-contour 'serifRB'
	include : VerticalHook (RIGHTSB - HALFSTROKE * CORRECTION_HX) 0 (-HOOKX) HOOK

create-glyph 'hltail' : glyph-construction
	assign-unicode 0xA727
	include pMarks
	include glyphs.h
	eject-contour 'serifRB'
	include : VerticalHook (RIGHTSB - HALFSTROKE * CORRECTION_HX) 0 (-HOOKX) HOOK

create-glyph 'hookturnh' : glyph-construction
	assign-unicode 0x2AE
	include : nShoulder (SB + STROKE * CORRECTION_HX) RIGHTSB SHOULDERFINE XH (HOOK + HALFSTROKE + 1) SMOOTHA SMOOTHB
	include : VBarLeft SB 0 CAP
	include : create-glyph : glyph-construction
		include glyphs.rtailBR
		apply-transform : Upright
		apply-transform : Translate RIGHTSB (HOOK + HALFSTROKE)
		apply-transform : Italify
	include : FlipAround MIDDLE (XH / 2)
	include pMarks
	if SLAB : begin
		include : LeftwardTopSerif (RIGHTSB - STROKE * CORRECTION_HX) XH SIDEJUT
		include : CenterBottomSerif (RIGHTSB - HALFSTROKE * CORRECTION_HX) DESCENDER JUT

# Right-tail
create-glyph 'srtail' : glyph-construction
	assign-unicode 0x282
	include glyphs.rtailBR
	apply-transform : Upright
	apply-transform : Translate (SB + STROKE * CORRECTION_HX) 0
	apply-transform : Italify
	include pMarks
	include glyphs.s
	include : VBarLeft SB 0 SHOOK

create-glyph 'lrtail' : glyph-construction
	assign-unicode 0x26D
	include glyphs.rtailBR
	apply-transform : Translate (MIDDLE + HALFSTROKE * CORRECTION_HX) 0
	include glyphs.'l.hooky'
	include ifMarks

create-glyph 'rrtail' : glyph-construction
	assign-unicode 0x27D
	include pMarks
	include glyphs.r false {'serifLB'}
	include : create-glyph : glyph-construction
		include glyphs.rtailBR
		apply-transform : Upright
		apply-transform : Translate (SB + RBALANCE + STROKE * CORRECTION_HX) 0
		apply-transform : Italify

create-glyph 'turnrrtail' : glyph-construction
	assign-unicode 0x27B
	include pMarks
	include glyphs.r false {'serifLT'}
	include : FlipAround MIDDLE (XH / 2)
	include : create-glyph : glyph-construction
		include glyphs.rtailBR
		apply-transform : Upright
		apply-transform : Translate (RIGHTSB - RBALANCE) 0
		apply-transform : Italify

create-glyph 'trtail' : glyph-construction
	assign-unicode 0x288
	include ifMarks
	include : SmallTShape CAP DESCENDER

create-glyph 'ezhtail' : glyph-construction
	assign-unicode 0x1BA
	local b : mix DESCENDER XH 0.25
	include : EzhShape XH b nothing true
	local y : mix [mix b XH 0.6] b 0.5
	include : dispiro
		widths.rhs
		g4.down.start RIGHTSB y [heading DOWNWARD]
		arcvh
		flat [mix SB RIGHTSB 0.45] b
		curl [mix SB RIGHTSB 0.4] b
		archv
		g4 (SB + STROKE * CORRECTION_HX) [mix (DESCENDER + STROKE) b 0.5]
		arcvh
		flat [mix SB RIGHTSB 0.4] (DESCENDER + STROKE)
		curl RIGHTSB (DESCENDER + STROKE)

create-glyph 'Qrtail' : glyph-construction
	assign-unicode 0x24A
	include capitalMarks
	include : oRight CAP
	include : VBarRight RIGHTSB 0 CAP
	include : create-glyph : glyph-construction
		include glyphs.rtailBR
		apply-transform : Upright
		apply-transform : Translate RIGHTSB 0
		apply-transform : Italify
	if SLAB : begin
		include : RightwardTopSerif RIGHTSB CAP SIDEJUT
		tag-contour 'serifRT'

create-glyph 'qrtail' : glyph-construction
	assign-unicode 0x24B
	include eMarks
	include : oRight
	include : VBarRight RIGHTSB 0 XH
	include : create-glyph : glyph-construction
		include glyphs.rtailBR
		apply-transform : Upright
		apply-transform : Translate RIGHTSB 0
		apply-transform : Italify
	if SLAB : begin
		include : RightwardTopSerif RIGHTSB XH SIDEJUT
		tag-contour 'serifRT'

create-glyph 'hookturnhrtail' : glyph-construction
	assign-unicode 0x2AF
	include : nShoulder (SB + STROKE * CORRECTION_HX) RIGHTSB SHOULDERFINE XH (HOOK + HALFSTROKE + 1) SMOOTHA SMOOTHB
	include : VBarLeft SB 0 (XH - 1)
	include : create-glyph : glyph-construction
		include glyphs.rtailBR
		apply-transform : Upright
		apply-transform : Translate RIGHTSB (HOOK + HALFSTROKE)
		apply-transform : Italify
	include : FlipAround MIDDLE (XH / 2)
	include : create-glyph : glyph-construction
		include glyphs.rtailBR
		apply-transform : Upright
		apply-transform : Translate RIGHTSB 0
		apply-transform : Italify
	include pMarks
	if SLAB : begin
		include : LeftwardTopSerif (RIGHTSB - STROKE * CORRECTION_HX) XH SIDEJUT

# Downtail
create-glyph 'Zdtail' : glyph-construction
	assign-unicode 0x224
	include glyphs.Z AS_BASE
	eject-contour 'strokeBottom'
	eject-contour 'serifRB'
	include : dispiro
		widths.lhs
		flat SB 0
		curl (RIGHTSB - HOOKX) 0
		archv
		flat RIGHTSB (-HOOK) [widths 0 STROKE]
		curl RIGHTSB (-HOOK - 1)

create-glyph 'zdtail' : glyph-construction
	assign-unicode 0x225
	include glyphs.z AS_BASE
	eject-contour 'strokeBottom'
	eject-contour 'serifRB'
	include : dispiro
		widths.lhs
		flat SB 0 [heading RIGHTWARD]
		curl (RIGHTSB - HOOKX) 0
		archv
		g4 RIGHTSB (-HOOK) [widths.heading 0 STROKE DOWNWARD]

# Swash tail
create-glyph 'Sswash' : glyph-construction
	assign-unicode 0x2C7E
	include ifMarks
	include glyphs.S
	include : dispiro
		widths.lhs [adviceBlackness 4.5]
		g4 (SB - OXHOOK) HOOK
		alsothru 0.3 0.6 important
		flat (RIGHTSB - 1) DESCENDER [widths STROKE 0]
		curl RIGHTSB DESCENDER

create-glyph 'sswash' : glyph-construction
	assign-unicode 0x23F
	include pMarks
	include glyphs.s
	include : dispiro
		widths.lhs [adviceBlackness 4.5]
		g4 (SB - OXHOOK) SHOOK
		alsothru 0.36 0.6 important
		flat (RIGHTSB - 1) DESCENDER [widths STROKE 0]
		curl RIGHTSB DESCENDER

create-glyph 'Zswash' : glyph-construction
	assign-unicode 0x2C7F
	include ifMarks
	local cor 1.15
	
	include : HBarTop SB RIGHTSB CAP
	
	start-from SB 0
	line-to (SB + STROKE * cor) 0
	line-to RIGHTSB (CAP - STROKE)
	line-to (RIGHTSB - STROKE * cor) (CAP - STROKE)
	reverse-last
	
	include : dispiro
		widths.lhs
		g4 SB 0
		alsothru 0.36 0.6 important
		flat (RIGHTSB - 1) DESCENDER
		curl RIGHTSB DESCENDER
	if SLAB : begin
		include : DownwardLeftSerif SB CAP VJUT

create-glyph 'zswash' : glyph-construction
	assign-unicode 0x240
	include pMarks
	
	include : HBarTop SB RIGHTSB XH

	local cor 1.2
	start-from SB 0
	line-to (SB + STROKE * cor) 0
	line-to RIGHTSB (XH - STROKE)
	line-to (RIGHTSB - STROKE * cor) (XH - STROKE)
	reverse-last

	include : dispiro
		widths.lhs
		g4 (SB - OXHOOK) 0
		alsothru 0.36 0.6 important
		flat (RIGHTSB - 1) DESCENDER
		curl RIGHTSB DESCENDER
	
	if SLAB : begin
		include : DownwardLeftSerif SB XH VJUT

# Descended
create-glyph 'Zdesc' : glyph-construction
	assign-unicode 0x2C6B
	include glyphs.Z AS_BASE
	eject-contour 'serifRB'
	include : VBarRight [mix SB RIGHTSB 1.05] (HALFSTROKE - LONGJUT) STROKE

create-glyph 'zdesc' : glyph-construction
	assign-unicode 0x2C6C
	include glyphs.z AS_BASE
	eject-contour 'serifRB'
	include : VBarRight [mix SB RIGHTSB 1.05] (HALFSTROKE - LONGJUT) STROKE


# Curly tail
define [CurlyTail fine rinner m1 bottom _right x2 y2] : begin
	local right : _right - fine * [if (_right > m1) 1 (-1)]
	local mid : mix [mix m1 right 0.5] (right - rinner * [if (_right > m1) 1 (-1)]) 0.4
	return : list
		g4   mid (bottom + fine + O) [widths [if (_right > m1) 0 fine] [if (_right > m1) fine 0]]
		archv 2
		g4   right (bottom + fine + rinner - 0.1)
		g4   right (bottom + fine + rinner + 0.1)
		arcvh 2
		g4   mid (bottom + fine + rinner * 2 - O)
		alsothruthem {{0.25 0.06} {0.52 0.25}} important
		g4   x2 y2

define [HCurlyTail fine wide rinner left m1 _right x1 x2 y2] : glyph-construction
	local right : _right - fine
	local mid : right - rinner + O
	include : dispiro
		widths.rhs wide
		flat left wide [heading RIGHTWARD]
		curl m1 wide [heading RIGHTWARD]
		archv
		g4   right (wide + rinner) [widths.heading 0 fine UPWARD]
		arcvh
		g4   mid (wide + rinner * 2 - O) [heading LEFTWARD]
		quadcontrols ((x1 - mid) / (x2 - mid)) 0
		g4   x2 y2

create-glyph 'ncurlytail' : glyph-construction
	assign-unicode 0x235
	local fine : adviceBlackness 4
	local rinner : fine * 0.35
	local wide STROKE
	local m1 : RIGHTSB - rinner * 2
	local x2 : mix SB m1 0.5
	local y2 : -fine
	include eMarks
	include : VBarLeft SB 0 XH wide
	include : dispiro
		nShoulderKnots (SB + wide * CORRECTION_HX) m1 SHOULDERFINE nothing (fine * 2) nothing nothing wide
		CurlyTail fine rinner m1 0 (m1 + rinner * 2 + fine) x2 y2
	
	if SLAB : begin
		include : LeftwardTopSerif SB XH SIDEJUT
		tag-contour 'serifLT'
		if (para.italicangle === 0) : begin
			include : CenterBottomSerif (SB + HALFSTROKE * CORRECTION_HX) 0 JUT
			tag-contour 'serifLB'

create-glyph 'dcurlytail' : glyph-construction
	assign-unicode 0x221
	local fine : adviceBlackness 4
	local rinner : fine * 0.35
	local wide STROKE
	local m1 : RIGHTSB - rinner * 2
	local x2 : mix SB m1 0.5
	local y2 : -fine * 1.5
	include eMarks
	include : oRight XH m1
	include : dispiro
		widths.rhs
		flat m1 CAP [heading DOWNWARD]
		curl m1 (fine * 2)
		CurlyTail fine rinner m1 0 (m1 + rinner * 2 + fine) x2 y2
	if SLAB : begin
		include : LeftwardTopSerif (m1 - STROKE * CORRECTION_HX) CAP SIDEJUT

create-glyph 'lcurlytail' : glyph-construction
	assign-unicode 0x234
	include bMarks
	local fine : adviceBlackness 3.5
	local rinner : LONGJUT / 2 - fine / 2
	local m1 : MIDDLE + HALFSTROKE * CORRECTION_HX
	local x2 : mix SB m1 0.25
	local y2 : - fine
	include : LeftwardTopSerif MIDDLE CAP LONGJUT
	include : dispiro
		widths.rhs
		flat m1 CAP [heading DOWNWARD]
		curl m1 (fine * 2)
		CurlyTail fine rinner m1 0 (m1 + LONGJUT) x2 y2

create-glyph 'jcurlytail' : glyph-construction
	assign-unicode 0x29D
	include pMarks
	set-anchor 'above' BASE (MIDDLE + JBALANCE) XH
	local fine : adviceBlackness 3.5
	local rinner : LONGJUT / 2 - fine / 2
	local m1 : MIDDLE - HALFSTROKE * CORRECTION_HX + JBALANCE
	local x2 : mix RIGHTSB m1 0.25
	local y2 : DESCENDER + O
	include : LeftwardTopSerif (MIDDLE + JBALANCE) XH LONGJUT
	include : dispiro
		widths.lhs
		flat m1 XH [heading DOWNWARD]
		curl m1 (DESCENDER + fine * 3)
		CurlyTail fine rinner m1 DESCENDER (m1 - LONGJUT) x2 y2
	include glyphs.dotAbove

create-glyph 'eshcurlytail' : glyph-construction
	assign-unicode 0x286
	include ifMarks
	local fine : adviceBlackness 3.5
	local rinner : LONGJUT / 2 - fine / 2
	local m1 : MIDDLE - HALFSTROKE * CORRECTION_HX - FBALANCE
	local x2 : mix RIGHTSB m1 0.25
	local y2 : DESCENDER + O
	include glyphs.'longs.upright' false {'serifMB'}
	include : dispiro
		widths.lhs
		flat m1 XH [heading DOWNWARD]
		curl m1 (DESCENDER + fine * 3)
		CurlyTail fine rinner m1 DESCENDER (m1 - LONGJUT) x2 y2

create-glyph 'tcurlytail' : glyph-construction
	assign-unicode 0x236
	include bMarks
	local fine : adviceBlackness 3.5
	local rinner : LONGJUT / 2 - fine / 2
	local m1 : MIDDLE - TBALANCE - HALFSTROKE
	local x2 : mix SB m1 0.4
	local y2 : -fine
	include : HBarTop (m1 + HALFSTROKE - LONGJUT + TBALANCE2) (m1 + HALFSTROKE + LONGJUT + TBALANCE2) XH
	include : dispiro
		widths.lhs
		flat m1 CAP [heading DOWNWARD]
		curl m1 (fine * 2)
		CurlyTail fine rinner (m1 + STROKE * CORRECTION_HX) 0 (m1 + STROKE * CORRECTION_HX + LONGJUT) x2 y2

create-glyph 'ccurlytail' : glyph-construction
	assign-unicode 0x255
	include eMarks
	local fine : adviceBlackness 3
	local rinner : ((XH * 0.45) - fine * 1.5) / 2
	local m1 : SB + O + STROKE * CORRECTION_HX
	local x2 : SB + HALFSTROKE * 0.6
	local y2 : -XH * 0.05
	include : dispiro
		widths.lhs
		g4 RIGHTSB (XH - HOOK)
		hookstart XH
		flat.ai (SB + OX) (XH - SMALLSMOOTHA)
		curl.ai (SB + OX) SMALLSMOOTHB
		arcvh
		CurlyTail fine rinner m1 0 RIGHTSB x2 y2

create-glyph 'ezhcurlytail' : glyph-construction
	assign-unicode 0x293
	include eMarks
	include : EzhShape XH DESCENDER nothing true
	local fine : adviceBlackness 3
	local rinner : (XH * 0.4 - fine * 1.5) / 2
	local m1 : RIGHTSB - STROKE * CORRECTION_HX
	local x2 : RIGHTSB - HALFSTROKE
	local y2 DESCENDER
	include : dispiro
		widths.lhs
		flat m1 [mix [mix DESCENDER XH 0.6] DESCENDER 0.5] [heading DOWNWARD]
		curl m1 ([mix [mix DESCENDER XH 0.6] DESCENDER 0.5] - 1) [heading DOWNWARD]
		CurlyTail fine rinner m1 DESCENDER SB x2 y2

create-glyph 'zcurlytail' : glyph-construction
	assign-unicode 0x291
	include eMarks
	
	local fine : adviceBlackness 4
	local x1 : mix (SB + STROKE) RIGHTSB 0.55
	local x2 : mix (SB + STROKE) RIGHTSB 0.3
	local y2 : -XH * 0.2
	local rinner : fine * 0.3
	local m1 : RIGHTSB - fine / 2 - rinner + O
	include : HCurlyTail fine STROKE rinner SB m1 (RIGHTSB + fine / 2) x1 x2 y2
	
	include glyphs.z
	eject-contour 'strokeBottom'
	eject-contour 'serifRB'

# Rhotic hook
define [ErTail left w dohook] : glyph-construction
	local right WIDTH
	local mid : mix left right 0.5
	local rise : (WIDTH - left) * 0.3
	local sw : fallback w (markFine * 2)
	include : dispiro
		widths.center sw
		g2 (left) (XH * 0.5)
		g2 (mid - sw * CORRECTION_HX) (XH * 0.5 + rise) [widths 0 sw]
	include : dispiro
		widths.rhs sw
		flat mid (XH * 0.5 + rise) [heading DOWNWARD]
		curl mid (XH * 0.5 + [if dohook 0 (rise - 1)]) [heading DOWNWARD]
		if dohook {[hookend (XH * 0.5 - rise)]} {[arcvh]}
		g4 (right - [if dohook (markFine * 2) 0]) (XH * 0.5 - [if dohook (rise * 0.5) rise]) [if dohook nothing [heading RIGHTWARD]]
		#if dohook {[hookend (XH * 0.5 - rise)] [g4 right (XH * 0.5)]} {}

create-glyph 'rhotichook' : glyph-construction
	assign-unicode 0x2DE
	include : ErTail (-STROKE * CORRECTION_HX) STROKE true
create-glyph 'er' : glyph-construction
	assign-unicode 0x25A
	include eMarks
	local f : Thinner {'schwa'} 0.85
	include f.schwa
	include : ErTail (WIDTH * 0.85 - SB - markFine * CORRECTION_HX)

create-glyph 'revlatinepsiloner' : glyph-construction
	assign-unicode 0x25D
	include eMarks
	local f : Thinner {'revlatinepsilon'} 0.85
	include f.revlatinepsilon
	include : ErTail (WIDTH * 0.85 - SB - markFine * CORRECTION_HX)

# Belted
define [Belt] : glyph-construction
	local fine : adviceBlackness 4.5
	local r : XH * 0.05
	include : dispiro
		widths.rhs fine
		flat MIDDLE (CAPMIDDLE + r) [heading LEFTWARD]
		curl (MIDDLE - HALFSTROKE - r * 1.5) (CAPMIDDLE + r)
		archv
		g4.down.mid (MIDDLE - HALFSTROKE - r * 2.5) CAPMIDDLE [heading DOWNWARD]
		arcvh
		flat (MIDDLE - HALFSTROKE - r * 1.5) (CAPMIDDLE - r)
		curl (MIDDLE + HALFSTROKE + r * 1.5 + fine) (CAPMIDDLE - r)

create-glyph 'lbelt' : glyph-construction
	assign-unicode 0x26C
	include glyphs.'l.serifed' AS_BASE
	include : Belt

create-glyph 'lbeltrtail' : glyph-construction
	assign-unicode 0xA78E
	include glyphs.lrtail AS_BASE
	include : Belt

create-glyph 'ltildeover' : glyph-construction
	assign-unicode 0x26B
	include glyphs.'l.serifed' AS_BASE
	include : create-glyph : glyph-construction
		include glyphs.tildeAbove
		apply-transform : Upright
		apply-transform : Translate (MIDDLE - markMiddle) (CAP * 0.525 - [mix aboveMarkBot aboveMarkTop 0.5])
		apply-transform : Italify

# Double stack
if [not recursive]: create-glyph 'ww' : glyph-construction
	assign-unicode 0x2AC
	local p : Object.create para
	p.xheight = CAP / 2
	local forked : Fork {'w'} p
	include forked.w
	apply-transform : Upright
	apply-transform : Translate 0 (CAP / 2)
	apply-transform : Italify
	include forked.w

create-glyph 'bidentalpercussive' : glyph-construction
	assign-unicode 0x2AD
	local g : create-glyph : glyph-construction
		include : HBarTop SB RIGHTSB (CAP * 0.4)
		include : VBarLeft SB (CAP * 0.1) (CAP * 0.4)
		include : VBarRight RIGHTSB (CAP * 0.1) (CAP * 0.4)
	include g
	apply-transform : Upright
	apply-transform : Translate 0 (CAP / 2)
	apply-transform : Italify
	include g

# Turned glyphs
turned nothing 0x27A 'rlongleg' MIDDLE (XH / 2) [anchorDeriv bMarks {.anchors {.bottomright {.type BASE .x RIGHTSB - RBALANCE .y 0}}}]
turned nothing 0x2C79 'rrtail' MIDDLE (XH / 2)