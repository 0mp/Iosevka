###### LOWER CASE

### o b d p q g
create-glyph 'o' : glyph-construction
	set-width WIDTH
	assign-unicode 'o'
	include eMarks
	
	include : OShape XH 0 SB RIGHTSB nothing nothing nothing true

create-glyph 'p' : glyph-construction
	set-width WIDTH
	assign-unicode 'p'
	include pMarks

	include : OBarLeftShape
	include : VBarLeft SB DESCENDER XH
	if SLAB : begin
		include : LeftwardTopSerif SB XH SIDEJUT
		tag-contour 'serifLT'
		include : CenterBottomSerif (SB + HALFSTROKE * CORRECTION_HX) DESCENDER JUT
		tag-contour 'serifLB'

create-glyph 'q' : glyph-construction
	set-width WIDTH
	assign-unicode 'q'
	include pMarks
	
	include : OBarRightShape
	include : VBarRight RIGHTSB DESCENDER XH
	if SLAB : begin
		include : RightwardTopSerif RIGHTSB XH SIDEJUT
		tag-contour 'serifRT'
		include : CenterBottomSerif (RIGHTSB - HALFSTROKE * CORRECTION_HX) DESCENDER JUT

create-glyph 'g.doublestorey' : glyph-construction
	set-width WIDTH
	#assign-unicode 'g'
	include pMarks
	local obot : XH * GBARPOS - O - HALFSTROKE
	include : OShape XH obot SB (RIGHTSB - 0.3 * SB)
	
	local gleftx  ([mix 0 SB 0.85] + OX)
	local grightx ([mix WIDTH RIGHTSB 0.825] - OX)
	local groundy : Math.round : [mix DESCENDER (XH * GBARPOS) 0.64] + HALFSTROKE
	local gtipy [mix XH obot 0.975]
	include : dispiro
		g4.left.start [mix SB RIGHTSB 0.4] gtipy [widths 0 (STROKE * 0.7)]
		g4 ([mix SB RIGHTSB 0.0575] + STROKE * 0.85) [mix groundy gtipy 0.5] [widths.rhs (STROKE * 0.85)]
		flat [mix SB RIGHTSB 0.435] groundy [widths 0 STROKE]
		curl [mix RIGHTSB SB 0.435] groundy
		archv 4
		g4 grightx [mix (DESCENDER + O) groundy 0.53]
		arcvh
		g4 MIDDLE (DESCENDER + O)
		archv
		g4 gleftx [mix (DESCENDER + O) groundy 0.53]
		arcvh
		g4 [mix SB RIGHTSB 0.435] groundy [heading RIGHTWARD]
	local gm : mix SB (RIGHTSB - 0.3 * SB) 0.5
	start-from (RIGHTSB + 0.25 * SB - OX) XH
	line-to    (RIGHTSB + 0.25 * SB - OX) (XH - STROKE)
	line-to    gm  (XH - STROKE - O)
	line-to    gm  XH
	
	set-anchor 'overlay' BASE MIDDLE [mix (DESCENDER + O) groundy 0.5]
create-glyph 'g.singlestorey' : glyph-construction
	include pMarks
	include : OBarRightShape
	include : dispiro
		widths.rhs
		flat RIGHTSB XH [heading DOWNWARD]
		curl RIGHTSB (DESCENDER + SMALLSMOOTHA)
		hookend (DESCENDER + O)
		g4 SB (DESCENDER + SHOOK)
	if SLAB : begin
		include : RightwardTopSerif RIGHTSB XH SIDEJUT
		tag-contour 'serifRT'

select-variant 'g' 'g' 'doublestorey'

### c e t
create-glyph 'c' : glyph-construction
	set-width WIDTH
	assign-unicode 'c'
	include eMarks
	
	include : dispiro
		widths.lhs
		g4 RIGHTSB (XH - HOOK)
		hookstart XO
		flat.ai (SB + OX) (XH - SMALLSMOOTHA)
		curl.ai (SB + OX) (0 + SMALLSMOOTHB)
		hookend O
		g4 RIGHTSB HOOK

define [SmallEShape top stroke barpos curly] : glyph-construction
	local barbottom (top * [fallback barpos EBARPOS])
	local hookx (RIGHTSB - OXHOOK + TAILADJX * globalTransform.yx)
	local hookmiddle : [mix (SB + O) hookx 0.55] + CORRECTION_OMIDS
	
	include : dispiro
		widths.lhs stroke
		flat (RIGHTSB - OX) barbottom [heading UPWARD]
		curl (RIGHTSB - OX) (top - SMALLSMOOTHB)
		arcvh
		g4 (MIDDLE - CORRECTION_OMIDS) (top - O)
		archv
		flat.ai (SB + OX) (top - SMALLSMOOTHA)
		curl.ai (SB + OX) (0 + SMALLSMOOTHB)
		hookend O nothing stroke
		g4 (RIGHTSB - OX * 0.5) AHOOK
	include : HBarBottom (SB + (stroke / 2)) (RIGHTSB - (stroke / 2)) barbottom stroke

create-glyph 'e' : glyph-construction
	set-width WIDTH
	assign-unicode 'e'
	include eMarks
	
	include : SmallEShape XH STROKE

define [SmallTShape top bot] : glyph-construction
	local center : MIDDLE - TBALANCE - HALFSTROKE * CORRECTION_HX
	local hookx  (center + (WIDTH - SB * 2) * 0.8 - OXHOOK + TAILADJX * globalTransform.yx)
	local turn : [mix center hookx 0.5] + CORRECTION_OMIDS
	local smb  : (turn - center) * 1.2
	
	include : dispiro
		widths.lhs
		flat center top [heading DOWNWARD]
		curl center (bot + smb)
		hookend (bot + O)
		g4 hookx (bot + HOOK)
	set-anchor 'bottomright' BASE hookx (bot + HOOK)
	
	include : HBarTop (center + HALFSTROKE - LONGJUT + TBALANCE2) (center + HALFSTROKE + LONGJUT + TBALANCE2) XH

create-glyph 't' : glyph-construction
	set-width WIDTH
	assign-unicode 't'
	include bMarks
	include : SmallTShape CAP 0

### n u h m
create-glyph 'n' : glyph-construction
	set-width WIDTH
	assign-unicode 'n'
	include eMarks
	
	include : nShoulder (SB + STROKE * CORRECTION_HX) RIGHTSB SHOULDERFINE
	include : VBarLeft SB 0 XH
	
	if SLAB : begin
		include : LeftwardTopSerif SB XH SIDEJUT
		tag-contour 'serifLT'
		if (para.italicangle > 0)
		: then : include : tagged 'serifRB' : RightwardBottomSerif RIGHTSB 0 SIDEJUT
		: else : include : tagged 'serifRB' : CenterBottomSerif (RIGHTSB - HALFSTROKE * CORRECTION_HX) 0 JUT
		if (para.italicangle === 0) : begin
			include : tagged 'serifLB' : CenterBottomSerif (SB + HALFSTROKE * CORRECTION_HX) 0 JUT

create-glyph 'u' : glyph-construction
	set-width WIDTH
	assign-unicode 'u'
	include eMarks
	set-anchor 'trailing' BASE (RIGHTSB - markHalfStroke) 0
	include glyphs.n
	eject-contour 'serifRB'
	eject-contour 'serifLB'
	retag-contour 'serifLT' 'serifRB'
	include : FlipAround MIDDLE (XH / 2)
	
	if SLAB : begin
		include : LeftwardTopSerif (RIGHTSB - STROKE * CORRECTION_HX) XH SIDEJUT
		include : LeftwardTopSerif SB XH SIDEJUT

create-glyph 'h' : glyph-construction
	set-width WIDTH
	assign-unicode 'h'
	include bMarks
	
	include : nShoulder (SB + STROKE * CORRECTION_HX) RIGHTSB SHOULDERFINE
	include : VBarLeft SB 0 CAP
	if SLAB : begin
		include : LeftwardTopSerif SB CAP SIDEJUT
		if (para.italicangle > 0)
		: then : include : RightwardBottomSerif RIGHTSB 0 SIDEJUT
		: else : include : CenterBottomSerif (RIGHTSB - HALFSTROKE * CORRECTION_HX) 0 JUT
		tag-contour 'serifRB'
		if (para.italicangle === 0) : begin
			include : CenterBottomSerif (SB + HALFSTROKE * CORRECTION_HX) 0 JUT
			tag-contour 'serifLB'

define [SmallMShape top bot] : glyph-construction
	local m1 : mix (SB + O) (MIDDLE + MVERTSTROKE / 2 * CORRECTION_HX) 0.5
	local m2 : mix (RIGHTSB - O) (MIDDLE - MVERTSTROKE / 2 * CORRECTION_HX) 0.5
	include : mShoulderSpiro (SB + O + MVERTSTROKE * CORRECTION_HX) (MIDDLE + MVERTSTROKE / 2 * CORRECTION_HX) top bot MVERTSTROKE (MVERTSTROKE * 0.4)
	include : mShoulderSpiro (MIDDLE + MVERTSTROKE * 0.5 * CORRECTION_HX) (RIGHTSB - O) top bot MVERTSTROKE (MVERTSTROKE * 0.5)
	include : VBarLeft (SB + O) bot top MVERTSTROKE
	if SLAB : begin
		include : LeftwardTopSerif SB top SIDEJUT
		tag-contour 'serifLT'
		if (para.italicangle === 0) : include : LeftwardBottomSerif SB bot SIDEJUT
		include : RightwardBottomSerif RIGHTSB bot SIDEJUT
		tag-contour 'serifRB'

create-glyph 'm' : glyph-construction
	set-width WIDTH
	assign-unicode 'm'
	include eMarks
	include : SmallMShape XH 0

### i j l
create-glyph 'dotlessi.straight' : glyph-construction
	include eMarks
	include : VBar (MIDDLE) 0 XH

create-glyph 'dotlessi.hooky' : glyph-construction
	include glyphs.'dotlessi.straight' AS_BASE
	include : LeftwardTopSerif MIDDLE XH LONGJUT

create-glyph 'dotlessi.zshaped' : glyph-construction
	include glyphs.'dotlessi.hooky' AS_BASE
	include : RightwardBottomSerif MIDDLE 0 LONGJUT

create-glyph 'dotlessi.serifed' : glyph-construction
	include eMarks
	
	local balance IBALANCE
	include : VBar (MIDDLE + balance) 0 XH
	include : LeftwardTopSerif (MIDDLE + balance) XH (LONGJUT - balance)
	include : RightwardBottomSerif MIDDLE 0 LONGJUT
	include : LeftwardBottomSerif MIDDLE 0 LONGJUT

create-glyph 'dotlessi.italic' : glyph-construction
	local left : [mix SB RIGHTSB 0.48] - HALFSTROKE * CORRECTION_HX
	local right : mix SB RIGHTSB 1.05
	local middle : mix left right 0.55
	include : dispiro
		widths.lhs
		flat left XH [heading DOWNWARD]
		curl left (SMALLSMOOTHB * 0.7)
		hookend O
		g4   right (SHOOK * 0.8)
	include : dispiro
		flat (left - LONGJUT + HALFSTROKE * CORRECTION_HX) XH [widths 0 STROKE]
		curl left XH
	include eMarks
	set-anchor 'above' BASE (left + HALFSTROKE * CORRECTION_HX) XH
	set-anchor 'below' BASE middle 0

select-variant 'dotlessi' 0x131 [if para.italicangle 'italic' 'serifed']

create-glyph 'i' : glyph-construction
	set-width WIDTH
	assign-unicode 'i'
	include glyphs.dotlessi AS_BASE
	include glyphs.dotAbove


create-glyph 'dotlessj.straight' : glyph-construction
	include pMarks
	set-anchor 'above' BASE (MIDDLE + JBALANCE - STROKE * 0.166 * CORRECTION_HX) XH
	set-anchor 'overlay' BASE (MIDDLE + JBALANCE - STROKE * 0.166 * CORRECTION_HX) (XH / 2)
	local center : MIDDLE + JBALANCE + HALFSTROKE * CORRECTION_HX
	local hookx  : center - (WIDTH * 0.5) - STROKE * CORRECTION_HX + OXHOOK
	local turn : [mix center hookx 0.5] + CORRECTION_OMIDS
	local smb  : (center - turn) * 1.2
	include : dispiro
		widths.rhs
		flat center XH [heading DOWNWARD]
		curl center (DESCENDER + smb)
		hookend (DESCENDER + O)
		g4 hookx (DESCENDER + JHOOK)

create-glyph 'dotlessj.serifed' : glyph-construction
	include pMarks
	include glyphs.'dotlessj.straight' AS_BASE
	include : LeftwardTopSerif (MIDDLE + JBALANCE) XH LONGJUT


select-variant 'dotlessj' 0x237 'serifed'
create-glyph 'j' : glyph-construction
	set-width WIDTH
	assign-unicode 'j'
	
	include glyphs.dotlessj AS_BASE
	include glyphs.dotAbove


create-glyph 'l.straight'  : glyph-construction
	include bMarks
	include : VBar MIDDLE 0 CAP

create-glyph 'l.hooky' : glyph-construction
	include bMarks
	include : VBar MIDDLE 0 (CAP - STROKE)
	include : LeftwardTopSerif MIDDLE CAP LONGJUT

create-glyph 'l.zshaped' : glyph-construction
	include bMarks
	include glyphs.'l.hooky'
	include : RightwardBottomSerif MIDDLE 0 LONGJUT

create-glyph 'l.serifed' : glyph-construction
	include bMarks
	local balance LBALANCE
	include : VBar (MIDDLE + balance) 0 CAP
	include : LeftwardTopSerif (MIDDLE + balance) CAP (LONGJUT - balance)
	include : CenterBottomSerif MIDDLE 0 LONGJUT
	set this.barx (MIDDLE + balance)

create-glyph 'l.italic' : glyph-construction
	local left : mix SB RIGHTSB 0.3
	local right : mix SB RIGHTSB 1.1
	local middle : mix left right 0.54
	include : dispiro
		widths.lhs
		flat left CAP [heading DOWNWARD]
		curl left (SMALLSMOOTHB * 0.75)
		hookend O
		g4   right SHOOK
	include : dispiro
		flat SB CAP [widths 0 STROKE]
		curl left CAP
	include bMarks
	set-anchor 'above' BASE (left + HALFSTROKE) CAP
	set-anchor 'below' BASE middle 0
	set this.barx (left + HALFSTROKE)

select-variant 'l' 'l' [if para.italicangle 'italic' 'serifed']

### x v w y z k

create-glyph 'z' : glyph-construction
	set-width WIDTH
	assign-unicode 'z'
	include eMarks
	
	local cor : 1.2 * CORRECTION_HX
	
	include : HBarTop SB RIGHTSB XH

	start-from SB STROKE
	line-to (SB + STROKE * cor) STROKE
	line-to RIGHTSB (XH - STROKE)
	line-to (RIGHTSB - STROKE * cor) (XH - STROKE)
	reverse-last

	include : HBarBottom SB RIGHTSB 0
	tag-contour 'strokeBottom'
	if SLAB : begin
		include : DownwardLeftSerif SB XH VJUT
		include : UpwardRightSerif RIGHTSB 0 VJUT
		tag-contour 'serifRB'

### s
create-glyph 's' : glyph-construction
	set-width WIDTH
	assign-unicode 's'
	include eMarks
	define smooth : adviceSSmooth XH (-1)
	include : dispiro
		widths.lhs
		g4   RIGHTSB (XH - SHOOK)
		hookstart XO
		g4.down.mid   SB (XH - smooth)
		alsothru 0.5 0.5 [widths (ESS / 2) (ESS / 2)]
		g4.down.mid   RIGHTSB (smooth) [widths 0 STROKE]
		hookend O
		g4   SB SHOOK


### r
create-glyph 'r' : glyph-construction
	set-width WIDTH
	assign-unicode 'r'
	include eMarks
	
	local rhookx (RIGHTSB + RBALANCE2 - OXE)
	local rbar : SB + RBALANCE + STROKE * CORRECTION_HX
	local mixp : 0.52 + 2 * globalTransform.yx * STROKE / WIDTH - [linreg 72 0 108 0.01 STROKE]
	local rmiddle : [mix (rbar - SHOULDERFINE) rhookx mixp] - CORRECTION_OMIDS
	local skew : (rmiddle - ([mix rbar (rhookx - STROKE * CORRECTION_HX * 0.8) mixp] - CORRECTION_OMIDS)) / STROKE
	include : dispiro
		widths.lhs
		g4 rhookx (XH - RHOOK)
		alsothru 0.8 0.9725
		g4.left.mid rmiddle XO [heading {.y (-1) .x (-skew)}]
		alsothru 0.965 0.6
		straight.down.end (rbar - SHOULDERFINE * CORRECTION_HX) (XH * 0.5) [widths.heading SHOULDERFINE 0 DOWNWARD]
	include : VBarLeft (SB + RBALANCE) 0 XH
	set-anchor 'overlay' BASE rbar (XH * 0.5)
	
	if SLAB : begin
		include : tagged 'serifLB' : CenterBottomSerif (SB + RBALANCE + HALFSTROKE * CORRECTION_HX + RBALANCE * 0.35) 0 (JUT + RBALANCE * 0.65)
		include : tagged 'serifLT' : LeftwardTopSerif (SB + RBALANCE) XH (SIDEJUT + RBALANCE * 0.3)


### f
define fovershoot : fallback para.fovershoot (O * 6)
create-glyph 'longs.upright' : glyph-construction
	set-width WIDTH
	include bMarks
	include : dispiro
		widths.center
		flat (MIDDLE - FBALANCE) 0 [heading UPWARD]
		curl (MIDDLE - FBALANCE) (CAP - FHOOK)
		straight.right.end (MIDDLE - FBALANCE + HOOKX) (CAP - HALFSTROKE - fovershoot) [heading RIGHTWARD]
	if SLAB : begin
		include : CenterBottomSerif (MIDDLE - FBALANCE) 0 JUT
		tag-contour 'serifMB'

define [LongSShape top bottom hookx hooky fine] : glyph-construction
	local w [fallback fine STROKE]
	include : dispiro
		widths.center w
		straight.right.start (MIDDLE - hookx) (bottom + w / 2 + fovershoot) [heading RIGHTWARD]
		flat MIDDLE (bottom + hooky)
		curl MIDDLE (top - hooky)
		straight.right.end (MIDDLE + hookx) (top - w / 2 - fovershoot) [heading RIGHTWARD]

create-glyph 'longs.italic' : glyph-construction
	set-width WIDTH
	include ifMarks
	include : LongSShape CAP (-HOOK) HOOKX HOOK

create-glyph 'longs' : glyph-construction
	set-width WIDTH
	assign-unicode 0x17f
	
	if (para.italicangle > 0)
		then : include glyphs.'longs.italic' AS_BASE
		else : include glyphs.'longs.upright' AS_BASE

create-glyph 'f.slab' : glyph-construction
	include bMarks
	local barleft [mix SB RIGHTSB 0.24]
	include : dispiro
		widths.lhs
		g4 RIGHTSB (CAP - HOOK * 0.7)
		hookstart (CAP - O) true
		flat barleft [CAP - SMOOTHA * 0.85]
		curl barleft 0
	include : HBarTop [mix SB RIGHTSB 0] [mix SB RIGHTSB 0.9] (XH * 0.95)
	include : HBarBottom [mix SB RIGHTSB 0.02] [mix SB RIGHTSB 0.8] 0

create-glyph 'f' : glyph-construction
	set-width WIDTH
	assign-unicode 'f'
	if (SLAB && para.italicangle === 0)
	: then : include glyphs.'f.slab' AS_BASE
	: else : begin
		include glyphs.longs AS_BASE
		include : HBarTop (MIDDLE - LONGJUT) (MIDDLE + LONGJUT) XH
