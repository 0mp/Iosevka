###### LOWER CASE

### o b d p q g
create-glyph 'o' : glyph-construction
	set-width WIDTH
	assign-unicode 'o'
	include eMarks
	
	include : smallo XH 0 SB RIGHTSB nothing nothing nothing true

define [oLeft _top] : glyph-construction
	local top : fallback _top XH
	local fine SHOULDERFINE
	local st : shoulderMidSlope fine nothing 1
	local sb : shoulderMidSlope fine nothing (-1)
	local mt : [mix SB RIGHTSB 0.5] + (st - CORRECTION_OMIDX) * STROKE
	local mb : [mix SB RIGHTSB 0.5] + (sb + CORRECTION_OMIDX) * STROKE
	include : spiro
		widths.lhs
		g4   (mt) (top - O) [heading {.y (-1) .x (-st)}]
		archv
		flat (SB + (STROKE - fine) * CORRECTION_HX) (top - SMALLSMOOTHA) [widths fine 0]
		curl (SB + (STROKE - fine) * CORRECTION_HX) (0 + SMALLSMOOTHB) [widths fine 0]
		arcvh
		g4   (mb) O [widths.heading STROKE 0 {.y (1) .x (-sb)}]
		archv
		flat.ai (RIGHTSB - O) (0 + SMALLSMOOTHA)
		curl.ai (RIGHTSB - O) (top - SMALLSMOOTHB)
		arcvh
		close

define [oRight top] : glyph-construction
	include : create-glyph [oLeft top]
	include : FlipAround MIDDLE ([fallback top XH] / 2)

create-glyph 'p' : glyph-construction
	set-width WIDTH
	assign-unicode 'p'
	include pMarks

	include : oLeft
	include : VBarLeft SB DESCENDER XH

create-glyph 'b' : glyph-construction
	set-width WIDTH
	assign-unicode 'b'
	include bMarks
	
	include : oLeft
	include : VBarLeft SB 0 CAP

create-glyph 'q' : glyph-construction
	set-width WIDTH
	assign-unicode 'q'
	include pMarks
	
	include : oRight
	include : VBarRight RIGHTSB DESCENDER XH

create-glyph 'd' : glyph-construction
	set-width WIDTH
	assign-unicode 'd'
	include bMarks
	
	include : oRight
	include : VBarRight RIGHTSB 0 CAP

create-glyph 'g.doublestorey' : glyph-construction
	set-width WIDTH
	#assign-unicode 'g'
	include pMarks
	local obot : XH * GBARPOS - O - HALFSTROKE
	include : smallo XH obot SB (RIGHTSB - 0.3 * SB)
	
	local gleftx  (SB * 0.8 + O)
	local grightx (RIGHTSB + SB * 0.1 - O)
	local groundy : Math.round : [mix DESCENDER (XH * GBARPOS) 0.625] + HALFSTROKE
	include : spiro
		g4 [mix SB RIGHTSB 0.3] [mix XH obot 0.95] [widths 0 (STROKE * 0.7)]
		alsothru (-1.2) 0.5 [widths HALFSTROKE HALFSTROKE]
		flat [mix SB RIGHTSB 0.435] groundy [widths 0 STROKE]
		curl [mix RIGHTSB SB 0.435] groundy
		archv 4
		g4 grightx [mix (DESCENDER + O) groundy 0.53]
		arcvh
		g4 [mix gleftx grightx 0.5] (DESCENDER + O)
		archv
		g4 gleftx [mix (DESCENDER + O) groundy 0.53]
		arcvh
		g4 [mix SB RIGHTSB 0.435] groundy [heading RIGHTWARD]
	start-from (RIGHTSB + 0.25 * SB) XH
	line-to    (RIGHTSB + 0.25 * SB) (XH - STROKE)
	line-to    MIDDLE  (XH - STROKE - O)
	line-to    MIDDLE  XH
	
	set-anchor 'overlay' BASE MIDDLE [mix (DESCENDER + O) groundy 0.5]
create-glyph 'g.singlestorey' : glyph-construction
	include pMarks
	include : oRight
	include : spiro
		widths.rhs
		flat RIGHTSB XH
		curl RIGHTSB (DESCENDER + SMALLSMOOTHA)
		hookend (DESCENDER + O)
		g4 SB (DESCENDER + SHOOK)

select-variant 'g' 'g' 'doublestorey'

### c e t
create-glyph 'c' : glyph-construction
	set-width WIDTH
	assign-unicode 'c'
	include eMarks
	
	include : spiro
		widths.lhs
		g4 RIGHTSB (XH - HOOK)
		hookstart XO
		flat.ai (SB + O) (XH - SMALLSMOOTHA)
		curl.ai (SB + O) (0 + SMALLSMOOTHB)
		hookend O
		g4 RIGHTSB HOOK

define [SmallEShape top stroke barpos curly] : glyph-construction
	local barbottom (top * [fallback barpos EBARPOS])
	local hookx (RIGHTSB - OXHOOK + TAILADJX * globalTransform.yx)
	local hookmiddle : [mix (SB + O) hookx 0.55] + CORRECTION_OMIDS
	
	include : spiro
		widths.lhs stroke
		flat (RIGHTSB - O) barbottom [heading UPWARD]
		curl (RIGHTSB - O) (top - SMALLSMOOTHB)
		arcvh
		g4 (MIDDLE - CORRECTION_OMIDS) (top - O)
		archv
		flat.ai (SB + O) (top - SMALLSMOOTHA)
		curl.ai (SB + O) (0 + SMALLSMOOTHB)
		hookend O
		g4 (RIGHTSB - O) HOOK
	include : create-stroke
		:.start-from (SB + (stroke / 2)) barbottom
		:.set-width  stroke 0
		:.heads-to   RIGHTWARD
		:.line-to    (RIGHTSB - (stroke / 2)) barbottom
		:.heads-to   RIGHTWARD

create-glyph 'e' : glyph-construction
	set-width WIDTH
	assign-unicode 'e'
	include eMarks
	
	include : SmallEShape XH STROKE

define [SmallTShape top bot] : glyph-construction
	local center : MIDDLE - TBALANCE - HALFSTROKE * CORRECTION_HX
	local hookx  (center + (WIDTH - SB * 2) * 0.8 - OXHOOK + TAILADJX * globalTransform.yx)
	local turn : [mix center hookx 0.5] + CORRECTION_OMIDS
	local smb  : (turn - center) * 1.2
	
	include : spiro
		widths.lhs
		flat center top [heading DOWNWARD]
		curl center (bot + smb)
		arcvh 6
		g4 turn (bot + O)
		quadcontrols (KAPPA_HOOK + 0.75 * globalTransform.yx + 0.1) 0
		g4 hookx (bot + HOOK)
	set-anchor 'bottomright' BASE hookx (bot + HOOK)
	
	include : HBarTop (center + HALFSTROKE - LONGJUT + TBALANCE2) (center + HALFSTROKE + LONGJUT + TBALANCE2) XH

create-glyph 't' : glyph-construction
	set-width WIDTH
	assign-unicode 't'
	include bMarks
	include : SmallTShape CAP 0

### a u
create-glyph 'a.upright' : glyph-construction
	set-width WIDTH
	dont-export
	include eMarks
	set-anchor 'trailing' BASE (RIGHTSB - markHalfStroke) 0
	local bartop (XH * BARPOS * 1.02 + HALFSTROKE)
	local lowslope : shoulderMidSlope SHOULDERFINE nothing (-1)
	local lowmiddle : mix SB (RIGHTSB - HALFSTROKE * CORRECTION_HX) [linreg 72 0.51 120 0.56 STROKE]
	local barsmooth : mix SB RIGHTSB 0.55
	include : spiro
		widths.lhs
		flat RIGHTSB 0 [heading UPWARD]
		curl RIGHTSB (XH - SMOOTHA)
		hookend XO
		g4 SB (XH - AHOOK)
	include : spiro
		widths.lhs
		flat (RIGHTSB + O) bartop [heading LEFTWARD]
		curl barsmooth bartop
		archv
		g4   (SB + O) (bartop * 0.475)
		arcvh
		g4   (lowmiddle + (-lowslope) * STROKE) O [heading {.y 1 .x lowslope}]
		archv
		flat   (RIGHTSB - STROKE * CORRECTION_HX) (SMALLSMOOTHB * 0.9) [widths 0 SHOULDERFINE]
		curl   (RIGHTSB - STROKE * CORRECTION_HX) (SMALLSMOOTHB * 0.9 + 1)

create-glyph 'a.italic' : glyph-construction
	set-width WIDTH
	dont-export
	include eMarks
	set-anchor 'trailing' BASE (RIGHTSB - markHalfStroke) 0
	include : oRight
	include : create-stroke
		:.start-from RIGHTSB 0
		:.heads-to UPWARD
		:.set-width STROKE 0
		:.line-to RIGHTSB XH
		:.heads-to UPWARD


create-glyph 'a' : glyph-construction
	set-width WIDTH
	assign-unicode 'a'
	
	if (para.italicangle > 0)
		then : include glyphs.'a.italic' AS_BASE
		else : include glyphs.'a.upright' AS_BASE


### n u h m
create-glyph 'n' : glyph-construction
	set-width WIDTH
	assign-unicode 'n'
	include eMarks
	
	include : nShoulder (SB + STROKE * CORRECTION_HX) RIGHTSB SHOULDERFINE
	include : VBarLeft SB 0 XH

create-glyph 'u' : glyph-construction
	set-width WIDTH
	assign-unicode 'u'
	include eMarks
	set-anchor 'trailing' BASE (RIGHTSB - markHalfStroke) 0
	include glyphs.n
	include : FlipAround MIDDLE (XH / 2)

create-glyph 'h' : glyph-construction
	set-width WIDTH
	assign-unicode 'h'
	include bMarks
	
	include : nShoulder (SB + STROKE * CORRECTION_HX) RIGHTSB SHOULDERFINE
	include : create-stroke
		:.start-from SB 0
		:.heads-to UPWARD
		:.set-width 0 STROKE
		:.line-to SB CAP
		:.heads-to UPWARD

define [SmallMShape top bot] : glyph-construction
	local m1 : mix (SB + O) (MIDDLE + MVERTSTROKE / 2 * CORRECTION_HX) 0.5
	local m2 : mix (RIGHTSB - O) (MIDDLE - MVERTSTROKE / 2 * CORRECTION_HX) 0.5
	include : mShoulderSpiro (SB + O + MVERTSTROKE * CORRECTION_HX) (MIDDLE + MVERTSTROKE / 2 * CORRECTION_HX) top bot MVERTSTROKE (MVERTSTROKE * 0.4)
	include : mShoulderSpiro (MIDDLE + MVERTSTROKE * 0.5 * CORRECTION_HX) (RIGHTSB - O) top bot MVERTSTROKE (MVERTSTROKE * 0.5)
	include : VBarLeft (SB + O) bot top MVERTSTROKE

create-glyph 'm' : glyph-construction
	set-width WIDTH
	assign-unicode 'm'
	include eMarks
	include : SmallMShape XH 0

### i j l
create-glyph 'dotlessi.straight' : glyph-construction
	dont-export
	include eMarks
	include : create-stroke
		:.start-from MIDDLE 0
		:.heads-to UPWARD
		:.set-width HALFSTROKE HALFSTROKE
		:.line-to MIDDLE XH
		:.heads-to UPWARD

create-glyph 'dotlessi.hooky' : glyph-construction
	dont-export
	include glyphs.'dotlessi.straight' AS_BASE
	include : leftwardTopSerif MIDDLE XH LONGJUT

create-glyph 'dotlessi.zshaped' : glyph-construction
	dont-export
	include glyphs.'dotlessi.hooky' AS_BASE
	include : rightwardBottomSerif MIDDLE 0 LONGJUT

create-glyph 'dotlessi.serifed' : glyph-construction
	dont-export
	include eMarks
	
	local balance IBALANCE
	include : create-stroke
		:.start-from (MIDDLE + balance) 0
		:.heads-to UPWARD
		:.set-width HALFSTROKE HALFSTROKE
		:.line-to (MIDDLE + balance) XH
		:.heads-to UPWARD
	include : leftwardTopSerif (MIDDLE + balance) XH (LONGJUT - balance)
	include : rightwardBottomSerif MIDDLE 0 LONGJUT
	include : leftwardBottomSerif MIDDLE 0 LONGJUT

create-glyph 'dotlessi.italic' : glyph-construction
	local left : [mix SB RIGHTSB 0.48] - HALFSTROKE * CORRECTION_HX
	local right : mix SB RIGHTSB 1.05
	local middle : mix left right 0.55
	include : spiro
		widths.lhs
		flat left XH [heading DOWNWARD]
		curl left (SMALLSMOOTHB * 0.7)
		hookend O
		g4   right (SHOOK * 0.8)
	include : create-stroke
		:.start-from (left - LONGJUT + HALFSTROKE * CORRECTION_HX) XH
		:.set-width  0 STROKE
		:.line-to    left XH
	include eMarks
	set-anchor 'above' BASE (left + HALFSTROKE * CORRECTION_HX) XH
	set-anchor 'below' BASE middle 0

select-variant 'dotlessi' 0x131 [if para.italicangle 'italic' 'serifed']

create-glyph 'i' : glyph-construction
	set-width WIDTH
	assign-unicode 'i'
	include glyphs.dotlessi AS_BASE
	include glyphs.dotAbove


create-glyph 'dotlessj.straight' : glyph-construction
	dont-export
	include pMarks
	set-anchor 'above' BASE (MIDDLE + JBALANCE - STROKE * 0.166 * CORRECTION_HX) XH
	set-anchor 'overlay' BASE (MIDDLE + JBALANCE - STROKE * 0.166 * CORRECTION_HX) (XH / 2)
	local center : MIDDLE + JBALANCE + HALFSTROKE * CORRECTION_HX
	local hookx  : center - (WIDTH * 0.5) - STROKE * CORRECTION_HX + OXHOOK
	local turn : [mix center hookx 0.5] + CORRECTION_OMIDS
	local smb  : (center - turn) * 1.2
	include : spiro
		widths.rhs
		flat center XH [heading DOWNWARD]
		curl center (DESCENDER + smb)
		hookend (DESCENDER + O)
		g4 hookx (DESCENDER + JHOOK)

create-glyph 'dotlessj.serifed' : glyph-construction
	dont-export
	include pMarks
	include glyphs.'dotlessj.straight' AS_BASE
	include : leftwardTopSerif (MIDDLE + JBALANCE) XH LONGJUT


select-variant 'dotlessj' 0x237 'serifed'
create-glyph 'j' : glyph-construction
	set-width WIDTH
	assign-unicode 'j'
	
	include glyphs.dotlessj AS_BASE
	include glyphs.dotAbove


create-glyph 'l.straight'  : glyph-construction
	include bMarks
	dont-export
	include : VBar MIDDLE 0 CAP

create-glyph 'l.hooky' : glyph-construction
	include bMarks
	dont-export
	include : VBar MIDDLE 0 (CAP - STROKE)
	include : leftwardTopSerif MIDDLE CAP LONGJUT

create-glyph 'l.zshaped' : glyph-construction
	include bMarks
	dont-export
	include glyphs.'l.hooky'
	include : rightwardBottomSerif MIDDLE 0 LONGJUT

create-glyph 'l.serifed' : glyph-construction
	include bMarks
	dont-export
	local balance LBALANCE
	include : create-stroke
		:.start-from (MIDDLE + balance) 0
		:.heads-to UPWARD
		:.set-width HALFSTROKE HALFSTROKE
		:.line-to (MIDDLE + balance) CAP
		:.heads-to UPWARD
	include : leftwardTopSerif (MIDDLE + balance) CAP (LONGJUT - balance)
	include : centerBottomSerif MIDDLE 0 LONGJUT
	set this.barx (MIDDLE + balance)

create-glyph 'l.italic' : glyph-construction
	local left : mix SB RIGHTSB 0.3
	local right : mix SB RIGHTSB 1.1
	local middle : mix left right 0.54
	include : spiro
		widths.lhs
		flat left CAP [heading DOWNWARD]
		curl left (SMALLSMOOTHB * 0.75)
		hookend O
		g4   right SHOOK
	include : create-stroke
		:.start-from SB CAP
		:.set-width  0 STROKE
		:.line-to    left CAP
	include bMarks
	set-anchor 'above' BASE (left + HALFSTROKE) CAP
	set-anchor 'below' BASE middle 0
	set this.barx (left + HALFSTROKE)

select-variant 'l' 'l' [if para.italicangle 'italic' 'serifed']

### x v w y z k
create-glyph 'x' : glyph-construction
	set-width WIDTH
	assign-unicode 'x'
	include eMarks
	
	local TURN (XH * 0.1)
	
	include : xStrand SB 0 RIGHTSB XH 0.05 0.4 0.14
	include : xStrand SB XH RIGHTSB 0 0.05 0.4 0.14

create-glyph 'v' : glyph-construction
	set-width WIDTH
	assign-unicode 'v'
	include eMarks
	
	local TURN (XH * 0.9)
	
	include : create-stroke
		:.start-from SB XH
		:.heads-to   DOWNWARD
		:.set-width  STROKE 0
		:.line-to    SB TURN
		:.heads-to   DOWNWARD
		:.curve-to   SB ((1 - 0.27) * TURN) (MIDDLE - STROKE / 2) 0
		:.set-width  (STROKE * 0.9) 0
	
	include : create-stroke
		:.start-from RIGHTSB XH
		:.heads-to   DOWNWARD
		:.set-width  0 STROKE
		:.line-to    RIGHTSB TURN
		:.heads-to   DOWNWARD
		:.curve-to   RIGHTSB ((1 - 0.27) * TURN) (MIDDLE + STROKE / 2) 0
		:.set-width  0 (STROKE * 0.9)
	
	#bottom cap
	start-from (MIDDLE + STROKE / 2) 0
	line-to (MIDDLE - STROKE / 2) 0
	line-to MIDDLE (STROKE * 0.8)

create-glyph 'w' : glyph-construction
	set-width WIDTH
	assign-unicode 'w'
	include eMarks
	
	local TURN (XH * 0.75)
	local turn2 (XH * 0.59)
	local wheight (XH * 0.6)
	local bottomStroke : adviceBlackness 5.2
	local m1 : WIDTH * 0.325
	local m2 : WIDTH * 0.675
	
	include : create-stroke
		:.start-from SB XH
		:.heads-to DOWNWARD
		:.set-width STROKE 0
		:.line-to SB TURN
		:.heads-to DOWNWARD
		:.curve-to SB ((1 - 0.27) * TURN) (m1 - bottomStroke / 2) 0
		:.set-width bottomStroke 0
	
	include : create-stroke
		:.start-from RIGHTSB XH
		:.heads-to DOWNWARD
		:.set-width 0 STROKE
		:.line-to RIGHTSB TURN
		:.heads-to DOWNWARD
		:.curve-to RIGHTSB ((1 - 0.27) * TURN) (m2 + bottomStroke / 2) 0
		:.set-width 0 bottomStroke
		
	include : create-stroke
		:.start-from (MIDDLE + bottomStroke / 2 * CORRECTION_HX) wheight
		:.heads-to DOWNWARD
		:.set-width 0 bottomStroke
		:.line-to (MIDDLE + bottomStroke / 2 * CORRECTION_HX) turn2
		:.heads-to DOWNWARD
		:.curve-to (MIDDLE + bottomStroke / 2 * CORRECTION_HX) ((1 - 0.1) * turn2) (m1 + bottomStroke / 2) 0
		:.set-width 0 bottomStroke
	
	include : create-stroke
		:.start-from (MIDDLE - bottomStroke / 2 * CORRECTION_HX) wheight
		:.heads-to DOWNWARD
		:.set-width bottomStroke 0
		:.line-to (MIDDLE - bottomStroke / 2 * CORRECTION_HX) turn2
		:.heads-to DOWNWARD
		:.curve-to (MIDDLE - bottomStroke / 2 * CORRECTION_HX) ((1 - 0.1) * turn2) (m2 - bottomStroke / 2) 0
		:.set-width bottomStroke 0

	#bottom cap
	start-from (m1 + bottomStroke / 2) 0
	line-to (m1 - bottomStroke / 2) 0
	line-to m1 bottomStroke
	
	start-from (m2 + bottomStroke / 2) 0
	line-to (m2 - bottomStroke / 2) 0
	line-to m2 bottomStroke

create-glyph 'y' : glyph-construction
	set-width WIDTH
	assign-unicode 'y'
	include pMarks
	
	local xbottom : mix SB RIGHTSB 0.28
	local turnp : XH / (XH - DESCENDER)
	local xb : mix SB RIGHTSB 0.51
	local yb : mix 0 XH (0.05 * turnp)
	
	include : xStrand xbottom DESCENDER RIGHTSB XH 0.1 0.6 0.14
	include : halfXStrand SB XH xb yb (0.1 * turnp) 0.4 (0.14 * turnp)

create-glyph 'z' : glyph-construction
	set-width WIDTH
	assign-unicode 'z'
	include eMarks
	
	local cor 1.2
	
	include : HBarTop SB RIGHTSB XH

	start-from SB STROKE
	line-to (SB + STROKE * cor) STROKE
	line-to RIGHTSB (XH - STROKE)
	line-to (RIGHTSB - STROKE * cor) (XH - STROKE)
	reverse-last

	include : HBarBottom SB RIGHTSB 0


define [SmallKShape] : glyph-construction
	local turn (XH * 0.99)
	local rturn (XH * 0.1)
	
	local attach (XH * 0.375)
	local attach2 MIDDLE
	
	local fine : adviceBlackness 3.5
	include : spiro
		g4 (RIGHTSB + O) XH [widths.heading 0 (STROKE * 1.05 * (WIDTH * 2 / UPM)) DOWNWARD]
		#curl RIGHTSB turn [heading DOWNWARD]
		bezcontrols 0 0.2 0.5 0.65 8
		g4 (SB + STROKE) attach [widths 0 fine]
	include : create-stroke
		:.start-from (RIGHTSB - HALFSTROKE) 0
		:.heads-to UPWARD
		:.set-width HALFSTROKE HALFSTROKE
		:.curve-to (RIGHTSB - HALFSTROKE) (rturn + 0.05 * (XH - rturn)) attach2 (XH * 0.61)
		:.set-width (fine / 2) (fine / 2)


create-glyph 'k' : glyph-construction
	set-width WIDTH
	assign-unicode 'k'
	include bMarks
	include : create-stroke
		:.start-from SB 0
		:.set-width  0 STROKE
		:.heads-to   UPWARD
		:.line-to    SB CAP
		:.heads-to   UPWARD
	include : SmallKShape


### s
create-glyph 's' : glyph-construction
	set-width WIDTH
	assign-unicode 's'
	include eMarks
	define smooth : adviceSSmooth XH (-1)
	include : spiro
		widths.lhs
		g4   RIGHTSB (XH - SHOOK)
		hookstart XO SBALANCE
		g4   SB (XH - smooth)
		alsothru 0.5 0.5 [widths (ESS / 2) (ESS / 2)]
		g4   RIGHTSB (smooth) [widths 0 STROKE]
		hookend O SBALANCE
		g4   SB SHOOK


### r
create-glyph 'r' : glyph-construction
	set-width WIDTH
	assign-unicode 'r'
	include eMarks
	
	local rhookx (RIGHTSB + RBALANCE2)
	local fine (STROKE * 0.25)
	local rbar : SB + RBALANCE + STROKE * CORRECTION_HX
	local rmiddle : [mix (rbar - fine) rhookx (0.5 + globalTransform.yx * STROKE / WIDTH)] - CORRECTION_OMIDS
	include : spiro
		widths.lhs
		g4 rhookx (XH - RHOOK)
		g4 rmiddle XO [heading {.y (-1) .x (-0.2 - globalTransform.yx)}]
		archv 8 'notiny'
		flat (rbar - fine * CORRECTION_HX) (XH - SMALLSMOOTHA) [widths fine 0]
		curl (rbar - fine * CORRECTION_HX) (XH - SMALLSMOOTHA - 1)
	include : VBarLeft (SB + RBALANCE) 0 XH
	set-anchor 'overlay' BASE rbar (XH * 0.5)


### f
define [fBar left right y] : glyph-construction
	include : create-stroke
		:.start-from [fallback left (MIDDLE - LONGJUT)] [fallback y XH]
		:.heads-to   RIGHTWARD
		:.set-width  0 STROKE
		:.line-to    [fallback right (MIDDLE + LONGJUT)] [fallback y XH]
		:.heads-to   RIGHTWARD


define fovershoot : O * 5
create-glyph 'longs.upright' : glyph-construction
	set-width WIDTH
	dont-export
	include bMarks
	include : spiro
		widths.center
		flat (MIDDLE - FBALANCE) 0 [heading UPWARD]
		curl (MIDDLE - FBALANCE) (CAP - FHOOK)
		flat (MIDDLE - FBALANCE + HOOKX - 0.01) (CAP - HALFSTROKE - fovershoot) [heading RIGHTWARD]
		curl (MIDDLE - FBALANCE + HOOKX) (CAP - HALFSTROKE - fovershoot) [heading RIGHTWARD]

define [eshHook attach] : glyph-construction
	include : create-stroke
		:.start-from (attach.x - SHOOK * 2) (attach.y + HALFSTROKE + fovershoot - SHOOK)
		:.heads-to RIGHTWARD
		:.set-width HALFSTROKE HALFSTROKE
		:.arc-hv-to attach.x attach.y
		:.line-to   attach.x (attach.y + STROKE)

define [LongSShape top bottom hookx hooky fine] : glyph-construction
	local w [fallback fine STROKE]
	include : spiro
		widths.center w
		flat (MIDDLE - hookx) (bottom + w / 2 + fovershoot) [heading RIGHTWARD]
		curl (MIDDLE - hookx + 0.01) (bottom + w / 2 + fovershoot) [heading RIGHTWARD]
		flat MIDDLE (bottom + hooky)
		curl MIDDLE (top - hooky)
		flat (MIDDLE + hookx - 0.01) (top - w / 2 - fovershoot) [heading RIGHTWARD]
		curl (MIDDLE + hookx) (top - w / 2 - fovershoot) [heading RIGHTWARD]

create-glyph 'longs.italic' : glyph-construction
	set-width WIDTH
	dont-export
	include ifMarks
	include : LongSShape CAP (-HOOK) HOOKX HOOK

create-glyph 'longs' : glyph-construction
	set-width WIDTH
	assign-unicode 0x17f
	
	if (para.italicangle > 0)
		then : include glyphs.'longs.italic' AS_BASE
		else : include glyphs.'longs.upright' AS_BASE


create-glyph 'f' : glyph-construction
	set-width WIDTH
	assign-unicode 'f'
	include glyphs.longs AS_BASE
	include : fBar
