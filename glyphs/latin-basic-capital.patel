###### UPPER CASE

### A V X Y K
define [VShape top] : glyph-construction
	include : dispiro
		widths.lhs
		flat SB top [heading DOWNWARD]
		curl SB (top * 0.9) [heading DOWNWARD]
		quadcontrols 0 0.3 6 unimportant
		g4   (MIDDLE - HALFSTROKE * CORRECTION_HX) 0 [widths.lhs VShape.fine]

	#bottom cap
	start-from (MIDDLE + HALFSTROKE * CORRECTION_HX) 0
	line-to (MIDDLE - HALFSTROKE * CORRECTION_HX) 0
	line-to MIDDLE VShape.fine

	include : dispiro
		widths.rhs
		flat RIGHTSB top [heading DOWNWARD]
		curl RIGHTSB (top * 0.9) [heading DOWNWARD]
		quadcontrols 0 0.3 6 unimportant
		g4   (MIDDLE + HALFSTROKE * CORRECTION_HX) 0 [widths.rhs VShape.fine]
	tag-contour 'strokeUp'
	include : AIVSerifs top
set VShape.fine (STROKE * 0.8)

create-glyph 'V' : glyph-construction
	set-width WIDTH
	assign-unicode 'V'
	include capitalMarks
	include : VShape CAP

create-glyph 'A' : glyph-construction
	set-width WIDTH
	assign-unicode 'A'
	include capitalMarks
	set-anchor 'trailing' BASE (RIGHTSB - markHalfStroke) 0
	
	include : VShape CAP
	include : FlipAround MIDDLE (CAP / 2)
	
	include : HBarTop (SB + STROKE) (RIGHTSB - STROKE) (XH / 2)

define [WShape top] : glyph-construction
	local wheight (top * 0.6)
	
	include : dispiro
		widths.lhs
		flat SB top [heading DOWNWARD]
		curl SB (top * 0.75) [heading DOWNWARD]
		quadcontrols 0 0.3 6 unimportant
		g4   (WShape.m1 - WShape.fine / 2 * CORRECTION_HX) 0 [widths.lhs (WShape.fine * 0.8)]
	
	# bottom cap 1
	start-from (WShape.m1 + WShape.fine / 2 * CORRECTION_HX) 0
	line-to (WShape.m1 - WShape.fine / 2 * CORRECTION_HX) 0
	line-to WShape.m1 WShape.fine
	
	include : dispiro
		widths.rhs WShape.fine
		straight.down.start (MIDDLE + WShape.fine / 2 * CORRECTION_HX) wheight [heading DOWNWARD]
		quadcontrols 0 0.1 6 unimportant
		g4  (WShape.m1 + WShape.fine / 2 * CORRECTION_HX) 0 [widths.rhs WShape.fine]
	include : dispiro
		widths.lhs WShape.fine
		straight.down.start (MIDDLE - WShape.fine / 2 * CORRECTION_HX) wheight [heading DOWNWARD]
		quadcontrols 0 0.1 6 unimportant
		g4  (WShape.m2 - WShape.fine / 2 * CORRECTION_HX) 0 [widths.lhs WShape.fine]
		
	# bottom cap 2
	start-from (WShape.m2 + WShape.fine / 2 * CORRECTION_HX) 0
	line-to (WShape.m2 - WShape.fine / 2 * CORRECTION_HX) 0
	line-to WShape.m2 WShape.fine
	
	include : dispiro
		widths.rhs
		flat RIGHTSB top [heading DOWNWARD]
		curl RIGHTSB (top * 0.75) [heading DOWNWARD]
		quadcontrols 0 0.3 6 unimportant
		g4   (WShape.m2 + WShape.fine / 2 * CORRECTION_HX) 0 [widths.rhs (WShape.fine * 0.8)]
	include : AIVSerifs top
set WShape.fine : adviceBlackness 6
set WShape.m1 : WIDTH * 0.325
set WShape.m2 : WIDTH * 0.675

create-glyph 'W' : glyph-construction
	set-width WIDTH
	assign-unicode 'W'
	include capitalMarks
	include : WShape CAP

create-glyph 'X' : glyph-construction
	set-width WIDTH
	assign-unicode 'X'
	include capitalMarks
	
	include : xStrand SB 0 RIGHTSB CAP 0.1 0.4 0.28
	include : xStrand SB CAP RIGHTSB 0 0.1 0.4 0.28
	include : AIHSerifs CAP

define [YShape top bot] : glyph-construction
	local cross : mix [fallback bot 0] top 0.4
	include : halfXStrand SB top MIDDLE cross 0.1 0.4 0.28
	include : halfXStrand RIGHTSB top MIDDLE cross 0.1 0.4 0.28
	tag-contour 'strokeRT'
	include : VBar MIDDLE [fallback bot 0] (cross + HALFSTROKE)
	include : AIVSerifs top
	if SLAB : begin
		include : CenterBottomSerif MIDDLE [fallback bot 0] JUT

create-glyph 'Y' : glyph-construction
	set-width WIDTH
	assign-unicode 'Y'
	include capitalMarks
	include : YShape CAP

define [KShape top] : glyph-construction
	local turn (top * 0.99)
	
	local attach (top * [if SLAB 0.325 0.375])
	local attach2 [if SLAB [mix SB RIGHTSB 0.48] MIDDLE]
	
	local fine : adviceBlackness 3.5
	include : dispiro
		g4.down.start (RIGHTSB) top [widths.heading 0 (STROKE * [if SLAB 1.15 1.05] * (WIDTH * 2 / UPM)) DOWNWARD]
		bezcontrols 0 [if SLAB 0.1 0.2] 0.5 [if SLAB 0.55 0.65] 8
		g4 (SB + STROKE) attach [widths 0 fine]
	include : dispiro
		widths.center
		g4.up.start (RIGHTSB - O - HALFSTROKE * CORRECTION_HX) 0 [heading UPWARD]
		quadcontrols 0 [if SLAB 0.125 0.25] 8
		g4 attach2 (top * 0.61) [widths.center fine]
	if SLAB : begin
		include : RightwardTopSerif (RIGHTSB - (STROKE * [if SLAB 1.15 1.05] * (WIDTH * 2 / UPM) / 2 - HALFSTROKE) * CORRECTION_HX) top (SIDEJUT)
		include : RightwardBottomSerif (RIGHTSB - O) 0 SIDEJUT

create-glyph 'K' : glyph-construction
	set-width WIDTH
	assign-unicode 'K'
	include capitalMarks	
	include : VBarLeft SB 0 CAP
	include : KShape CAP
	if SLAB : begin
		include : CenterTopSerif (SB + HALFSTROKE * CORRECTION_HX) CAP JUT
		include : CenterBottomSerif (SB + HALFSTROKE * CORRECTION_HX) 0 JUT

### B D P R
define [BShape top] : glyph-construction
	local bowl : top * 0.52 + HALFSTROKE
	
	local turntop : (top - (bowl - STROKE)) * 0.5
	local turnbottom : bowl * 0.45
	
	local barleft SB

	include : dispiro
		widths.rhs
		flat (barleft - O) top [heading RIGHTWARD]
		curl (RIGHTSB - SB * 0.5 - turntop - CORRECTION_OMIDS) top
		archv
		g4 (RIGHTSB - SB * 0.5 - OX) [mix top (bowl - STROKE) (SMOOTHB / (SMOOTHA + SMOOTHB))]
		arcvh
		flat (RIGHTSB - SB * 0.5 - turntop + CORRECTION_OMIDS) (bowl - STROKE)
		curl (barleft - O) (bowl - STROKE) [heading LEFTWARD]
	include : dispiro
		widths.rhs
		flat (barleft - O) bowl [heading RIGHTWARD]
		curl (RIGHTSB - turnbottom - CORRECTION_OMIDS) bowl
		archv
		g4 (RIGHTSB - OX) [mix bowl 0 (SMOOTHB / (SMOOTHA + SMOOTHB))]
		arcvh
		flat (RIGHTSB - turnbottom + CORRECTION_OMIDS) 0
		curl (barleft - O) 0 [heading LEFTWARD]
	include : VBarLeft barleft 0 top
	if SLAB : begin
		include : LeftwardTopSerif barleft top SIDEJUT
		tag-contour 'serifLT'
		include : LeftwardBottomSerif barleft 0 SIDEJUT
		tag-contour 'serifLB'


create-glyph 'B' : glyph-construction
	set-width WIDTH
	assign-unicode 'B'
	include capitalMarks
	include : BShape CAP


create-glyph 'D' : glyph-construction
	set-width WIDTH
	assign-unicode 'D'
	include capitalMarks
	
	local dsmooth : Math.min (CAP * 0.499) (SMOOTH * 1.35)
	local bsmooth (SMOOTH * 1.1)
	
	local barleft SB
	
	include : VBarLeft barleft 0 CAP
	
	include : dispiro
		widths.rhs
		flat (barleft - O) CAP [heading RIGHTWARD]
		curl (RIGHTSB - bsmooth) CAP
		archv
		flat (RIGHTSB - OX) (CAP - dsmooth - (SMOOTHB - SMOOTH))
		curl (RIGHTSB - OX) (dsmooth + (SMOOTHA - SMOOTH))
		arcvh
		flat (RIGHTSB - bsmooth) 0
		curl (barleft - O) 0 [heading LEFTWARD]
	if SLAB : begin
		include : LeftwardTopSerif barleft CAP SIDEJUT
		tag-contour 'serifLT'
		include : LeftwardBottomSerif barleft 0 SIDEJUT
		tag-contour 'serifLB'

define [PShape top _mul bp] : glyph-construction
	local mul : fallback _mul 1.25
	local bowlTop (top * 1)
	local bowlBottom ((top - STROKE) * [fallback bp PBARPOS] - HALFSTROKE)
	
	local turn : mix bowlTop bowlBottom (SMOOTHB / (SMOOTHA + SMOOTHB))
	local turnRadius : (bowlTop - bowlBottom) * 0.45
	include : dispiro
		widths.rhs
		flat (SB * mul - O) bowlTop [heading RIGHTWARD]
		curl (RIGHTSB - turnRadius - CORRECTION_OMIDS) bowlTop
		archv
		g4 (RIGHTSB - OX) turn
		arcvh
		flat (RIGHTSB - turnRadius + CORRECTION_OMIDS) bowlBottom
		curl (SB * mul - O) bowlBottom [heading LEFTWARD]
	include : VBarLeft (SB * mul) 0 top
	if SLAB : begin
		include : LeftwardTopSerif (SB * mul) top SIDEJUT
		tag-contour 'serifLT'
		include : CenterBottomSerif (SB * mul + HALFSTROKE * CORRECTION_HX) 0 JUT

define [RShape top] : glyph-construction
	local m : if SLAB (0.5 + HALFSTROKE / CAP) PBARPOS
	include : PShape top 1 m
	local right (RIGHTSB - O - [if SLAB (JUT / 8) 0])
	include : dispiro
		widths.center
		g4.up.start (right - HALFSTROKE * CORRECTION_HX) 0 [heading UPWARD]
		quadcontrols 0 [if SLAB 0.2 0.4] 8
		g4 MIDDLE ((top - STROKE) * m)
	if SLAB : begin
		include : RightwardBottomSerif (RIGHTSB - JUT / 8) 0 (SIDEJUT + JUT / 8)

create-glyph 'P' : glyph-construction
	set-width WIDTH
	assign-unicode 'P'
	include capitalMarks
	include : PShape CAP

create-glyph 'R' : glyph-construction
	set-width WIDTH
	assign-unicode 'R'
	include capitalMarks
	include : RShape CAP
	set-anchor 'overlay' BASE (SB + STROKE * CORRECTION_HX) (CAP * PBARPOS - HALFSTROKE)


### C G O zero Q U
define [CShape top bot] : glyph-construction
	include : dispiro
		widths.lhs
		g4 RIGHTSB (top - HOOK)
		hookstart (top - O)
		flat (SB + OX) (top - SMOOTHA)
		curl (SB + OX) (bot + SMOOTHB)
		hookend (bot + O)
		g4 RIGHTSB (bot + HOOK)

create-glyph 'C' : glyph-construction
	set-width WIDTH
	assign-unicode 'C'
	include capitalMarks
	include : CShape CAP 0

define [GShape top sma smb] : glyph-construction
	local ybar : top * 0.52 + STROKE * 0.25
	include : dispiro
		widths.lhs
		g4   RIGHTSB (top - HOOK)
		hookstart (top - O)
		flat (SB + OX) (top - sma)
		curl (SB + OX) smb
		arcvh
		g4   (MIDDLE + CORRECTION_OMIDS) O
		archv
		flat RIGHTSB sma
		curl RIGHTSB ybar [heading UPWARD]
	include : dispiro
		flat MIDDLE ybar [widths 0 STROKE]
		curl RIGHTSB ybar [heading RIGHTWARD]

create-glyph 'G' : glyph-construction
	set-width WIDTH
	assign-unicode 'G'
	include capitalMarks
	
	include : GShape CAP SMOOTHA SMOOTHB


create-glyph 'O' : glyph-construction
	set-width WIDTH
	assign-unicode 'O'
	include capitalMarks
	
	include : OShape CAP 0 SB RIGHTSB nothing SMOOTHA SMOOTHB


create-glyph 'Q' : glyph-construction
	set-width WIDTH
	assign-unicode 'Q'
	
	include    glyphs.O AS_BASE
	
	start-from MIDDLE 0
	line-to    (MIDDLE + WIDTH * 0.1) (-CAP * 0.2)
	line-to    (MIDDLE + WIDTH * 0.1 + STROKE * CORRECTION_HX) (-CAP * 0.2)
	line-to    (MIDDLE + STROKE * CORRECTION_HX) 0
	line-to    (MIDDLE + STROKE * (1 - 0.5 / 3) * CORRECTION_HX) (STROKE * 0.5)
	reverse-last

define [UShape top bottom stroke oper] : glyph-construction
	include : dispiro
		widths.lhs
		flat SB top [heading DOWNWARD]
		curl SB (bottom + SMOOTHB)
		arcvh
		g4   (MIDDLE + CORRECTION_OMIDS) (bottom + O)
		archv
		flat RIGHTSB (bottom + SMOOTHA)
		curl RIGHTSB top [heading UPWARD]
	if [not oper] : include : AIVSerifs top

create-glyph 'U' : glyph-construction
	set-width WIDTH
	assign-unicode 'U'
	include capitalMarks
	include : UShape CAP 0

### F E H L I T Z
define [FShape top y] : glyph-construction
	include : VBarLeft (SB * 1.5) 0 [fallback top CAP]
	include : HBarTop (SB * 1.5 - O) RIGHTSB [fallback top CAP]
	include : HBar (SB * 1.5 - O) (RIGHTSB - [if SLAB (STROKE * 0.75) HALFSTROKE]) ([fallback top CAP] * [fallback y [if SLAB 0.52 0.54]])
	if SLAB : begin
		include : LeftwardTopSerif (SB * 1.5) [fallback top CAP] SIDEJUT
		include : CenterBottomSerif (SB * 1.5 + HALFSTROKE * CORRECTION_HX) 0 JUT
		tag-contour 'serifBottom'
		include : DownwardRightSerif RIGHTSB [fallback top CAP] VJUT

create-glyph 'F' : glyph-construction
	set-width WIDTH
	assign-unicode 'F'
	include capitalMarks
	include : FShape

define [EShape top] : glyph-construction
	include : FShape top
	include : HBarBottom (SB * 1.5 - O) RIGHTSB 0
	if SLAB : begin
		include : LeftwardBottomSerif (SB * 1.5) 0 SIDEJUT
		include : UpwardRightSerif RIGHTSB 0 VJUT

create-glyph 'E' : glyph-construction
	set-width WIDTH
	assign-unicode 'E'
	include capitalMarks
	include : EShape CAP

define [HShape top] : glyph-construction
	include : VBarLeft SB 0 top
	include : VBarRight RIGHTSB 0 top
	include : HBar (SB - O) (RIGHTSB + O) (top * BARPOS)
	include : AIHSerifs top

create-glyph 'H' : glyph-construction
	set-width WIDTH
	assign-unicode 'H'
	include capitalMarks
	include : HShape CAP

define [LShape top] : glyph-construction
	include : VBarLeft (SB * 1.5) 0 top
	include : HBarBottom (SB * 1.5 - O) (RIGHTSB - OX) 0
	if SLAB : begin
		include : LeftwardBottomSerif (SB * 1.5) 0 SIDEJUT
		include : CenterTopSerif (SB * 1.5 + CORRECTION_HX * HALFSTROKE) top JUT
		include : UpwardRightSerif (RIGHTSB - OX) 0 VJUT

create-glyph 'L' : glyph-construction
	set-width WIDTH
	assign-unicode 'L'
	include capitalMarks
	include : LShape CAP


create-glyph 'I.straight' : glyph-construction
	include capitalMarks
	include : VBar MIDDLE 0 CAP

define [ISerifShape top] : glyph-construction
	include : dispiro
		widths.rhs
		flat (MIDDLE - WIDTH * 0.26 - STROKE * globalTransform.yx) top
		curl (MIDDLE + WIDTH * 0.26 - STROKE * globalTransform.yx) top
	# Bar
	include : VBar MIDDLE 0 top
	# Bottom serif
	include : dispiro
		widths.lhs
		flat (MIDDLE - WIDTH * 0.26 + STROKE * globalTransform.yx) 0
		curl (MIDDLE + WIDTH * 0.26 + STROKE * globalTransform.yx) 0

create-glyph 'I.serifed' : glyph-construction
	include capitalMarks
	include : ISerifShape CAP

select-variant 'I' 'I' 'serifed'

define [TShape top] : glyph-construction
	include : VBar MIDDLE 0 top
	local l : SB + OXE
	local r : RIGHTSB - OXE
	include : HBarTop l r top
	if SLAB : begin
		include : DownwardRightSerif r top VJUT MVERTSTROKE
		tag-contour 'serifRT'
		include : DownwardLeftSerif l top VJUT MVERTSTROKE
		tag-contour 'serifLT'
		include : CenterBottomSerif MIDDLE 0 JUT
		tag-contour 'serifRB'

create-glyph 'T' : glyph-construction
	set-width WIDTH
	assign-unicode 'T'
	include capitalMarks
	set-anchor 'bottomright' BASE (MIDDLE + HALFSTROKE * CORRECTION_HX) 0
	include : TShape CAP


create-glyph 'Z' : glyph-construction
	set-width WIDTH
	assign-unicode 'Z'
	include capitalMarks
	
	local cor : 1.15 * CORRECTION_HX
	
	include : HBarTop SB RIGHTSB CAP
	
	start-from SB STROKE
	line-to (SB + STROKE * cor) STROKE
	line-to RIGHTSB (CAP - STROKE)
	line-to (RIGHTSB - STROKE * cor) (CAP - STROKE)
	reverse-last
	
	include : HBarBottom SB RIGHTSB 0
	tag-contour 'strokeBottom'
	
	if SLAB : begin
		include : DownwardLeftSerif SB CAP VJUT
		include : UpwardRightSerif RIGHTSB 0 VJUT
		tag-contour 'serifRB'


### J

create-glyph 'J.straight' : glyph-construction
	set-width WIDTH
	include capitalMarks
	set-anchor 'overlay' BASE (RIGHTSB - STROKE * CORRECTION_HX - JBALANCE2) (CAP * BARPOS)
	
	local slope (STROKE * 0.00092)
	local expand 0.35
	local coexpand ((1 - expand) / 2)
	local smooth : HOOK + 0.75 * STROKE
	
	local hookx (0.5 * SB + OXHOOK)
	
	include : dispiro
		widths.rhs
		flat (RIGHTSB - JBALANCE2) CAP [heading DOWNWARD]
		curl (RIGHTSB - JBALANCE2) smooth
		hookend O
		g4 hookx HOOK

create-glyph 'J.shorthook' : glyph-construction
	set-width WIDTH
	include capitalMarks
	
	local slope (STROKE * 0.00092)
	local expand 0.35
	local coexpand ((1 - expand) / 2)
	local smooth : HOOK + 0.75 * STROKE
	
	local hookx (0.5 * SB + OXHOOK)

	include : dispiro
		widths.rhs
		flat (RIGHTSB - JBALANCE2) CAP [heading DOWNWARD]
		curl (RIGHTSB - JBALANCE2) smooth
		straight.left.end [mix SB RIGHTSB 0.3] O [heading LEFTWARD]

create-glyph 'J.serifed' : glyph-construction
	set-width WIDTH
	include glyphs.'J.straight' AS_BASE
	include : LeftwardTopSerif (RIGHTSB - HALFSTROKE * CORRECTION_HX - JBALANCE2) CAP LONGJUT

select-variant 'J' 'J' 'serifed'

### M N
define [NShape top left right coward diagcoward xn] : glyph-construction
	local topstroke : adviceBlackness [fallback diagcoward 4]
	local stroke : adviceBlackness [fallback coward 1]
	local halftopstroke : topstroke / 2
	
	include : dispiro
		flat left 0 [widths.heading 0 stroke UPWARD]
		curl left (top * 0.4) [heading UPWARD]
		straight.up.end left top [widths.heading 0 topstroke UPWARD]
	include : dispiro
		flat right top [widths.heading 0 stroke DOWNWARD]
		curl right (top * 0.6) [heading DOWNWARD]
		straight.down.end right 0 [widths.heading 0 topstroke DOWNWARD]
	include : dispiro
		flat (left + halftopstroke) top [widths.heading topstroke 0 DOWNWARD]
		curl (right - halftopstroke) 0 [widths.heading 0 topstroke DOWNWARD]
	include : AINSerifs top left right stroke xn

create-glyph 'N' : glyph-construction
	set-width WIDTH
	assign-unicode 'N'
	include capitalMarks
	include : NShape CAP SB RIGHTSB

define [MShape top] : glyph-construction
	local topstroke : adviceBlackness 5
	local halftopstroke : topstroke / 2
	
	include : dispiro
		flat SB 0 [widths.heading 0 STROKE UPWARD]
		curl SB (top * 0.2) [heading UPWARD]
		straight.up.end SB top [widths.heading 0 topstroke UPWARD]
	include : dispiro
		flat RIGHTSB 0 [widths.heading STROKE 0 UPWARD]
		curl RIGHTSB (top * 0.2) [heading UPWARD]
		straight.up.end RIGHTSB top [widths.heading topstroke 0 UPWARD]
	include : dispiro
		flat (SB + halftopstroke) top [widths.heading topstroke 0 DOWNWARD]
		curl MIDDLE (top * 0.3) [widths.heading (topstroke / 2) (topstroke / 2) DOWNWARD]
	include : dispiro
		flat (RIGHTSB - halftopstroke) top [widths.heading 0 topstroke DOWNWARD]
		curl MIDDLE (top * 0.3) [widths.heading (topstroke / 2) (topstroke / 2) DOWNWARD]
	include : AIMSerifs top

create-glyph 'M' : glyph-construction
	set-width WIDTH
	assign-unicode 'M'
	include capitalMarks
	include : MShape CAP


### S
create-glyph 'S' : glyph-construction
	set-width WIDTH
	assign-unicode 'S'
	include capitalMarks
	define smooth : adviceSSmooth CAP (-1)
	include : dispiro
		widths.lhs
		g4   RIGHTSB (CAP - HOOK)
		hookstart CAPO
		g4   SB (CAP - smooth)
		alsothru 0.5 0.5 [widths (ESS / 2) (ESS / 2)]
		g4   RIGHTSB smooth [widths 0 STROKE]
		hookend O
		g4   SB HOOK