###### UPPER CASE

### A V X Y K
create-glyph 'A' : glyph-construction {
	set-width WIDTH
	assign-unicode 'A'
	include capitalMarks
	
	local TURN [XH * 0.1]
	
	include : create-stroke
		:.start-from SB 0
		:.heads-to   UPWARD
		:.set-width  0 STROKE
		:.line-to    SB TURN
		:.heads-to   UPWARD
		:.curve-to   SB [mix TURN CAP 0.27] [MIDDLE - STROKE / 2] CAP
		:.set-width  0 [STROKE * 0.8]
	
	include : create-stroke
		:.start-from RIGHTSB 0
		:.heads-to   UPWARD
		:.set-width  STROKE 0
		:.line-to    RIGHTSB TURN
		:.heads-to   UPWARD
		:.curve-to   RIGHTSB [mix TURN CAP 0.27] [MIDDLE + STROKE / 2] CAP
		:.set-width  [STROKE * 0.8] 0
	
	include : create-stroke 
		:.start-from [SB + STROKE] [XH / 2]
		:.heads-to   RIGHTWARD
		:.set-width  0 STROKE
		:.line-to    [RIGHTSB - STROKE] [XH / 2]
		:.heads-to   RIGHTWARD
	
	#top cap
	start-from [MIDDLE - STROKE / 2] CAP
	line-to [MIDDLE + STROKE / 2] CAP
	line-to MIDDLE [CAP - STROKE]
}
create-glyph 'V' : glyph-construction {
	set-width WIDTH
	assign-unicode 'V'
	include capitalMarks
	
	local TURN [CAP * 0.9]
	
	include : create-stroke
		:.start-from SB CAP
		:.heads-to   DOWNWARD
		:.set-width  STROKE 0
		:.line-to    SB TURN
		:.heads-to   DOWNWARD
		:.curve-to   SB [[1 - 0.27] * TURN] [MIDDLE - STROKE / 2] 0
		:.set-width  [STROKE * 0.8] 0
	
	include : create-stroke
		:.start-from RIGHTSB CAP
		:.heads-to   DOWNWARD
		:.set-width  0 STROKE
		:.line-to    RIGHTSB TURN
		:.heads-to   DOWNWARD
		:.curve-to   RIGHTSB [[1 - 0.27] * TURN] [MIDDLE + STROKE / 2] 0
		:.set-width  0 [STROKE * 0.8]

	#bottom cap
	start-from [MIDDLE + STROKE / 2] 0
	line-to    [MIDDLE - STROKE / 2] 0
	line-to    MIDDLE STROKE
}
create-glyph 'W' : glyph-construction {
	set-width WIDTH
	assign-unicode 'W'
	include capitalMarks
	
	local TURN [CAP * 0.75]
	local turn2 [CAP * 0.59]
	local wheight [CAP * 0.6]
	local bottomStroke : adviceBlackness 5.2
	local m1 : WIDTH * 0.3
	local m2 : WIDTH * 0.7
	
	include : create-stroke
		:.start-from SB CAP
		:.heads-to DOWNWARD
		:.set-width STROKE 0
		:.line-to SB TURN
		:.heads-to DOWNWARD
		:.curve-to SB [[1 - 0.27] * TURN] [m1 - bottomStroke / 2] 0
		:.set-width bottomStroke 0
	
	include : create-stroke
		:.start-from RIGHTSB CAP
		:.heads-to DOWNWARD
		:.set-width 0 STROKE
		:.line-to RIGHTSB TURN
		:.heads-to DOWNWARD
		:.curve-to RIGHTSB [[1 - 0.27] * TURN] [m2 + bottomStroke / 2] 0
		:.set-width 0 bottomStroke
		
	include : create-stroke
		:.start-from [MIDDLE + bottomStroke / 2] wheight
		:.heads-to DOWNWARD
		:.set-width 0 bottomStroke
		:.line-to [MIDDLE + bottomStroke / 2] turn2
		:.heads-to DOWNWARD
		:.curve-to [MIDDLE + bottomStroke / 2] [[1 - 0.1] * turn2] [m1 + bottomStroke / 2] 0
		:.set-width 0 bottomStroke
	
	include : create-stroke
		:.start-from [MIDDLE - bottomStroke / 2] wheight
		:.heads-to DOWNWARD
		:.set-width bottomStroke 0
		:.line-to [MIDDLE - bottomStroke / 2] turn2
		:.heads-to DOWNWARD
		:.curve-to [MIDDLE - bottomStroke / 2] [[1 - 0.1] * turn2] [m2 - bottomStroke / 2] 0
		:.set-width bottomStroke 0

	#bottom cap
	start-from [m1 + bottomStroke / 2] 0
	line-to [m1 - bottomStroke / 2] 0
	line-to m1 bottomStroke
	
	start-from [m2 + bottomStroke / 2] 0
	line-to [m2 - bottomStroke / 2] 0
	line-to m2 bottomStroke
}
create-glyph 'X' : glyph-construction {
	set-width WIDTH
	assign-unicode 'X'
	include capitalMarks
	
	include : xStrand SB 0 RIGHTSB CAP 0.1 0.4 0.28
	include : xStrand SB CAP RIGHTSB 0 0.1 0.4 0.28
}
create-glyph 'Y' : glyph-construction {
	set-width WIDTH
	assign-unicode 'Y'
	include capitalMarks
	
	local cross    [CAP * 0.4]
	include : halfXStrand SB CAP MIDDLE cross 0.1 0.4 0.28
	include : halfXStrand RIGHTSB CAP MIDDLE cross 0.1 0.4 0.28
	include : create-stroke
		:.start-from MIDDLE 0
		:.set-width HALFSTROKE HALFSTROKE
		:.heads-to UPWARD
		:.line-to MIDDLE [cross + HALFSTROKE]
		:.heads-to UPWARD
}

create-glyph 'K' : glyph-construction {
	set-width WIDTH
	assign-unicode 'K'
	include capitalMarks
	
	local TURN [CAP * 0.95]
	local rturn [XH * 0.1]
	local right [RIGHTSB - O]
	
	local fine : adviceBlackness 3.5
	
	include : create-stroke 
		:.start-from SB 0
		:.set-width  0 STROKE
		:.heads-to   UPWARD
		:.line-to    SB CAP
		:.heads-to   UPWARD
		
	include : create-stroke
		:.start-from RIGHTSB CAP
		:.heads-to   DOWNWARD
		:.set-width  0 STROKE
		:.line-to    RIGHTSB TURN
		:.heads-to   DOWNWARD
		:.curve-to   RIGHTSB [[1 - 0.18] * TURN] [SB + STROKE] [CAP * 0.35]
		:.set-width  0 fine
		
	include : create-stroke
		:.start-from [right - HALFSTROKE] 0
		:.heads-to UPWARD
		:.set-width HALFSTROKE HALFSTROKE
		:.curve-to [right - HALFSTROKE] [rturn + 0.2 * [XH - rturn]] MIDDLE [CAPMIDDLE + HALFSTROKE]
		:.set-width [fine / 2] [fine / 2]
		
}

### B D P R
create-glyph 'B' : glyph-construction {
	set-width WIDTH
	assign-unicode 'B'
	include capitalMarks
	
	local bowl 451
	local tkappa [COKAPPA - 0.22]
	local bkappa [COKAPPA - 0.2]
	
	local turntop : [CAP + [bowl - STROKE]] / 2
	local turnbottom : bowl / 2
	
	include : create-stroke
		:.start-from SB CAP
		:.heads-to   RIGHTWARD
		:.set-width  0 STROKE
		:.line-to    [RIGHTSB - SB * 0.5 - turnbottom] CAP
		:.arc-hv-to  [RIGHTSB - SB * 0.5] turntop
		:.arc-vh-to  [RIGHTSB - SB * 0.5 - turnbottom] [bowl - STROKE]
		:.line-to    SB [bowl - STROKE]
		:.heads-to   LEFTWARD
	
	include : create-stroke
		:.start-from SB 0
		:.heads-to   RIGHTWARD
		:.set-width  STROKE 0
		:.line-to    [RIGHTSB - turnbottom] 0
		:.arc-hv-to  RIGHTSB turnbottom
		:.arc-vh-to  [RIGHTSB - turnbottom] bowl
		:.line-to    SB bowl
		:.heads-to   LEFTWARD
	
	include : create-stroke 
		:.start-from SB 0 
		:.heads-to   UPWARD
		:.set-width  0 STROKE
		:.line-to    SB CAP
		:.heads-to   UPWARD
}

create-glyph 'D' : glyph-construction {
	set-width WIDTH
	assign-unicode 'D'
	include capitalMarks
	
	local dsmooth [SMOOTH * 1.35]
	local bsmooth [SMOOTH * 1.1]
	
	include : create-stroke 
		:.start-from SB 0
		:.heads-to   UPWARD
		:.set-width  0 STROKE
		:.line-to    SB CAP
		:.heads-to   UPWARD
	
	include : create-stroke
		:.start-from SB 0
		:.heads-to   RIGHTWARD
		:.set-width  STROKE 0
		:.line-to    [RIGHTSB - bsmooth] 0
		:.arc-hv-to  RIGHTSB dsmooth
		:.line-to    RIGHTSB [CAP - dsmooth]
		:.arc-vh-to  [RIGHTSB - bsmooth] CAP
		:.line-to    SB CAP
		:.heads-to   LEFTWARD
}
create-glyph 'P' : glyph-construction {
	set-width WIDTH
	assign-unicode 'P'
	include capitalMarks
	
	local bowlTop [CAP * 1]
	local bowlBottom [CAP * 0.5 - HALFSTROKE]
	local bkappa [COKAPPA - 0.2]
	
	local turn : mix bowlTop bowlBottom 0.5
	local turnRadius : [bowlTop - bowlBottom] / 2
	
	include : create-stroke
		:.start-from [SB * 1.25 + HALFSTROKE * 0.1] bowlTop
		:.heads-to   RIGHTWARD
		:.set-width  0 STROKE
		:.line-to    [RIGHTSB - turnRadius] bowlTop
		:.arc-hv-to  [RIGHTSB - O] turn
		:.arc-vh-to  [RIGHTSB - turnRadius] bowlBottom
		:.line-to    [SB * 1.25 + HALFSTROKE * 0.1] bowlBottom
		:.heads-to   LEFTWARD
	
	include : create-stroke 
		:.start-from [SB * 1.25] 0
		:.heads-to   UPWARD
		:.set-width  0 STROKE
		:.line-to    [SB * 1.25] CAP
		:.heads-to   UPWARD
}
create-glyph 'R' : glyph-construction {
	set-width WIDTH
	assign-unicode 'R'
	include glyphs.P AS_BASE
	
	local TURN [XH * 0.1]
	local right [RIGHTSB - O]
	include : create-stroke
		:.start-from [right - HALFSTROKE] 0
		:.heads-to UPWARD
		:.set-width HALFSTROKE HALFSTROKE
		:.curve-to [right - HALFSTROKE] [TURN + 0.2 * [XH - TURN]] MIDDLE CAPMIDDLE
}

### C G O zero Q U

create-glyph 'C' : glyph-construction {
	set-width WIDTH
	assign-unicode 'C'
	include capitalMarks
	
	include : create-stroke
		:.start-from [RIGHTSB - OXHOOK] [CAP - HOOK]
		:.set-width  STROKE 0
		:.curve-to   [MIDDLE + KAPPA_HOOK * [MIDDLE - para.sb]] CAPO MIDDLE CAPO
		:.heads-to   LEFTWARD
		:.arc-hv-to  SB [CAP - SMOOTHA]
		:.line-to    SB SMOOTHB
		:.arc-vh-to  MIDDLE O
		:.heads-to   RIGHTWARD
		:.curve-to   [MIDDLE + ITALICCORS + KAPPA_HOOK * [MIDDLE - SB]] O [RIGHTSB - OXHOOK] HOOK
}

create-glyph 'G' : glyph-construction {
	set-width WIDTH
	assign-unicode 'G'
	include capitalMarks
	
	include : create-stroke
		:.start-from [RIGHTSB - OXHOOK] [CAP - HOOK]
		:.set-width  STROKE 0
		:.curve-to   [MIDDLE + KAPPA_HOOK * [MIDDLE - para.sb]] CAPO MIDDLE CAPO
		:.heads-to   LEFTWARD
		:.arc-hv-to  SB [CAP - SMOOTHA]
		:.line-to    SB SMOOTHB
		:.arc-vh-to  MIDDLE O
		:.heads-to   RIGHTWARD
		:.arc-hv-to  RIGHTSB SMOOTHA
		:.line-to    RIGHTSB [CAP / 2 + STROKE / 2]
		:.heads-to   UPWARD
	
	include : create-stroke
		:.start-from  MIDDLE [CAP / 2 + STROKE / 2]
		:.set-width   0 STROKE 
		:.line-to     RIGHTSB [CAP / 2 + STROKE / 2]
		:.heads-to    RIGHTWARD
}

create-glyph 'O' : glyph-construction {
	set-width WIDTH
	assign-unicode 'O'
	include capitalMarks
	
	include : create-stroke
		:.start-from MIDDLE CAPO
		:.heads-to   LEFTWARD
		:.set-width  STROKE 0
		:.arc-hv-to  SB [CAP - SMOOTHA]
		:.line-to    SB SMOOTHB
		:.arc-vh-to  MIDDLE O
		:.heads-to   RIGHTWARD
		:.arc-hv-to  RIGHTSB SMOOTHA
		:.line-to    RIGHTSB [CAP - SMOOTHB]
		:.arc-vh-to  MIDDLE CAPO
		:.heads-to   LEFTWARD
}

create-glyph 'Q' : glyph-construction {
	set-width WIDTH
	assign-unicode 'Q'
	
	include    glyphs.O AS_BASE
	
	start-from MIDDLE 0
	line-to    [MIDDLE + STROKE / 2] [-CAP * 0.2]
	line-to    [MIDDLE + STROKE / 2 + STROKE] [-CAP * 0.2]
	line-to    [MIDDLE + STROKE] 0
	line-to    [MIDDLE + STROKE * [1 - 0.5 / 3]] [STROKE * 0.5]
	reverse-last
}

create-glyph 'U' : glyph-construction {
	set-width WIDTH
	assign-unicode 'U'
	include capitalMarks
	
	include : create-stroke
		:.start-from SB CAP
		:.heads-to   DOWNWARD
		:.set-width  STROKE 0
		:.line-to    SB SMOOTHB
		:.arc-vh-to  MIDDLE O
		:.heads-to   RIGHTWARD
		:.arc-hv-to  RIGHTSB SMOOTHA
		:.line-to    RIGHTSB CAP
		:.heads-to   UPWARD
}


### F E H L I T Z
define [FShape] : glyph-construction {
	include : create-stroke :.start-from [SB * 1.5] 0 :.heads-to UPWARD :.set-width 0 STROKE 
		:.line-to [SB * 1.5] CAP :.heads-to UPWARD
	include : create-stroke :.start-from [SB * 1.5] CAP :.set-width 0 STROKE :.heads-to RIGHTWARD
		:.line-to RIGHTSB CAP :.heads-to RIGHTWARD
	include : create-stroke :.start-from [SB * 1.5] [CAP * 0.54] :.set-width HALFSTROKE HALFSTROKE :.heads-to RIGHTWARD
		:.line-to [RIGHTSB - HALFSTROKE] [CAP * 0.54] :.heads-to RIGHTWARD
}
create-glyph 'F' : glyph-construction {
	set-width WIDTH
	assign-unicode 'F'
	include capitalMarks
	include : FShape
}
create-glyph 'E' : glyph-construction {
	set-width WIDTH
	assign-unicode 'E'
	include capitalMarks
	include : FShape
	
	include : create-stroke :.start-from [SB * 1.5] 0 :.set-width STROKE 0 :.heads-to RIGHTWARD
		:.line-to RIGHTSB 0 :.heads-to RIGHTWARD
}
create-glyph 'H' : glyph-construction {
	set-width WIDTH
	assign-unicode 'H'
	include capitalMarks
	
	include : create-stroke :.start-from SB 0 :.heads-to UPWARD :.set-width 0 STROKE 
		:.line-to SB CAP :.heads-to UPWARD
	include : create-stroke :.start-from RIGHTSB 0 :.heads-to UPWARD :.set-width STROKE 0 
		:.line-to RIGHTSB CAP :.heads-to UPWARD
	include : create-stroke :.start-from SB [CAP / 2] :.set-width HALFSTROKE HALFSTROKE :.heads-to RIGHTWARD
		:.line-to RIGHTSB [CAP / 2] :.heads-to RIGHTWARD
}

create-glyph 'L' : glyph-construction {
	set-width WIDTH
	assign-unicode 'L'
	include capitalMarks
	
	include : create-stroke
		:.start-from [SB * 1.5] CAP
		:.set-width STROKE 0
		:.heads-to DOWNWARD
		:.line-to [SB * 1.5] 0
		:.heads-to DOWNWARD
	include : create-stroke
		:.start-from [SB * 1.5] 0
		:.set-width STROKE 0
		:.heads-to RIGHTWARD
		:.line-to RIGHTSB 0
		:.heads-to RIGHTWARD
}

create-glyph 'I.straight' : glyph-construction {
	dont-export
	include capitalMarks
	include : create-stroke
		:.start-from MIDDLE 0
		:.heads-to UPWARD
		:.set-width HALFSTROKE HALFSTROKE
		:.line-to MIDDLE CAP
		:.heads-to UPWARD
}
create-glyph 'I.serifed' : glyph-construction {
	dont-export
	include glyphs.'I.straight' AS_BASE
	# Top serif
	include : create-stroke
		:.start-from [MIDDLE - WIDTH * 0.26 - STROKE * globalTransform.yx] CAP
		:.set-width 0 STROKE
		:.line-to [MIDDLE + WIDTH * 0.26 - STROKE * globalTransform.yx] CAP
		
	# Bottom serif
	include : create-stroke
		:.start-from [MIDDLE - WIDTH * 0.26 + STROKE * globalTransform.yx] 0
		:.set-width STROKE 0
		:.line-to [MIDDLE + WIDTH * 0.26 + STROKE * globalTransform.yx] 0
}
select-variant 'I' 'I' 'serifed'

create-glyph 'T' : glyph-construction {
	set-width WIDTH
	assign-unicode 'T'
	include capitalMarks
	
	include : create-stroke :.start-from MIDDLE 0 :.heads-to UPWARD :.set-width HALFSTROKE HALFSTROKE
		:.line-to MIDDLE CAP :.heads-to UPWARD
	include : create-stroke :.start-from SB CAP :.heads-to RIGHTWARD :.set-width 0 STROKE
		:.line-to RIGHTSB CAP :.heads-to RIGHTWARD
}

create-glyph 'Z' : glyph-construction {
	set-width WIDTH
	assign-unicode 'Z'
	include capitalMarks
	
	local cor 1.15
	
	include : create-stroke :.start-from SB CAP :.heads-to RIGHTWARD :.set-width 0 STROKE
		:.line-to RIGHTSB CAP :.heads-to RIGHTWARD
	include : create-stroke :.start-from SB 0 :.heads-to RIGHTWARD :.set-width STROKE 0
		:.line-to RIGHTSB 0 :.heads-to RIGHTWARD
	
	start-from SB STROKE
	line-to [SB + STROKE * cor] STROKE
	line-to RIGHTSB [CAP - STROKE]
	line-to [RIGHTSB - STROKE * cor] [CAP - STROKE]
	reverse-last
}

### J

create-glyph 'J.straight' : glyph-construction {
	set-width WIDTH
	dont-export
	include capitalMarks
	
	local slope [STROKE * 0.00092] 
	local expand 0.35
	local coexpand [[1 - expand] / 2]
	local kappa KAPPA_HOOK
	local smooth : HOOK + 0.75 * STROKE
	
	local hookx [0.5 * SB + OXHOOK]

	include : create-stroke
		:.start-from [RIGHTSB - JBALANCE] CAP :.set-width 0 STROKE :.heads-to DOWNWARD
		:.line-to    [RIGHTSB - JBALANCE] smooth
		:.arc-vh-to  [mix hookx [RIGHTSB - JBALANCE] 0.5] O :.heads-to LEFTWARD
		:.curve-to   [MIDDLE - kappa * [MIDDLE - SB] - SB * 0.5] O hookx HOOK
}
create-glyph 'J.serifed' : glyph-construction {
	set-width WIDTH
	dont-export
	include glyphs.'J.straight' AS_BASE
	include : leftwardTopSerif [RIGHTSB - HALFSTROKE - JBALANCE] CAP LONGJUT
}
select-variant 'J' 'J' 'serifed'

### M N
create-glyph 'N' : glyph-construction {
	set-width WIDTH
	assign-unicode 'N'
	include capitalMarks
	
	local topstroke : adviceBlackness 4
	local halftopstroke : topstroke / 2
	
	include : create-stroke 
		:.start-from SB 0 :.heads-to UPWARD :.set-width 0 STROKE 
		:.line-to SB [CAP * 0.4] :.heads-to UPWARD
		:.line-to SB CAP :.heads-to UPWARD :.set-width 0 topstroke
	include : create-stroke 
		:.start-from RIGHTSB 0 :.heads-to UPWARD :.set-width topstroke 0
		:.line-to RIGHTSB [CAP * 0.6] :.heads-to UPWARD :.set-width STROKE 0
		:.line-to RIGHTSB CAP :.heads-to UPWARD
	include : create-stroke
		:.start-from [SB + halftopstroke] CAP :.heads-to DOWNWARD :.set-width topstroke 0 
		:.line-to [RIGHTSB - topstroke - halftopstroke] 0 :.heads-to DOWNWARD
}
create-glyph 'M' : glyph-construction {
	set-width WIDTH
	assign-unicode 'M'
	include capitalMarks
	
	local topstroke : adviceBlackness 5
	local halftopstroke : topstroke / 2
	
	include : create-stroke 
		:.start-from SB 0 :.heads-to UPWARD :.set-width 0 STROKE 
		:.line-to SB [CAP * 0.2] :.heads-to UPWARD
		:.line-to SB CAP :.heads-to UPWARD :.set-width 0 topstroke
	include : create-stroke 
		:.start-from RIGHTSB 0 :.heads-to UPWARD :.set-width STROKE 0
		:.line-to RIGHTSB [CAP * 0.2] :.heads-to UPWARD
		:.line-to RIGHTSB CAP :.heads-to UPWARD :.set-width topstroke 0
	include : create-stroke
		:.start-from [SB + halftopstroke] CAP :.heads-to DOWNWARD :.set-width topstroke 0 
		:.line-to [MIDDLE - halftopstroke] [CAP * 0.3] :.heads-to DOWNWARD
	include : create-stroke
		:.start-from [MIDDLE + halftopstroke] [CAP * 0.3] :.heads-to UPWARD :.set-width topstroke 0 
		:.line-to [RIGHTSB - halftopstroke] CAP :.heads-to UPWARD
}

### S
create-glyph 'S' : glyph-construction {
	set-width WIDTH
	assign-unicode 'S'
	include capitalMarks

	include : sHookUpper CAP SMOOTHA HOOK
	include : sHookLower 0 SMOOTHA HOOK
	include : sStrand [CAP - SMOOTHA] SMOOTHA
}