### Automatic build accented letters

define [isAboveMark mark] : mark && mark.anchors && mark.anchors.above && mark.anchors.above.type === MARK

foreach code [range 0x00A0 0xFFFF] : if [not unicodeGlyphs`code] : begin {
	local str : String.fromCharCode code
	local nfd : str.normalize 'NFD'
	if [nfd.length > 1] : begin {
		local parts ()
		local allFound true
		local hasMarkAbove false
		foreach j [range 0 nfd.length] : begin {
			set parts`j unicodeGlyphs`[nfd.charCodeAt j]
			if [not parts`j] : set allFound false
			if [isAboveMark parts`j] : set hasMarkAbove true
		}
		if allFound : begin {
			if [parts.0 === glyphs.i && hasMarkAbove] : parts.0 = glyphs.dotlessi
			if [parts.0 === glyphs.j && hasMarkAbove] : parts.0 = glyphs.dotlessj
			
			create-glyph [parts.map [[part] -> part.name] :.join '_'] : glyph-construction {
				assign-unicode code
				include parts.0 AS_BASE
				foreach part [items-of : parts.slice 1] : include part
			}
		}
	}
}

create-glyph 'grave' : glyph-construction {
	assign-unicode '`'
	include glyphs.space AS_BASE
	include glyphs.graveAbove
}
create-glyph 'acute' : glyph-construction {
	assign-unicode 0xB4
	include glyphs.space AS_BASE
	include glyphs.acuteAbove
}
create-glyph 'asciicircum' : glyph-construction {
	set-width WIDTH
	assign-unicode 0x5E
	include glyphs.space AS_BASE
	include glyphs.circumflexAbove
}
create-glyph 'asciitilde' : glyph-construction {
	set-width WIDTH
	assign-unicode '~'
	include glyphs.space AS_BASE
	include glyphs.tildeAbove
}
create-glyph 'latin1dieresis' : glyph-construction {
	set-width WIDTH
	assign-unicode 0xA8
	include glyphs.space AS_BASE
	include glyphs.dieresisAbove
}
create-glyph 'latin1cedilla' : glyph-construction {
	set-width WIDTH
	assign-unicode 0xB8
	include glyphs.space AS_BASE
	include glyphs.cedillaBelow
}


define [Miniature glyphid fold scale] : begin {
	local forkedPara : Object.create para
	forkedPara.upmscale = 1
	forkedPara.buildFor = glyphid
	forkedPara.stroke = [adviceBlackness fold] / scale
	forkedPara.sb = SB / 2
	local forkFont : exports.build forkedPara (glyphid :: dependencyProfile.(glyphid))
	return forkFont.glyfMap`glyphid
}
define [CircledGlyph glyphid] : glyph-construction {
	local sw [adviceBlackness 6]
	include : create-glyph : glyph-construction {
		include : Miniature glyphid 4.2 0.6
		apply-transform : Upright
		apply-transform : Scale 0.45
		apply-transform : Translate [[WIDTH - WIDTH * 0.45] / 2] [sw * 2]
		apply-transform : Italify
	}
	include : smallo [CAP * 0.45 + sw * 4] 0 SB RIGHTSB sw
	apply-transform : Upright
	apply-transform : Translate 0 [parenMid - [CAP * 0.45 + sw * 4] / 2]
	apply-transform : Italify
}
define [createSuperscript unicode glyphid] : if glyphs`glyphid : begin {
	create-glyph ['superscript_' + glyphid] : glyph-construction {
		assign-unicode unicode
		include : create-glyph : glyph-construction {
			include : Miniature glyphid 4.2 0.6
			apply-transform : Upright
			apply-transform : Translate [-MIDDLE] [-CAP]
			apply-transform : Scale 0.6
			apply-transform : Translate MIDDLE CAP
			apply-transform : Italify
		}
	}
}
define [createSubscript unicode glyphid] : if glyphs`glyphid : begin {
	create-glyph ['subscript_' + glyphid] : glyph-construction {
		assign-unicode unicode
		include : create-glyph : glyph-construction {
			include : Miniature glyphid 4.2 0.6
			apply-transform : Upright
			apply-transform : Translate [-MIDDLE] 0
			apply-transform : Scale 0.6
			apply-transform : Translate MIDDLE [-DESCENDER / 2]
			apply-transform : Italify
		}
	}
}

create-glyph 'copyright' : glyph-construction {
	assign-unicode 0xA9
	include : CircledGlyph 'C'
}
create-glyph 'registered' : glyph-construction {
	assign-unicode 0xAE
	include : CircledGlyph 'R'
}

create-glyph 'ordfeminine' : glyph-construction {
	assign-unicode 0xAA
	include : Miniature 'a' 4.2 0.6
	include : create-stroke
		:.start-from SB DESCENDER
		:.set-width  STROKE 0
		:.heads-to   RIGHTWARD
		:.line-to    RIGHTSB DESCENDER
		:.heads-to   RIGHTWARD
		
	apply-transform : Upright
	apply-transform : Translate [-MIDDLE] [-XH]
	apply-transform : Scale 0.6
	apply-transform : Translate MIDDLE CAP
	apply-transform : Italify
}
create-glyph 'ordmasculine' : glyph-construction {
	assign-unicode 0xBA
	include : Miniature 'o' 4.2 0.6
	include : create-stroke
		:.start-from SB DESCENDER
		:.set-width  STROKE 0
		:.heads-to   RIGHTWARD
		:.line-to    RIGHTSB DESCENDER
		:.heads-to   RIGHTWARD
		
	apply-transform : Upright
	apply-transform : Translate [-MIDDLE] [-XH]
	apply-transform : Scale 0.6
	apply-transform : Translate MIDDLE CAP
	apply-transform : Italify
}

createSuperscript 0x2070 'zero'
createSuperscript 0x00B9 'one'
createSuperscript 0x00B2 'two'
createSuperscript 0x00B3 'three'
createSuperscript 0x2074 'four'
createSuperscript 0x2075 'five'
createSuperscript 0x2076 'six'
createSuperscript 0x2077 'seven'
createSuperscript 0x2078 'eight'
createSuperscript 0x2079 'nine'
createSuperscript 0x02B0 'h'
createSuperscript 0x02B2 'j'
createSuperscript 0x02B3 'r'
createSuperscript 0x02B7 'w'
createSuperscript 0x02B8 'y'
createSuperscript 0x02E1 'l'
createSuperscript 0x02E2 's'
createSuperscript 0x02E3 'x'
createSuperscript 0x2071 'i'
createSuperscript 0x207F 'n'
createSuperscript 0x1D43 'a'
createSuperscript 0x1D47 'b'
createSuperscript 0x1D48 'd'
createSuperscript 0x1D49 'e'
createSuperscript 0x1D4D 'g'
createSuperscript 0x1D4F 'k'
createSuperscript 0x1D50 'm'
createSuperscript 0x1D52 'o'
createSuperscript 0x1D56 'p'
createSuperscript 0x1D57 't'
createSuperscript 0x1D58 'u'
createSuperscript 0x1D5B 'v'
createSuperscript 0x1D9C 'c'
createSuperscript 0x1DA0 'f'
createSuperscript 0x1DBB 'z'
createSuperscript 0x1D2C 'A'
createSuperscript 0x1D2E 'B'
createSuperscript 0x1D30 'D'
createSuperscript 0x1D31 'E'
createSuperscript 0x1D33 'G'
createSuperscript 0x1D34 'H'
createSuperscript 0x1D35 'I'
createSuperscript 0x1D36 'J'
createSuperscript 0x1D37 'K'
createSuperscript 0x1D38 'L'
createSuperscript 0x1D39 'M'
createSuperscript 0x1D3A 'N'
createSuperscript 0x1D3C 'O'
createSuperscript 0x1D3E 'P'
createSuperscript 0x1D3F 'R'
createSuperscript 0x1D40 'T'
createSuperscript 0x1D41 'U'
createSuperscript 0x1D42 'W'

createSubscript 0x2080 'zero'
createSubscript 0x2081 'one'
createSubscript 0x2082 'two'
createSubscript 0x2083 'three'
createSubscript 0x2084 'four'
createSubscript 0x2085 'five'
createSubscript 0x2086 'six'
createSubscript 0x2087 'seven'
createSubscript 0x2088 'eight'
createSubscript 0x2089 'nine'

createSubscript 0x2090 'a'
createSubscript 0x2091 'e'
createSubscript 0x2092 'o'
createSubscript 0x2093 'x'
# createSubscript 0x2094 'reve'
createSubscript 0x2095 'h'
createSubscript 0x2096 'k'
createSubscript 0x2097 'l'
createSubscript 0x2098 'm'
createSubscript 0x2099 'n'
createSubscript 0x209A 'p'
createSubscript 0x209B 's'
createSubscript 0x209C 't'
createSubscript 0x1D62 'i'
createSubscript 0x1D63 'r'
createSubscript 0x1D64 'u'
createSubscript 0x1D65 'v'