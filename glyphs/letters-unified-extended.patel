###########################################################################################
# UNIFIED LETTERFORMS : GREEK ORIGINALS
###########################################################################################
symbol-block 'alpha' : create-glyph 'alpha' : glyph-construction
	set-width WIDTH
	assign-unicode 0x3B1
	include eMarks
	
	local middle : mix SB RIGHTSB 0.42
	local fine   : adviceBlackness 3.25
	local k1 0.25
	local k2 0.5
	local k3 0.35
	include : dispiro
		widths.rhs fine
		g4   (RIGHTSB - OX * 1.75) XH [heading DOWNWARD]
		bezcontrols k1 k2 k3 1 6
		g4.left.mid (middle + CORRECTION_OMIDS) O [widths 0 STROKE]
		archv
		flat.ai (SB + OX) SMALLSMOOTHB
		curl.ai (SB + OX) (XH - SMALLSMOOTHA)
		arcvh
		g4.right.mid (middle - CORRECTION_OMIDS) XO [widths 0 STROKE]
		bezcontrols (1 - k3) 0 (1 - k1) (1 - k2) 6
		g4   (RIGHTSB - OX * 2) 0 [widths.heading 0 fine DOWNWARD]

symbol-block 'Gamma'
	define [GammaShape top] : glyph-construction
		include : VBarLeft (SB * 1.5) 0 top
		include : HBarTop (SB * 1.5 - O) (RIGHTSB - OX) top
		if SLAB : begin
			include : LeftwardTopSerif (SB * 1.5) top SIDEJUT
			include : CenterBottomSerif (SB * 1.5 + CORRECTION_HX * HALFSTROKE) 0 JUT
			include : tagged 'serifRT' : DownwardRightSerif (RIGHTSB - OX) top VJUT
	
	create-glyph 'Gamma' : glyph-construction
		assign-unicode 0x393
		include capitalMarks
		include : GammaShape CAP
	alias 'cyrGhe' 0x413 'Gamma'

	create-glyph 'cyrghe.upright' : glyph-construction
		include eMarks
		include : GammaShape XH
	alias 'cyrghe.italic' null 'revs'
	create-glyph 'cyrghe.serbian' : glyph-construction
		include glyphs.dotlessi AS_BASE
		include glyphs.macronAbove	
	italic-variant 'cyrghe' 0x433

	define [CyrGeShape top] : glyph-construction
		include : GammaShape top
		eject-contour 'serifRT'
		include : VBarRight (RIGHTSB - OX) top (top + ACCENT)
	
	create-glyph 'cyrGe' : glyph-construction
		assign-unicode 0x490
		include capitalMarks
		include : CyrGeShape CAP
	
	create-glyph 'cyrge' : glyph-construction
		assign-unicode 0x491
		include eMarks
		include : CyrGeShape XH

symbol-block 'gamma'
	create-glyph 'gamma' : glyph-construction
		assign-unicode 0x3B3
		include pMarks
	
		local xmid : [mix SB RIGHTSB 0.46] + HALFSTROKE
		include : dispiro
			g4 (SB + 0.4 * STROKE * CORRECTION_HX) (XH - O) [widths.rhs]
			bezcontrols 0.33 0.17 1 0.62 6 important
			flat xmid 0
			curl xmid DESCENDER [heading DOWNWARD]
		
		include : dispiro
			widths.rhs
			flat RIGHTSB XH [heading DOWNWARD]
			curl RIGHTSB (XH * 0.9) [heading DOWNWARD]
			quadcontrols 0 0.3 6
			g4   xmid 0 [widths.rhs : STROKE * 0.9]

define {LambdaShape} : symbol-block 'lambda'
	define [LambdaShape sw] : glyph-construction
		local TURN (CAP * 0.1)
		local curviness 0.2
		include : dispiro
			widths.rhs sw
			flat SB 0    [heading UPWARD]
			curl SB TURN [heading UPWARD]
			quadcontrols 0 curviness
			g4   (MIDDLE - sw / 2) CAP [widths 0 (sw * 0.8)]
		include : dispiro
			widths.lhs sw
			flat RIGHTSB 0    [heading UPWARD]
			curl RIGHTSB TURN [heading UPWARD]
			quadcontrols 0 curviness
			g4   (MIDDLE + sw / 2) CAP [widths (sw * 0.8) 0]
	
		start-from (MIDDLE - sw / 2) CAP
		line-to (MIDDLE + sw / 2) CAP
		line-to MIDDLE (CAP - sw)
		
		if SLAB : begin
			include : CenterBottomSerif (SB + sw / 2 * CORRECTION_HX) 0 JUT
			tag-contour 'serif'
			include : CenterBottomSerif (RIGHTSB - sw / 2 * CORRECTION_HX) 0 JUT
			tag-contour 'serif'
	
	create-glyph 'Lambda' : glyph-construction
		assign-unicode 0x39B
		include capitalMarks
		include : LambdaShape STROKE
	alias 'latinLambda' 0x245 'Lambda'
	
	symbol-block 'lambda' : create-glyph 'lambda' : glyph-construction
		assign-unicode 0x3BB
		include bMarks
		
		local xTop : mix SB RIGHTSB 0.28
		local turnp : XH / (XH - DESCENDER)
		local xb : mix SB RIGHTSB 0.51
		local yb : mix XH 0 (0.05 * turnp)
		
		include : xStrand xTop CAP RIGHTSB 0 0.1 0.6 0.14
		include : halfXStrand SB 0 xb yb (0.1 * turnp) 0.4 (0.14 * turnp)
	
	list LambdaShape

symbol-block 'Delta'
	create-glyph 'Delta' : glyph-construction
		assign-unicode 0x394
		include glyphs.Lambda AS_BASE
		include : HBar (SB + HALFSTROKE) (RIGHTSB - HALFSTROKE) HALFSTROKE
		eject-contour 'serif'
	
	symbol-block 'delta' : create-glyph 'delta' : glyph-construction
		assign-unicode 0x3B4
		include bMarks
		
		local xNeck : mix SB RIGHTSB 0.07
		local bar : mix 0 XH 0.96
		local xOTLeft : mix SB RIGHTSB 0.5
		local fine : STROKE * 0.5
		
		local sma : SMALLSMOOTHA * bar / XH
		local smb : SMALLSMOOTHB * bar / XH
		
		include : dispiro
			widths.rhs
			g4   [mix MIDDLE RIGHTSB 0.85] ([mix XH CAP 0.8] - STROKE) [heading LEFTWARD]
			alsothru 0.5 0.7
			g4   MIDDLE (CAPO - STROKE)
			archv 2
			g4   (xNeck + STROKE) [mix (CAPO - STROKE) bar 0.5]
			arcvh 2
			g4   xOTLeft bar [heading RIGHTWARD]
			alsothruthem : list {0.25 0.05} {0.5 0.13}
			flat.ai (RIGHTSB - OX) (bar - smb)
			curl.ai (RIGHTSB - OX) sma
			arcvh
			g4.left.mid (MIDDLE + CORRECTION_OMIDS) O
			archv
			flat.ai (SB + OX) smb
			curl.ai (SB + OX) (bar - sma)
			arcvh
			g4   xOTLeft (bar - (STROKE - fine) / 2) [widths 0 fine]
	alias 'latindelta' 0x1E9F 'delta'
	turned 'turndelta' 0x18D 'delta' MIDDLE (XH / 2) pMarks

symbol-block 'epsilon and cyrze'
	define [SmallEpsilonShape top hook] : glyph-construction
		local midx : mix SB RIGHTSB 0.65
		local midy : top * BARPOS
		local sma : top - [mix (midy + HALFSTROKE) (top - O - STROKE) (SMOOTHB / (SMOOTHA + SMOOTHB))]
		local smb : mix (STROKE + O) (midy - HALFSTROKE) (SMOOTHB / (SMOOTHA + SMOOTHB))
		include : dispiro
			widths.lhs
			g4 RIGHTSB (top - [fallback hook SHOOK])
			hookstart top
			g4 (SB + OXE) (top - sma)
			arcvh
			flat MIDDLE (midy - HALFSTROKE)
			curl midx (midy - HALFSTROKE) [heading RIGHTWARD]
		include : dispiro
			widths.rhs
			g4 RIGHTSB [fallback hook SHOOK]
			hookstart 0
			g4 (SB + OXE) smb
			arcvh
			flat MIDDLE (midy + HALFSTROKE)
			curl midx (midy + HALFSTROKE) [heading RIGHTWARD]
	
	create-glyph 'epsilon' : glyph-construction
		assign-unicode 0x3B5
		include eMarks
		include : SmallEpsilonShape XH
	alias 'latinepsilon' 0x25B 'epsilon'
	create-glyph 'latinEpsilon' : glyph-construction
		assign-unicode 0x190
		include capitalMarks
		include : SmallEpsilonShape CAP
		
	define [CyrZeShape top hook] : glyph-construction
		local midx : mix RIGHTSB SB 0.65
		local midy : top * BARPOS
		local smb : top - [mix (midy + HALFSTROKE) (top - O - STROKE) (SMOOTHA / (SMOOTHA + SMOOTHB))]
		local sma : mix (STROKE + O) (midy - HALFSTROKE) (SMOOTHA / (SMOOTHA + SMOOTHB))
		include : dispiro
			widths.rhs
			g4 SB (top - [fallback hook SHOOK])
			hookstart top
			g4 (RIGHTSB - OXE) (top - smb)
			arcvh
			flat MIDDLE (midy - HALFSTROKE)
			curl midx (midy - HALFSTROKE) [heading LEFTWARD]
		include : dispiro
			widths.lhs
			g4 SB [fallback hook SHOOK]
			hookstart 0
			g4 (RIGHTSB - OXE) sma
			arcvh
			flat MIDDLE (midy + HALFSTROKE)
			curl midx (midy + HALFSTROKE) [heading LEFTWARD]
	
	create-glyph 'cyrZe' : glyph-construction
		assign-unicode 0x417
		include capitalMarks
		include : CyrZeShape CAP HOOK
	
	create-glyph 'cyrze' : glyph-construction
		assign-unicode 0x437
		include eMarks
		include : CyrZeShape XH
	alias 'revlatinepsilon' 0x25C 'cyrze'
	turned 'closeepsilon' 0x29A 'closeturnepsilon' MIDDLE (XH / 2)

symbol-block 'Theta'
	create-glyph 'Theta' : glyph-construction
		assign-unicode 0x398
		include capitalMarks
		include glyphs.O AS_BASE
		include : HBar (SB + STROKE * CORRECTION_HX - O * 5) (RIGHTSB - STROKE * CORRECTION_HX + O * 5) CAPMIDDLE
	create-glyph 'theta' : glyph-construction
		assign-unicode 0x3B8
		include bMarks
		include : OShape CAP 0 (SB - O) (RIGHTSB + O) STROKE (SMALLSMOOTHA * 100) (SMALLSMOOTHB * 100)
		include : HBar (SB + HALFSTROKE) (RIGHTSB - HALFSTROKE) CAPMIDDLE

symbol-block 'zeta and xi'
	create-glyph 'zeta' : glyph-construction
		assign-unicode 0x3B6
		include ifMarks
		include : HBar SB (RIGHTSB + O) (CAP - HALFSTROKE)
		include : dispiro
			widths.rhs
			g4 (RIGHTSB + O) (CAP - STROKE)
			bezcontrols 0.7 0.37 1 0.62
			g4 (SB + STROKE * CORRECTION_HX) [mix 0 CAP 0.27]
			alsothru 0.5 0.8
			g4 [mix SB RIGHTSB 0.5] STROKE
			archv
			g4.down.mid RIGHTSB [mix DESCENDER STROKE 0.5] [heading DOWNWARD]
			arcvh
			flat (RIGHTSB - (STROKE - [mix DESCENDER STROKE 0.5]) * 1.1) DESCENDER
			curl [mix SB RIGHTSB 0.5] DESCENDER [heading LEFTWARD]
	
	create-glyph 'xi' : glyph-construction
		assign-unicode 0x3BE
		include ifMarks
		include : HBar SB (RIGHTSB + O) (CAP - HALFSTROKE)
		
		local xbar : mix SB RIGHTSB 0.85
		local ybar : mix 0 CAP 0.55
		include : dispiro
			widths.rhs
			g4 xbar (CAP - STROKE)
			archv
			g4 (SB - O * 2 + STROKE * CORRECTION_HX) [mix (CAP - STROKE) ybar 0.6]
			arcvh
			g4.right.end xbar ybar
		include : dispiro
			widths.rhs
			g4.left.start xbar (ybar - STROKE)
			bezcontrols 0.7 0 1 0.63
			g4 (SB + STROKE * CORRECTION_HX) [mix 0 ybar 0.45]
			arcvh
			g4 [mix SB RIGHTSB 0.5] STROKE
			archv
			g4.down.mid RIGHTSB [mix DESCENDER STROKE 0.5] [heading DOWNWARD]
			arcvh
			flat (RIGHTSB - (STROKE - [mix DESCENDER STROKE 0.5]) * 1.1) DESCENDER
			curl [mix SB RIGHTSB 0.5] DESCENDER [heading LEFTWARD]

symbol-block 'mu' : create-glyph 'mu' : glyph-construction
	set-width WIDTH
	assign-unicode 0x3BC
	include pMarks
	include glyphs.u
	include : dispiro
		widths.rhs
		flat SB DESCENDER [heading UPWARD]
		curl SB (DESCENDER / 2) [heading UPWARD]
		straight.up.end SB SMALLSMOOTHB [widths.heading 0 [adviceBlackness 4] UPWARD]
	if SLAB : begin
		include : LeftwardTopSerif SB XH SIDEJUT

symbol-block 'Xi' : create-glyph 'Xi' : glyph-construction
	assign-unicode 0x39E
	include capitalMarks
	include : HBar [mix SB RIGHTSB 0.125] [mix RIGHTSB SB 0.125] [mix 0 CAP 0.54]
	include : HBar (SB + OX) (RIGHTSB - OX) (CAP - HALFSTROKE)
	include : HBar (SB + OX) (RIGHTSB - OX) (0 + HALFSTROKE)
	if SLAB : begin
		include : DownwardLeftSerif (SB + OX) CAP VJUT
		include : DownwardRightSerif (RIGHTSB - OX) CAP VJUT
		include : UpwardLeftSerif (SB + OX) 0 VJUT
		include : UpwardRightSerif (RIGHTSB - OX) 0 VJUT

define {PiShape} : symbol-block 'Pi'
	define [PiShape top bottom _shrink _fine] : glyph-construction
		local fine : fallback _fine STROKE
		local shrink : if SLAB 0 ([fallback _shrink 0.03] * (RIGHTSB - SB))
		include : HBarTop SB RIGHTSB top fine
		include : VBarLeft (SB + shrink) bottom (top - fine / 2) fine
		include : VBarRight (RIGHTSB - shrink) bottom (top - fine / 2) fine
		
		if SLAB : begin
			include : CenterBottomSerif (SB + shrink + fine * 0.5 * CORRECTION_HX) bottom JUT
			include : CenterBottomSerif (RIGHTSB - shrink - fine * 0.5 * CORRECTION_HX) bottom JUT
			include : CenterTopSerif (SB + shrink + fine * 0.5 * CORRECTION_HX) top JUT
			include : CenterTopSerif (RIGHTSB - shrink - fine * 0.5 * CORRECTION_HX) top JUT
	
	create-glyph 'Pi' : glyph-construction
		assign-unicode 0x3A0
		include capitalMarks
		include : PiShape CAP 0
	alias 'cyrPe' 0x41F 'Pi'
	
	create-glyph 'cyrpe.upright' : glyph-construction
		include eMarks
		include : PiShape XH 0
	create-glyph 'cyrpe.serbian' : glyph-construction
		include glyphs.u AS_BASE
		include glyphs.macronAbove
	italic-variant 'cyrpe' 0x43f
	
	list PiShape

symbol-block 'pi'
	create-glyph 'pi' : glyph-construction
		assign-unicode 0x3C0
		include eMarks
		include : HBarTop SB RIGHTSB XH
		local m : linreg 72 0.25 108 0.3 STROKE
		local m1 : mix SB RIGHTSB m
		include : dispiro
			widths.rhs
			straight.down.start (m1 + HALFSTROKE * CORRECTION_HX) XH [heading DOWNWARD]
			alsothru 0.5 0.85 important
			g4 [mix SB RIGHTSB 0.1] O
		local m2 : mix SB RIGHTSB (1 - m)
		local hook : HOOK * 0.8
		include : dispiro
			widths.center
			flat m2 XH [heading DOWNWARD]
			curl m2 hook
			arcvh
			flat (m2 + hook - HALFSTROKE) HALFSTROKE [heading RIGHTWARD]
			curl RIGHTSB HALFSTROKE [heading RIGHTWARD]

define {SigmaShape} : symbol-block 'Sigma'
	define [SigmaShape top bottom _fine] : glyph-construction
		local cor 1.15
		local fine : fallback _fine STROKE
		
		include : HBarTop SB RIGHTSB top fine
		include : HBarBottom SB RIGHTSB bottom fine
		
		local midx : mix SB RIGHTSB 0.4
		start-from SB (bottom + fine)
		line-to (SB + fine * cor) (bottom + fine)
		line-to (midx + fine * cor) [mix bottom top 0.5]
		line-to (SB + fine * cor) (top - fine)
		line-to SB (top - fine)
		line-to midx [mix bottom top 0.5]
		reverse-last
		
		if SLAB : begin
			include : DownwardRightSerif RIGHTSB top VJUT
			include : UpwardRightSerif RIGHTSB bottom VJUT
	
	create-glyph 'Sigma' : glyph-construction
		set-width WIDTH
		assign-unicode 0x3A3
		include capitalMarks
	
		include : SigmaShape CAP 0
	alias 'lstinSigma' 0x1A9 'Sigma'
	
	list SigmaShape

symbol-block 'Phi, phi and varphi'
	create-glyph 'Phi' : glyph-construction
		assign-unicode 0x3A6
		include capitalMarks
		local y1 : CAP * [if SLAB 0.175 0.125]
		local y2 : CAP * [if SLAB 0.825 0.875]
		include : VBar MIDDLE 0 (y1 + HALFSTROKE)
		include : OShape y2 y1 SB RIGHTSB MVERTSTROKE SMOOTHA SMOOTHB
		include : VBar MIDDLE y1 y2 MVERTSTROKE
		include : VBar MIDDLE (y2 - HALFSTROKE) CAP
		
		if SLAB : begin
			include : tagged 'serifMT' : CenterTopSerif MIDDLE CAP JUT
			include : tagged 'serifMB' : CenterBottomSerif MIDDLE 0 JUT
	alias 'cyrEf' 0x424 'Phi'
	
	create-glyph 'taillessphi' : glyph-construction
		assign-unicode 0x2C77
		include eMarks
		local x0 : mix SB RIGHTSB 0.1
		local y1 : mix 0 XH 0.75
		local x1 : SB + OX * 2
		local y3 : XH * 0.66
		local y4 : XH * 0.65
		include : dispiro
			widths.lhs MVERTSTROKE
			g4 x0 XH
			g4 x1 (XH * 0.55)
			arcvh
			g4 (MIDDLE + CORRECTION_OMIDS) O
			archv
			g4 (WIDTH - x1) (XH * 0.55)
			arcvh 8
			g4 [mix (WIDTH - x1) (MIDDLE - MVERTSTROKE / 2 * CORRECTION_HX) 0.6] XH [heading {.x 0.1 .y (-1)}]
			archv
			flat (MIDDLE - MVERTSTROKE / 2 * CORRECTION_HX) y3
			curl (MIDDLE - MVERTSTROKE / 2 * CORRECTION_HX) 0 [heading DOWNWARD]
	
	create-glyph 'phi' : glyph-construction
		assign-unicode 0x3C6
		include pMarks
		include glyphs.taillessphi
		include : VBar MIDDLE DESCENDER (MVERTSTROKE * 0.2)
	
	create-glyph 'varphi' : glyph-construction
		assign-unicode 0x3D5
		include ifMarks
		local y1 0
		local y2 XH
		include : VBar MIDDLE DESCENDER (y1 + HALFSTROKE)
		include : OShape y2 y1 SB RIGHTSB MVERTSTROKE nothing nothing nothing true
		include : VBar MIDDLE y1 y2 MVERTSTROKE
		include : VBar MIDDLE (y2 - HALFSTROKE) CAP
	
	create-glyph 'cyref' : glyph-construction
		assign-unicode 0x444
		include glyphs.varphi AS_BASE
		if SLAB : begin
			include : tagged 'serifMT' : CenterTopSerif MIDDLE CAP JUT
			include : tagged 'serifMB' : CenterBottomSerif MIDDLE DESCENDER JUT
	alias 'latinphi' 0x278 'cyref'

symbol-block 'Psi'
	create-glyph 'Psi' : glyph-construction
		assign-unicode 0x3A8
		include capitalMarks
		local y : CAP * 0.2
		local y2 : CAP * 0.8
		include : dispiro
			widths.lhs MVERTSTROKE
			flat SB y2 [heading DOWNWARD]
			curl SB (y + SMOOTHB)
			arcvh
			g4   MIDDLE y [heading RIGHTWARD]
			archv
			flat RIGHTSB (y + SMOOTHA)
			curl RIGHTSB y2 [heading UPWARD]
		include : VBar MIDDLE y CAP MVERTSTROKE
		include : VBar MIDDLE 0 (y + HALFSTROKE)
		if SLAB : begin
			include : tagged 'serifLT' : LeftwardTopSerif SB y2 SIDEJUT
			include : tagged 'serifRT' : RightwardTopSerif RIGHTSB y2 SIDEJUT
			include : tagged 'serifMT' : CenterTopSerif MIDDLE CAP JUT
			include : tagged 'serifMB' : CenterBottomSerif MIDDLE 0 JUT
	create-glyph 'psi' : glyph-construction
		assign-unicode 0x3C8
		include ifMarks
		local fine : adviceBlackness 3.5
		include : dispiro
			widths.lhs fine
			flat SB XH [heading DOWNWARD]
			curl SB SMALLSMOOTHB
			arcvh
			g4   MIDDLE O [heading RIGHTWARD]
			archv
			flat RIGHTSB SMALLSMOOTHA
			curl RIGHTSB XH [heading UPWARD]
		include : VBar MIDDLE 0 CAP fine
		include : VBar MIDDLE DESCENDER HALFSTROKE
		if SLAB : begin
			include : LeftwardTopSerif SB XH SIDEJUT
			tag-contour 'serifLT'
			if (para.italicangle === 0) : begin
				include : tagged 'serifRT' : RightwardTopSerif RIGHTSB XH SIDEJUT

symbol-block 'Omega'
	define [OmegaShape top sma smb ssma ssmb] : glyph-construction
		local fine : STROKE * 0.4
		include : dispiro
			g4 [mix SB RIGHTSB 0.4] STROKE [widths.heading fine 0 LEFTWARD]
			archv
			flat SB ssmb [widths 0 STROKE]
			curl SB (top - sma)
			arcvh
			g4   (MIDDLE - CORRECTION_OMIDS) (top - O)
			archv
			flat RIGHTSB (top - smb)
			curl RIGHTSB ssma
			arcvh
			g4   [mix RIGHTSB SB 0.4] STROKE [widths.heading fine 0 LEFTWARD]
		include : HBar SB [mix SB RIGHTSB 0.4] HALFSTROKE
		include : HBar [mix RIGHTSB SB 0.4] RIGHTSB HALFSTROKE
	
	create-glyph 'Omega' : glyph-construction
		assign-unicode 0x3A9
		include capitalMarks
		include : OmegaShape CAP SMOOTHA SMOOTHB SMALLSMOOTHA SMALLSMOOTHB
	
	turned 'latinUpsilon1' 0x1B1 'Omega' MIDDLE (CAP / 2)
	
	create-glyph 'latinupsilon1' : glyph-construction
		assign-unicode 0x28A
		include eMarks
		include : OmegaShape XH SMALLSMOOTHA SMALLSMOOTHB SMALLSMOOTHA SMALLSMOOTHB
		include : FlipAround MIDDLE (XH / 2)

symbol-block 'omega'
	create-glyph 'omega' : glyph-construction
		assign-unicode 0x3C9
		include eMarks
		local fine : adviceBlackness 3.25
		local x0 : mix SB RIGHTSB 0.1
		local y0 : XH - STROKE * 0.2
		local y1 : mix 0 XH 0.8
		local x1 : SB + OX * 2
		local y3 : XH / 2
		local y4 : XH * 0.65
		
		include : dispiro
			widths.lhs fine
			g4 x0 y0
			g4 x1 (XH / 2)
			arcvh 8
			g4 [mix x1 (MIDDLE + fine / 2 * CORRECTION_HX) 0.5] O [heading RIGHTWARD]
			archv 8
			flat (MIDDLE + fine / 2 * CORRECTION_HX) y3 [heading UPWARD]
			curl (MIDDLE + fine / 2 * CORRECTION_HX) y4 [heading UPWARD]
		include : dispiro
			widths.rhs fine
			g4 (WIDTH - x0) y0
			g4 (WIDTH - x1) (XH / 2)
			arcvh 8
			g4 [mix (WIDTH - x1) (MIDDLE - fine / 2 * CORRECTION_HX) 0.5] O [heading LEFTWARD]
			archv 8
			flat (MIDDLE - fine / 2 * CORRECTION_HX) y3 [heading UPWARD]
			curl (MIDDLE - fine / 2 * CORRECTION_HX) y4 [heading UPWARD]
	
	create-glyph 'pomega' : glyph-construction
		assign-unicode 0x3D6
		include glyphs.omega AS_BASE
		include : HBar SB RIGHTSB (XH - HALFSTROKE)
	
	create-glyph 'closeomega' : glyph-construction
		assign-unicode 0x277
		include eMarks
		local fine : adviceBlackness 3.25
		local x0 : MIDDLE - CORRECTION_OMIDS
		local y0 : XH - O
		local y1 : mix 0 XH 0.45
		local x1 : SB + OX * 2
		local y3 : XH / 2
		local y4 : XH * 0.65
		include : dispiro
			widths.rhs fine
			flat (MIDDLE + fine / 2 * CORRECTION_HX) y4 [heading DOWNWARD]
			curl (MIDDLE + fine / 2 * CORRECTION_HX) y3 [heading DOWNWARD]
			arcvh 8
			g4 [mix x1 (MIDDLE + fine / 2 * CORRECTION_HX) 0.5] O [heading LEFTWARD]
			archv 8
			g4 x1 y1
			arcvh
			g4 x0 y0
			archv
			g4 (WIDTH - x1) y1
			arcvh 8
			g4 [mix (WIDTH - x1) (MIDDLE - fine / 2 * CORRECTION_HX) 0.5] O [heading LEFTWARD]
			archv 8
			flat (MIDDLE - fine / 2 * CORRECTION_HX) y3 [heading UPWARD]
			curl (MIDDLE - fine / 2 * CORRECTION_HX) y4 [heading UPWARD]


###########################################################################################
# UNIFIED LETTERFORMS : CYRILLIC ORIGINALS
###########################################################################################
### cyrI and cyri
symbol-block 'CyrI'
	define [CyrIShape top] : glyph-construction
		local topstroke : adviceBlackness 4
		local halftopstroke : topstroke / 2
		include : dispiro
			widths.lhs
			flat RIGHTSB 0 [heading UPWARD]
			curl RIGHTSB (top * 0.4) [heading UPWARD]
			straight.up.end RIGHTSB top [widths.heading topstroke 0 UPWARD]
		include : dispiro
			widths.lhs
			flat SB top [heading DOWNWARD]
			curl SB (top * 0.6) [heading DOWNWARD]
			straight.down.end SB 0 [widths.heading topstroke 0 DOWNWARD]
		include : dispiro
			flat (RIGHTSB - halftopstroke) top [widths.heading 0 topstroke DOWNWARD]
			curl (SB + halftopstroke) 0 [widths.heading topstroke 0 DOWNWARD]
		include : AICyrISerifs top
	
	create-glyph 'cyrI' : glyph-construction
		assign-unicode 0x418
		include capitalMarks
		include : CyrIShape CAP
	
	create-glyph 'cyri.upright' : glyph-construction
		include eMarks
		include : CyrIShape XH
	
	create-glyph 'cyri.italic' : glyph-construction
		include glyphs.u AS_BASE
	
	italic-variant 'cyri' 0x438

symbol-block 'CyrTse'
	define [CyrTseShape top] : glyph-construction
		include : VBarLeft SB 0 top
		include : HBarBottom SB RIGHTSB 0
		include : VBarRight RIGHTSB 0 top
		include : CyrDescender RIGHTSB 0.05
		if SLAB : begin
			include : AIVSerifs top
			include : LeftwardBottomSerif SB 0 SIDEJUT
	
	create-glyph 'cyrTse' : glyph-construction
		assign-unicode 0x426
		include capitalMarks
		include : CyrTseShape CAP
	
	create-glyph 'cyrtse.upright' : glyph-construction
		include eMarks
		include : CyrTseShape XH
	create-glyph 'cyrtse.italic' : glyph-construction
		include eMarks
		include glyphs.u
		eject-contour 'serifLT'
		include : CyrDescender RIGHTSB 0.05
	italic-variant 'cyrtse' 0x446
	
	define [CyrDzheShape top] : glyph-construction
		include : VBarLeft SB 0 top
		include : HBarBottom SB RIGHTSB 0
		include : VBarRight RIGHTSB 0 top
		include : VBar MIDDLE DESCENDER STROKE
		if SLAB : begin
			include : AIVSerifs top
			include : LeftwardBottomSerif SB 0 SIDEJUT
			include : RightwardBottomSerif RIGHTSB 0 SIDEJUT
	
	create-glyph 'cyrDzhe' : glyph-construction
		assign-unicode 0x40F
		include ifMarks
		include : CyrDzheShape CAP
	
	create-glyph 'cyrdzhe.upright' : glyph-construction
		include pMarks
		include : CyrDzheShape XH
	create-glyph 'cyrdzhe.italic' : glyph-construction
		include glyphs.u AS_BASE
		include glyphs.barBelow
	italic-variant 'cyrdzhe' 0x45F

###########################################################################################
# UNIFIED LETTERFORMS : OTHER LATIN
###########################################################################################
symbol-block 'eszet'
	create-glyph 'eszet' : glyph-construction
		set-width WIDTH
		assign-unicode 0xDF
		include ifMarks
		local l : SB * 1
		include : dispiro
			widths.lhs
			g4 ([mix SB RIGHTSB 0.75] + HALFSTROKE * CORRECTION_HX) (CAP - HOOK)
			hookstart (CAP - O)
			flat l XH
			curl l 0 [heading DOWNWARD]
		local t : mix 0 CAP 0.7
		local tm : [mix DESCENDER t 0.625] + HALFSTROKE
		local tl : [mix l RIGHTSB 0.35] + HALFSTROKE * CORRECTION_HX
		include : HBarTop (l + 1) (RIGHTSB - HALFSTROKE * 1.2 - OX) t
		include : dispiro
			widths.rhs
			flat tl tm [heading RIGHTWARD]
			curl (tl + 1) tm [heading RIGHTWARD]
			g2 (RIGHTSB - OX * 1.5) [mix DESCENDER tm 0.70]
			g2 (RIGHTSB - OX * 1.5) [mix DESCENDER tm 0.67]
			alsothru 0.5 0.75
			g4 [mix SB RIGHTSB 0.35] DESCENDER
		include : dispiro
			widths.center (STROKE * 1.1)
			corner tl (tm - STROKE) [heading UPWARD]
			corner (RIGHTSB - HALFSTROKE * 1.2 - OX) t [heading UPWARD]
		set this.italicHookAttachPoint {.x (l + HALFSTROKE) .y 0}
	
	create-glyph 'Eszet' : glyph-construction
		assign-unicode 0x1E9E
		include capitalMarks
		include : dispiro
			widths.lhs
			g4 (RIGHTSB + O * 2) (CAP - SMOOTHB)
			hookstart (CAP - O)
			flat SB XH
			curl SB 0 [heading DOWNWARD]
		local ymiddle : [mix 0 CAP 0.5] - HALFSTROKE
		include : dispiro
			widths.rhs
			g4   (RIGHTSB - ymiddle / 2 - STROKE * 0.75) (ymiddle + STROKE)
			archv
			g4   (RIGHTSB - O) [mix 0 (ymiddle + STROKE) 0.5]
			arcvh
			flat (RIGHTSB - ymiddle / 2 - HALFSTROKE) 0
			curl (SB + STROKE - O * 3) 0 [heading LEFTWARD]
		include : dispiro
			widths.rhs
			g4 (RIGHTSB + O * 2) (CAP - SMOOTHB)
			g4 (RIGHTSB - ymiddle / 2 - STROKE * 0.75) (ymiddle + STROKE) [widths STROKE 0]

symbol-block 'Digraphs'
	create-glyph 'AE' : glyph-construction
		set-width WIDTH
		assign-unicode 0xC6
		include capitalMarks
		
		local eleft : MIDDLE - MVERTSTROKE * 0.25
		local turn : XH * 0.1
		
		# A half
		include : dispiro
			widths.rhs MVERTSTROKE
			flat SB 0 [heading UPWARD]
			curl SB (CAP * 0.1) [heading UPWARD]
			quadcontrols 0 0.3 6 unimportant
			g4   (eleft - HALFSTROKE) CAP [widths.rhs (MVERTSTROKE * 0.8)]
	
		start-from (eleft - HALFSTROKE) CAP
		line-to    eleft CAP
		line-to    eleft (CAP - MVERTSTROKE)
		include : HBarTop  (SB + MVERTSTROKE)  (eleft + MVERTSTROKE / 2) (XH / 2) MVERTSTROKE
		
		# E half
		include : VBarLeft eleft 0 CAP MVERTSTROKE
		include : HBarTop (eleft - O) RIGHTSB CAP
		include : HBar (eleft - O) (RIGHTSB - MVERTSTROKE / 4) (CAP * 0.54)
		include : HBarBottom (eleft - O) RIGHTSB 0
	
	define [OEShape top] : glyph-construction
		local eleft MIDDLE
		
		# O half
		
		include : dispiro
			widths.lhs MVERTSTROKE 0
			straight.left.start eleft top [heading LEFTWARD]
			archv
			flat  SB (top - SMOOTHA)
			curl  SB SMOOTHB
			arcvh
			straight.right.end eleft 0 [heading RIGHTWARD]
		
		# E half
		include : VBarLeft eleft 0 top MVERTSTROKE
		include : HBarTop (eleft - O) RIGHTSB top
		include : HBar (eleft - O) (RIGHTSB - MVERTSTROKE / 4) (top * 0.54)
		include : HBarBottom (eleft - O) RIGHTSB 0
	
	create-glyph 'OE' : glyph-construction
		set-width WIDTH
		assign-unicode 0x152
		include capitalMarks
		include : OEShape CAP
	create-glyph 'smcpOE' : glyph-construction
		assign-unicode 0x276
		include eMarks
		include : OEShape XH
	
	define aeepart : glyph-construction
		local eLeft : MIDDLE - MVERTSTROKE / 2 * CORRECTION_HX + 0.1
		local eMiddle : [mix eLeft (RIGHTSB - OX * 2) 0.5] - MVERTSTROKE * globalTransform.yx
		local barbottom (XH * EBARPOS)
		
		local sma : SMALLSMOOTHA * 0.6
		local smb : SMALLSMOOTHB * 0.6
		include : dispiro
			widths.lhs MVERTSTROKE
			flat (RIGHTSB - OX * 2) barbottom [heading UPWARD]
			curl (RIGHTSB - OX * 2) (XH - smb)
			arcvh
			g4   eMiddle XO
			archv
			flat eLeft (XH - sma)
			curl eLeft smb
			hookend O true MVERTSTROKE
			g4   (RIGHTSB - OX * 2) (AHOOK)
		include : HBarBottom (eLeft + MVERTSTROKE / 2) (RIGHTSB - OX * 2 - MVERTSTROKE / 2) barbottom
	
	define aeapart : glyph-construction
		local bartop (XH * BARPOS * 1.02 + HALFSTROKE)
		local abarRight : MIDDLE + MVERTSTROKE / 2 * CORRECTION_HX - 0.1
		local lowmiddle : mix (SB + OX * 2) abarRight 0.5
		local barsmooth : mix SB abarRight 0.7
		
		local sma : SMALLSMOOTHA * 0.6
		local smb : SMALLSMOOTHB * 0.6
	
		include : dispiro
			widths.rhs MVERTSTROKE
			g4 (SB + OX) (XH - AHOOK)
			hookstart XO true MVERTSTROKE
			flat abarRight (XH - smb)
			curl abarRight smb
			arcvh
			g4 lowmiddle O [heading LEFTWARD]
			archv
			g4 (SB + OX * 2) [mix 0 bartop 0.45]
			arcvh
			flat barsmooth bartop
			curl (abarRight - 1) bartop [heading RIGHTWARD]
	
	define oeopart : glyph-construction
		local abarRight : MIDDLE + MVERTSTROKE / 2 * CORRECTION_HX
		include : OShape XH 0 (SB + OX) (abarRight + OX) MVERTSTROKE (SMALLSMOOTHA * 0.6) (SMALLSMOOTHB * 0.6)
	
	
	create-glyph 'ae' : glyph-construction
		set-width WIDTH
		assign-unicode 0xE6
		include eMarks
		include aeepart
		include aeapart
	turned nothing 0x1D02 'ae' MIDDLE (XH / 2)
	
	create-glyph 'oe' : glyph-construction
		set-width WIDTH
		assign-unicode 0x153
		include eMarks
		include aeepart
		include oeopart
	
	create-glyph 'db' : glyph-construction
		set-width WIDTH
		assign-unicode 0x238
		include bMarks
		include oeopart
		include : FlipAround MIDDLE (XH / 2)
		include oeopart
		include : VBar MIDDLE (XH / 2) CAP MVERTSTROKE
		if SLAB : begin
			include : LeftwardTopSerif (MIDDLE - MVERTSTROKE / 2 * CORRECTION_HX) CAP SIDEJUT
	
	create-glyph 'qp' : glyph-construction
		set-width WIDTH
		assign-unicode 0x239
		include pMarks
		include oeopart
		include : FlipAround MIDDLE (XH / 2)
		include oeopart
		include : VBar MIDDLE DESCENDER (XH / 2) MVERTSTROKE
		if SLAB : begin
			include : CenterBottomSerif MIDDLE DESCENDER JUT
	
	create-glyph 'OU' : glyph-construction
		assign-unicode 0x222
		include capitalMarks
		include : OShape (CAP * BARPOS + HALFSTROKE) 0 SB RIGHTSB nothing SMOOTHA SMOOTHB
		include : dispiro
			widths.lhs
			flat SB CAP [heading DOWNWARD]
			curl SB (CAP * BARPOS - O - HALFSTROKE + SMOOTHB)
			arcvh
			g4 (MIDDLE + CORRECTION_OMIDS) (CAP * BARPOS - O - HALFSTROKE)
			archv
			flat RIGHTSB (CAP * BARPOS - O - HALFSTROKE + SMOOTHA)
			curl RIGHTSB CAP [heading UPWARD]
	
	create-glyph 'ou' : glyph-construction
		assign-unicode 0x223
		include bMarks
		include : OShape XH 0 SB RIGHTSB
		include : dispiro
			widths.lhs
			flat SB CAP [heading DOWNWARD]
			curl SB (XH - O - STROKE + SMOOTHB)
			arcvh
			g4 (MIDDLE + CORRECTION_OMIDS) (XH - O - STROKE)
			archv
			flat RIGHTSB (XH - O - STROKE + SMOOTHA)
			curl RIGHTSB CAP [heading UPWARD]
	
	create-glyph 'IJ' : glyph-construction
		assign-unicode 0x132
		include capitalMarks
		include : create-glyph : glyph-construction
			include glyphs.'I.straight'
			apply-transform : Translate (SB - MIDDLE + HALFSTROKE * CORRECTION_HX) 0
		include : create-glyph : glyph-construction
			include glyphs.'J.shorthook'
			apply-transform : Translate JBALANCE2 0
	
	create-glyph 'ij' : glyph-construction
		assign-unicode 0x133
		include ifMarks
		include : create-glyph : glyph-construction
			include glyphs.'dotlessi.straight' AS_BASE
			include glyphs.dotAbove
			apply-transform : Translate (SB * 1.5 - MIDDLE + HALFSTROKE * CORRECTION_HX) 0
		include : create-glyph : glyph-construction
			include glyphs.'dotlessj.straight' AS_BASE
			include glyphs.dotAbove
			apply-transform : Translate (RIGHTSB - SB * 0.5 - MIDDLE - JBALANCE - HALFSTROKE * CORRECTION_HX) 0

symbol-block 'Ezh'
	define [EzhShape top bot pleft hookless] : glyph-construction
		local cor : 1.2 * CORRECTION_HX
		local yMidBar : mix bot top 0.6
		local ezhLeft : mix SB RIGHTSB [fallback pleft 0.2]
		local ezhRight : mix SB RIGHTSB 0.925
		include : HBarTop SB ezhRight top
		
		start-from ezhLeft yMidBar
		line-to (ezhLeft + STROKE * cor) (yMidBar - HALFSTROKE)
		line-to (ezhLeft + STROKE * cor) yMidBar
		line-to ezhRight (top - STROKE)
		line-to (ezhRight - STROKE * cor) (top - STROKE)
		reverse-last
		
		include : dispiro
			widths.rhs
			flat ezhLeft yMidBar [heading RIGHTWARD]
			curl MIDDLE yMidBar
			archv
			g4   RIGHTSB [mix yMidBar bot 0.5] [if [not hookless] important [heading DOWNWARD]]
			if hookless {} : list
				hookend bot
				g4 SB (bot + SHOOK)
		
		if SLAB : begin
			include : DownwardLeftSerif SB top VJUT
	
	define [RevEzhShape top bot pleft hookless] : glyph-construction
		local cor : 1.2 * CORRECTION_HX
		local yMidBar : mix bot top 0.6
		local ezhRight : mix RIGHTSB SB [fallback pleft 0.2]
		local ezhLeft : mix RIGHTSB SB 0.925
		include : HBarTop ezhLeft RIGHTSB top
		
		start-from ezhRight yMidBar
		line-to (ezhRight - STROKE * cor) (yMidBar - HALFSTROKE)
		line-to (ezhRight - STROKE * cor) yMidBar
		line-to ezhLeft (top - STROKE)
		line-to (ezhLeft + STROKE * cor) (top - STROKE)
		
		include : dispiro
			widths.lhs
			flat ezhRight yMidBar [heading LEFTWARD]
			curl MIDDLE yMidBar
			archv
			g4   SB [mix yMidBar bot 0.5] [if [not hookless] important [heading DOWNWARD]]
			if hookless {} : list
				hookend bot
				g4 RIGHTSB (bot + SHOOK)
		if SLAB : begin
			include : DownwardRightSerif RIGHTSB top VJUT
	
	create-glyph 'Ezh' : glyph-construction
		set-width WIDTH
		assign-unicode 0x1B7
		include capitalMarks
		include : EzhShape CAP 0
	
	create-glyph 'ezh' : glyph-construction
		set-width WIDTH
		assign-unicode 0x292
		include pMarks
		include : EzhShape XH DESCENDER
	
	create-glyph 'revEzh' : glyph-construction
		assign-unicode 0x1B8
		include capitalMarks
		include : RevEzhShape CAP 0
	
	create-glyph 'revezh' : glyph-construction
		assign-unicode 0x1B9
		include pMarks
		include : RevEzhShape XH DESCENDER
	
	create-glyph 'lyogh' : glyph-construction
		assign-unicode 0x26E
		include ifMarks
		include : EzhShape XH DESCENDER 0.4
		include : VBarLeft SB (XH * 0.1) CAP
	
	create-glyph 'ezhtail' : glyph-construction
		assign-unicode 0x1BA
		local b : mix DESCENDER XH 0.25
		include : EzhShape XH b nothing true
		local y : mix [mix b XH 0.6] b 0.5
		include : dispiro
			widths.rhs
			g4.down.start RIGHTSB y [heading DOWNWARD]
			arcvh
			flat [mix SB RIGHTSB 0.45] b
			curl [mix SB RIGHTSB 0.4] b
			archv
			g4 (SB + STROKE * CORRECTION_HX) [mix (DESCENDER + STROKE) b 0.5]
			arcvh
			flat [mix SB RIGHTSB 0.4] (DESCENDER + STROKE)
			curl RIGHTSB (DESCENDER + STROKE)
	
	create-glyph 'ezhcurlytail' : glyph-construction
		assign-unicode 0x293
		include eMarks
		include : EzhShape XH DESCENDER nothing true
		local fine : adviceBlackness 3
		local rinner : (XH * 0.4 - fine * 1.5) / 2
		local m1 : RIGHTSB - STROKE * CORRECTION_HX
		local x2 : RIGHTSB - HALFSTROKE
		local y2 DESCENDER
		include : dispiro
			widths.lhs
			flat m1 [mix [mix DESCENDER XH 0.6] DESCENDER 0.5] [heading DOWNWARD]
			curl m1 ([mix [mix DESCENDER XH 0.6] DESCENDER 0.5] - 1) [heading DOWNWARD]
			CurlyTail fine rinner m1 DESCENDER SB x2 y2

symbol-block 'Glottal stop'
	create-glyph 'glottalstop' : glyph-construction
		assign-unicode 0x294
		include bMarks
		include : dispiro
			widths.rhs
			g4 SB (CAP - HOOK)
			hookstart CAPO
			g4 RIGHTSB (CAP - [adviceGlottalStopSmooth CAP 1])
			alsothru 0.5 0.45 [widths (ESS / 2) (ESS / 2)]
			flat (MIDDLE - HALFSTROKE * CORRECTION_HX) (XH * 0.3) [widths STROKE 0]
			curl (MIDDLE - HALFSTROKE * CORRECTION_HX) 0 [heading DOWNWARD]
		if SLAB : begin
			include : CenterBottomSerif MIDDLE 0 JUT
	
	create-glyph 'revglottalstop' : glyph-construction
		assign-unicode 0x295
		include bMarks
		include : dispiro
			widths.lhs
			g4 RIGHTSB (CAP - HOOK)
			hookstart CAPO
			g4 SB (CAP - [adviceGlottalStopSmooth CAP (-1)])
			alsothru 0.5 0.45 [widths (ESS / 2) (ESS / 2)]
			flat (MIDDLE + HALFSTROKE * CORRECTION_HX) (XH * 0.3) [widths 0 STROKE]
			curl (MIDDLE + HALFSTROKE * CORRECTION_HX) 0 [heading DOWNWARD]
		if SLAB : begin
			include : CenterBottomSerif MIDDLE 0 JUT
	
	create-glyph 'smallglottalstop' : glyph-construction
		assign-unicode 0x242
		include bMarks
		include : dispiro
			widths.rhs
			g4 SB (XH - HOOK)
			hookstart XO
			g4 RIGHTSB (XH - [adviceGlottalStopSmooth XH 1])
			alsothru 0.5 0.45 [widths (ESS / 2) (ESS / 2)]
			flat (MIDDLE - HALFSTROKE * CORRECTION_HX) (XH * 0.15) [widths STROKE 0]
			curl (MIDDLE - HALFSTROKE * CORRECTION_HX) 0 [heading DOWNWARD]
		if SLAB : begin
			include : CenterBottomSerif MIDDLE 0 JUT
	
	create-glyph 'invglottalstopbar' : glyph-construction
		assign-unicode 0x1BE
		include eMarks
		include : dispiro
			widths.lhs
			g4 RIGHTSB (XH - HOOK)
			hookstart XO
			g4 SB (XH - [adviceGlottalStopSmooth XH 1])
			alsothru 0.5 0.45 [widths (ESS / 2) (ESS / 2)]
			flat (MIDDLE + HALFSTROKE * CORRECTION_HX) (XH * 0.15) [widths 0 STROKE]
			curl (MIDDLE + HALFSTROKE * CORRECTION_HX) 0 [heading DOWNWARD]
		include : HOverlayBar (MIDDLE - LONGJUT * 0.6) (MIDDLE + LONGJUT * 0.6) (XH * 0.25)
		include : FlipAround MIDDLE (XH / 2)
	
	create-glyph 'fineglottalstop' : glyph-construction
		include bMarks
		local fine : markHalfStroke * 2
		include : dispiro
			widths.rhs fine
			g4 SB (CAP - HOOK)
			hookstart CAPO
			g4 RIGHTSB (CAP - [adviceGlottalStopSmooth CAP 1])
			alsothru 0.5 0.45 [widths markHalfStroke markHalfStroke]
			flat (MIDDLE - fine / 2 * CORRECTION_HX) (XH * 0.3) [widths fine 0]
			curl (MIDDLE - fine / 2 * CORRECTION_HX) 0 [heading DOWNWARD]
		if SLAB : begin
			include : CenterBottomSerif MIDDLE 0 JUT fine
	
	create-glyph 'finerevglottalstop' : glyph-construction
		include bMarks
		local fine : markHalfStroke * 2
		include : dispiro
			widths.lhs fine
			g4 RIGHTSB (CAP - HOOK)
			hookstart CAPO
			g4 SB (CAP - [adviceGlottalStopSmooth CAP (-1)])
			alsothru 0.5 0.45 [widths markHalfStroke markHalfStroke]
			flat (MIDDLE + fine / 2 * CORRECTION_HX) (XH * 0.3) [widths 0 fine]
			curl (MIDDLE + fine / 2 * CORRECTION_HX) 0 [heading DOWNWARD]
		if SLAB : begin
			include : CenterBottomSerif MIDDLE 0 JUT fine
	alias 'capglottalstop' 0x241 'glottalstop'
	turned 'invglottalstop' 0x296 'revglottalstop' MIDDLE (CAP / 2)