###### EXTENDED LATIN CHARACTERS
###### AND PHONETIC LETTERS

create-glyph 'AE' : glyph-construction {
	set-width WIDTH
	assign-unicode 0xC6
	include capitalMarks
	
	local sw : adviceBlackness 3.5
	local eleft : MIDDLE - sw * 0.25
	local turn : XH * 0.1
	
	# A half
	
	include : create-stroke
		:.start-from SB 0
		:.heads-to   UPWARD
		:.set-width  0 sw
		:.line-to    SB turn
		:.heads-to   UPWARD
		:.curve-to   SB [mix turn CAP 0.27] [eleft - HALFSTROKE] CAP
		:.set-width  0 [sw * 0.8]
	
	include : create-stroke 
		:.start-from [SB + sw] [XH / 2]
		:.heads-to   RIGHTWARD
		:.set-width  0 sw
		:.line-to    [eleft + sw / 2] [XH / 2]
		:.heads-to   RIGHTWARD
	
	# E half
	include : create-stroke :.start-from eleft 0 :.heads-to UPWARD :.set-width 0 sw 
		:.line-to eleft CAP :.heads-to UPWARD
	include : create-stroke :.start-from [eleft - HALFSTROKE] CAP :.set-width 0 STROKE :.heads-to RIGHTWARD
		:.line-to RIGHTSB CAP :.heads-to RIGHTWARD
	include : create-stroke :.start-from eleft [CAP * 0.54] :.set-width HALFSTROKE HALFSTROKE :.heads-to RIGHTWARD
		:.line-to [RIGHTSB - sw / 4] [CAP * 0.54] :.heads-to RIGHTWARD
	include : create-stroke :.start-from eleft 0 :.set-width STROKE 0 :.heads-to RIGHTWARD
		:.line-to RIGHTSB 0 :.heads-to RIGHTWARD
}

create-glyph 'OE' : glyph-construction {
	set-width WIDTH
	assign-unicode 0x152
	include capitalMarks
	
	local sw : adviceBlackness 3.5
	local eleft MIDDLE
	
	# O half
	
	include : create-stroke
		:.start-from [eleft + 1] CAP
		:.set-width  sw 0
		:.line-to    [eleft - OMIDCOR_S] CAP
		:.arc-hv-to  SB [CAP - SMOOTHA]
		:.line-to    SB SMOOTHB
		:.arc-vh-to  eleft 0
		:.line-to    [eleft + 1] 0
		:.heads-to   RIGHTWARD
	
	# E half
	include : create-stroke :.start-from eleft 0 :.heads-to UPWARD :.set-width 0 sw 
		:.line-to eleft CAP :.heads-to UPWARD
	include : create-stroke :.start-from eleft CAP :.set-width 0 STROKE :.heads-to RIGHTWARD
		:.line-to RIGHTSB CAP :.heads-to RIGHTWARD
	include : create-stroke :.start-from eleft [CAP * 0.54] :.set-width HALFSTROKE HALFSTROKE :.heads-to RIGHTWARD
		:.line-to [RIGHTSB - sw / 4] [CAP * 0.54] :.heads-to RIGHTWARD
	include : create-stroke :.start-from eleft 0 :.set-width STROKE 0 :.heads-to RIGHTWARD
		:.line-to RIGHTSB 0 :.heads-to RIGHTWARD
}

create-glyph 'ae-epart' : glyph-construction {
	dont-export
	local sw : adviceBlackness 3.25
	local eLeft : MIDDLE - sw / 2 * ITALICCOR
	local eMiddle : [mix eLeft [RIGHTSB - O] 0.5] - sw * globalTransform.yx
	local barbottom [XH * EBARPOS]
	
	local hookx [RIGHTSB - O * 2 - OXHOOK + TAILADJX * globalTransform.yx]
	local eHookMiddle [mix eLeft hookx 0.5]
	
	local sma : SMALLSMOOTHA * 0.6
	local smb : SMALLSMOOTHB * 0.6
	
	include : create-stroke
		:.start-from [RIGHTSB - O * 2] barbottom
		:.heads-to   UPWARD
		:.set-width  sw 0
		:.line-to    [RIGHTSB - O * 2] [XH - smb]
		:.arc-vh-to  eMiddle XO
		:.arc-hv-to  eLeft [XH - sma]
		:.line-to    eLeft smb
		:.arc-vh-to  eHookMiddle O
		:.curve-to   [mix eHookMiddle hookx KAPPA_HOOK] O hookx [SHOOK - TAILADJY * globalTransform.yx]
	include : create-stroke
		:.start-from [eLeft + sw / 2] barbottom
		:.set-width  sw 0
		:.heads-to   RIGHTWARD
		:.line-to    [RIGHTSB - sw / 2] barbottom
		:.heads-to   RIGHTWARD
}
create-glyph 'ae-apart' : glyph-construction {
	dont-export
	local sw : adviceBlackness 3.25
	
	local bartop [XH * BARPOS + sw]
	local abarRight : MIDDLE + sw / 2 * ITALICCOR
	local m1        : mix [SB + OXHOOK] abarRight 0.5
	local lowmiddle : [mix [SB + sw] [abarRight - sw] 0.5] + sw * globalTransform.yx
	local barsmooth : mix SB abarRight 0.6
	
	local sma : SMALLSMOOTHA * 0.6
	local smb : SMALLSMOOTHB * 0.6
	
	include : create-stroke 
		:.start-from abarRight [XH - smb]
		:.set-width sw 0
		:.arc-vh-to m1 XO
		:.curve-to [mix m1 SB KAPPA_HOOK] XO [SB + OXHOOK] [XH - SHOOK]
	include : create-stroke
		:.start-from abarRight smb
		:.set-width 0 sw
		:.arc-vh-to lowmiddle O
		:.arc-hv-to [SB + O * 2] [mix 0 bartop [smb / [sma + smb]]]
		:.arc-vh-to barsmooth bartop
		:.line-to abarRight bartop
		:.heads-to RIGHTWARD
}
create-glyph 'oe-opart' : glyph-construction {
	dont-export
	local sw : adviceBlackness 3.25
	
	local abarRight : MIDDLE + sw / 2 * ITALICCOR
	local m1        : mix [SB + O] abarRight 0.5
	
	local sma : SMALLSMOOTHA * 0.6
	local smb : SMALLSMOOTHB * 0.6
	
	include : create-stroke
		:.start-from abarRight smb
		:.set-width 0 sw
		:.arc-vh-to [m1 + sw * globalTransform.yx] O
		:.arc-hv-to [SB + O * 2] smb
		:.line-to   [SB + O * 2] [XH - sma]
		:.arc-vh-to [m1 - sw * globalTransform.yx] [XH - O]
		:.arc-hv-to abarRight [XH - smb]
}

create-glyph 'ae' : glyph-construction {
	set-width WIDTH
	assign-unicode 0xE6
	include eMarks
	include glyphs.ae-epart
	include glyphs.ae-apart
}
create-glyph 'oe' : glyph-construction {
	set-width WIDTH
	assign-unicode 0x153
	include eMarks
	include glyphs.ae-epart
	include glyphs.oe-opart
}

create-glyph 'Eth' : glyph-construction {
	assign-unicode 0xD0
	
	include glyphs.D AS_BASE
	include : create-stroke
		:.start-from [SB * 0.3] [CAP * 0.54]
		:.set-width  HALFSTROKE HALFSTROKE
		:.heads-to   RIGHTWARD
		:.line-to    [mix [SB + STROKE] [RIGHTSB - STROKE] 0.55] [CAP * 0.54]
		:.heads-to   RIGHTWARD
}
create-glyph 'Dcroat' : glyph-construction {
	assign-unicode 0x110
	include glyphs.Eth AS_BASE
}

create-glyph 'eth' : glyph-construction {
	set-width WIDTH
	assign-unicode 0xF0
	include bMarks
	
	include : smallo [CAP * 0.6] 0 SB RIGHTSB
	local ymiddlea : [CAP * 0.6 + SMALLSMOOTHA - SMALLSMOOTHB] / 2
	include : create-stroke
		:.start-from [RIGHTSB - O] ymiddlea
		:.set-width  STROKE 0
		:.curve-to   [RIGHTSB - O] [mix ymiddlea CAP 0.8] [SB + STROKE * 1.1] CAP
	
	local sw : 0.5 * [adviceBlackness 4]
	
	include : create-stroke
		:.start-from [mix SB RIGHTSB 0.1] [mix XH CAP [-0.1]]
		:.set-width  sw sw
		:.line-to    [mix SB RIGHTSB 0.95] [mix XH CAP 0.3]
}
create-glyph 'dcroat' : glyph-construction {
	assign-unicode 0x111
	
	include glyphs.d AS_BASE
	local sw : 0.5 * [adviceBlackness 5]
	include : create-stroke
		:.start-from [mix [SB + STROKE] [RIGHTSB - STROKE] 0.5] [mix XH CAP 0.45]
		:.set-width  sw sw
		:.heads-to   RIGHTWARD
		:.line-to    [mix RIGHTSB WIDTH 0.7 ] [mix XH CAP 0.45]
		:.heads-to   RIGHTWARD
}

create-glyph 'Oslash' : glyph-construction {
	assign-unicode 0xD8
	
	local fine : adviceBlackness 10
	
	include glyphs.O AS_BASE
	include : create-stroke
		:.start-from [SB + O + fine] [mix CAP 0 1.05]
		:.set-width  fine fine
		:.line-to    [RIGHTSB - O - fine] [mix 0 CAP 1.05]
}
create-glyph 'oslash' : glyph-construction {
	assign-unicode 0xF8
	
	local fine : adviceBlackness 10
	
	include glyphs.o AS_BASE
	include : create-stroke
		:.start-from [SB + O + fine] [mix XH 0 1.05]
		:.set-width  fine fine
		:.line-to    [RIGHTSB - O - fine] [mix 0 XH 1.05]
}

create-glyph 'Thorn' : glyph-construction {
	set-width WIDTH
	assign-unicode 0xDE
	include capitalMarks
	
	local bowlTop [CAP * 0.77]
	local bowlBottom [CAP * 0.23]
	local bkappa [COKAPPA - 0.2]
	
	local turn : mix bowlTop bowlBottom 0.5
	local turnRadius : [bowlTop - bowlBottom] / 2
	
	include : create-stroke
		:.start-from [SB * 1.25 + HALFSTROKE * 0.1] bowlTop
		:.heads-to   RIGHTWARD
		:.set-width  0 STROKE
		:.line-to    [RIGHTSB - turnRadius] bowlTop
		:.arc-hv-to  [RIGHTSB - O] turn
		:.arc-vh-to  [RIGHTSB - turnRadius] bowlBottom
		:.line-to    [SB * 1.25 + HALFSTROKE * 0.1] bowlBottom
		:.heads-to   LEFTWARD
	
	include : create-stroke 
		:.start-from [SB * 1.25] 0
		:.heads-to   UPWARD
		:.set-width  0 STROKE
		:.line-to    [SB * 1.25] CAP
		:.heads-to   UPWARD
}
create-glyph 'thorn' : glyph-construction {
	assign-unicode 0xFE
	
	include glyphs.b AS_BASE
	include glyphs.p
	include ifMarks
}

create-glyph 'eszet.upright' : glyph-construction {
	set-width WIDTH
	dont-export
	include bMarks
	
	local yTopTurn [CAP * 0.62 + HALFSTROKE]
	local yBottomTurn [CAP * 0.41]
	
	local xTopTurn : Math.min [mix [SB + STROKE] RIGHTSB 0.75] [RIGHTSB - STROKE * 0.77]
	local xMiddleTurn : [mix [SB + STROKE] RIGHTSB 0.15] + HALFSTROKE
	local xBottomTurn : RIGHTSB - O - HALFSTROKE
	local xBottomFinal [mix [SB + STROKE] RIGHTSB 0.4]
	
	include : create-stroke
		:.start-from [SB + HALFSTROKE] 0
		:.set-width  HALFSTROKE HALFSTROKE
		:.heads-to   UPWARD
		:.line-to    [SB + HALFSTROKE] [CAP - SMOOTHA - HALFSTROKE]
		:.arc-vh-to  [mix [SB + HALFSTROKE] xTopTurn 0.5] [CAP - O - HALFSTROKE]
		:.heads-to   RIGHTWARD
		:.arc-hv-to  xTopTurn [yTopTurn + HALFSTROKE]
		:.heads-to   DOWNWARD
		:.line-to    xTopTurn [yTopTurn - HALFSTROKE]
		:.heads-to   DOWNWARD
	include : create-stroke
		:.start-from [xTopTurn + HALFSTROKE] yTopTurn
		:.heads-to   LEFTWARD
		:.set-width  HALFSTROKE HALFSTROKE
		:.line-to    [xMiddleTurn + [yTopTurn - yBottomTurn] / 2] yTopTurn
		:.arc-hv-to  xMiddleTurn [mix yTopTurn yBottomTurn 0.5]
		:.arc-vh-to  [mix xMiddleTurn xBottomTurn 0.5] yBottomTurn
		:.arc-hv-to  xBottomTurn [mix [yBottomTurn + HALFSTROKE] 0 0.475]
		:.arc-vh-to  xBottomFinal HALFSTROKE
		:.line-to    [SB + STROKE * 1.25] HALFSTROKE
		:.heads-to   LEFTWARD
		:.set-samples 2
	
	set this.italicHookAttachPoint (.x [SB + HALFSTROKE] .y 0)
}
create-glyph 'eszet.italic' : glyph-construction {
	set-width WIDTH
	dont-export

	include glyphs.'eszet.upright' AS_BASE
	include ifMarks
	include : eshHook glyphs.'eszet.upright'.italicHookAttachPoint
}
create-glyph 'eszet' : glyph-construction {
	set-width WIDTH
	assign-unicode 0xDF
	
	if [para.italicangle > 0] {
		then : include glyphs.'eszet.italic' AS_BASE
		else : include glyphs.'eszet.upright' AS_BASE
	}
}

define [EzhShape top bot pleft] : glyph-construction {
	local cor 1.2
	local yMidBar : mix bot top 0.6
	local ezhLeft : mix SB RIGHTSB [fallback pleft 0.2]
	local ezhRight : mix SB RIGHTSB 0.925
	include : create-stroke :.start-from SB top :.heads-to RIGHTWARD :.set-width 0 STROKE
		:.line-to ezhRight top :.heads-to RIGHTWARD :.to-outline
	
	start-from ezhLeft yMidBar
	line-to [ezhLeft + STROKE * cor] [yMidBar - HALFSTROKE]
	line-to [ezhLeft + STROKE * cor] yMidBar
	line-to ezhRight [top - STROKE]
	line-to [ezhRight - STROKE * cor] [top - STROKE]
	reverse-last
	
	include : create-stroke 
		:.start-from ezhLeft yMidBar
		:.heads-to   RIGHTWARD 
		:.set-width  0 STROKE
		:.line-to    MIDDLE yMidBar
		:.arc-hv-to  RIGHTSB [mix yMidBar bot 0.5]
		:.to-outline
	include : XSHookLower bot SB [mix SB RIGHTSB 0.465] RIGHTSB [[yMidBar - bot] / 2] SHOOK
}
create-glyph 'Ezh' : glyph-construction {
	set-width WIDTH
	assign-unicode 0x1B7
	include capitalMarks
	include : EzhShape CAP 0
}
create-glyph 'ezh' : glyph-construction {
	set-width WIDTH
	assign-unicode 0x292
	include pMarks
	include : EzhShape XH DESCENDER
}
create-glyph 'esh' : glyph-construction {
	assign-unicode 0x283
	include glyphs.'longs.italic' AS_BASE
}
alias 'latinkappa' 0x138 'kappa'
create-glyph 'Hbar' : glyph-construction {
	assign-unicode 0x126
	
	include glyphs.H AS_BASE
	include : HOverlayBar [mix SB 0 0.7] [mix RIGHTSB WIDTH 0.7] [mix CAPMIDDLE CAP 0.45]
}
create-glyph 'hbar' : glyph-construction {
	assign-unicode 0x127
	
	include glyphs.h AS_BASE
	include : HOverlayBar [mix SB 0 0.7] [mix SB RIGHTSB 0.5] [mix XH CAP 0.45]
}
create-glyph 'Tbar' : glyph-construction {
	assign-unicode 0x166
	
	include glyphs.T AS_BASE
	include : HOverlayBar [mix MIDDLE SB 0.8] [mix MIDDLE RIGHTSB 0.8] [mix 0 CAP 0.45]
}
create-glyph 'tbar' : glyph-construction {
	assign-unicode 0x167
	
	include glyphs.t AS_BASE
	include : HOverlayBar [[mix MIDDLE SB 0.7] - TBALANCE * 0.5] [[mix MIDDLE RIGHTSB 0.7] - TBALANCE * 0.5] [mix 0 XH 0.6]
}
create-glyph 'eng' : glyph-construction {
	assign-unicode 0x14B
	
	include glyphs.n AS_BASE
	include : VerticalHook [RIGHTSB - HALFSTROKE * ITALICCOR] 0 [-HOOK * 1.2] HOOK
}
create-glyph 'Eng' : glyph-construction {
	assign-unicode 0x14A
	include capitalMarks
	
	include : nShoulder [SB + STROKE] MIDDLE RIGHTSB [STROKE * 0.3] CAP [HOOK + HALFSTROKE + O] SMOOTHA SMOOTHB
	include : VerticalHook [RIGHTSB - HALFSTROKE * ITALICCOR] [HOOK + HALFSTROKE + O] [Math.max [[SB - RIGHTSB] / 2 + HALFSTROKE] [-HOOK * 1.2]] HOOK
	include : VBar [SB + HALFSTROKE * ITALICCOR] 0 CAP
}
create-glyph 'napostrophe' : glyph-construction {
	assign-unicode 0x149
	include glyphs.commaAbove
	apply-transform : Translate [WIDTH + SB - MIDDLE] 0
	include glyphs.n AS_BASE
}
create-glyph 'IJ' : glyph-construction {
	assign-unicode 0x132
	include capitalMarks
	include : create-glyph : glyph-construction {
		include glyphs.'I.straight'
		apply-transform : Translate [SB - MIDDLE + HALFSTROKE * ITALICCOR] 0
	}
	include : create-glyph : glyph-construction {
		include glyphs.'J.shorthook'
		apply-transform : Translate JBALANCE 0
	}
}
create-glyph 'ij' : glyph-construction {
	assign-unicode 0x133
	include ifMarks
	include : create-glyph : glyph-construction {
		include glyphs.'dotlessi.straight' AS_BASE
		include glyphs.dotAbove
		apply-transform : Translate [SB * 1.5 - MIDDLE + HALFSTROKE * ITALICCOR] 0
	}
	include : create-glyph : glyph-construction {
		include glyphs.'dotlessj.straight' AS_BASE
		include glyphs.dotAbove
		apply-transform : Translate [RIGHTSB - SB * 0.5 - MIDDLE - JBALANCE - HALFSTROKE * ITALICCOR] 0
	}
}

create-glyph 'Ldot' : glyph-construction {
	assign-unicode 0x13F
	include glyphs.L AS_BASE
	include : list {
		Ring [[mix STROKE CAP 0.5] + DOTRADIUS] [[mix STROKE CAP 0.5] - DOTRADIUS] [[mix SB RIGHTSB 0.65] - DOTRADIUS] [[mix SB RIGHTSB 0.65] + DOTRADIUS]
	}
}
create-glyph 'ldot' : glyph-construction {
	assign-unicode 0x140
	include glyphs.l AS_BASE
	apply-transform : Translate [-DOTRADIUS / 2] 0
	include : list {
		Ring [[mix STROKE CAP 0.5] + DOTRADIUS] [[mix STROKE CAP 0.5] - DOTRADIUS] [[mix SB RIGHTSB 1] - DOTSIZE] [mix SB RIGHTSB 1]
	}
}
create-glyph 'Lslash' : glyph-construction {
	assign-unicode 0x141
	include glyphs.L AS_BASE
	local fine : 0.5 * [adviceBlackness 5]
	local middle : mix STROKE CAP 0.5
	include : create-stroke
		:.start-from [mix 0 SB 0.5] [middle - LONGJUT * 0.4]
		:.set-width  fine fine
		:.line-to    [1.6 * LONGJUT + [mix 0 SB 0.5]] [middle + LONGJUT * 0.4]
}
create-glyph 'lslash' : glyph-construction {
	assign-unicode 0x142
	include glyphs.l AS_BASE
	local fine : 0.5 * [adviceBlackness 5]
	local middle : mix 0 CAP 0.55
	local middlex [tp [Upright] glyphs.l.anchors.above].x
	include : create-stroke
		:.start-from [middlex - LONGJUT * 0.8] [middle - LONGJUT * 0.4]
		:.set-width  fine fine
		:.line-to    [middlex + LONGJUT * 0.8] [middle + LONGJUT * 0.4]
}
# bdot and ddot 's dots are closer to the glyph
create-glyph 'bdot' : glyph-construction {
	include glyphs.dotAbove
	apply-transform : Translate [WIDTH + HALFSTROKE] 0
	include glyphs.b AS_BASE
	assign-unicode 0x1E03
}
create-glyph 'ddot' : glyph-construction {
	include glyphs.dotAbove
	apply-transform : Translate [WIDTH - HALFSTROKE] 0
	include glyphs.d AS_BASE
	assign-unicode 0x1E0B
}

create-glyph 'scripta' : glyph-construction {
	assign-unicode 0x0251
	include eMarks
	include : oRight
	start-from RIGHTSB 0
	line-to    [RIGHTSB - STROKE * ITALICCOR] 0
	line-to    [RIGHTSB - STROKE * ITALICCOR] [XH - STROKE / 2]
	line-to    RIGHTSB [XH - O]
}
create-glyph 'ftail' : glyph-construction {
	assign-unicode 0x192
	include glyphs.'longs.italic' AS_BASE
	include : fBar
}
create-glyph 'iogonek.dotless' : glyph-construction {
	include glyphs.dotlessi AS_BASE
	include glyphs.ogonekBelow
}
create-glyph 'revS' : glyph-construction {
	assign-unicode 0x1A7
	include capitalMarks
	include : twoHookUpper CAP SMOOTHB SHOOK
	include : XSHookLower 0 RIGHTSB MIDDLE SB SMOOTHB HOOK
	include : sStrand SMOOTHB [CAP - SMOOTHB] 0.2 0.45
}
create-glyph 'revs' : glyph-construction {
	assign-unicode 0x1A8
	include eMarks
	include glyphs.'cyrghe.italic'
}
create-glyph 'latinupsilon1' : glyph-construction {
	assign-unicode 0x28A
	include eMarks
	include : OmegaShape XH SMALLSMOOTHA SMALLSMOOTHB SMALLSMOOTHA SMALLSMOOTHB
	include : FlipAround MIDDLE [XH / 2]
}
create-glyph 'latinUpsilon2' : glyph-construction {
	assign-unicode 0x1B2
	include eMarks
	include : create-stroke
		:.start-from SB CAP
		:.heads-to   DOWNWARD
		:.set-width  STROKE 0
		:.line-to    SB SMOOTHB
		:.arc-vh-to  [MIDDLE + OMIDCOR_S] O
		:.arc-hv-to  RIGHTSB SMOOTHA
		:.line-to    RIGHTSB [CAP - HOOK - HALFSTROKE]
		:.heads-to   UPWARD
	include : VerticalHook [RIGHTSB - HALFSTROKE * ITALICCOR] [CAP - HOOK - HALFSTROKE] [-[RIGHTSB - HALFSTROKE * ITALICCOR - MIDDLE]] [-HOOK]
}
create-glyph 'latinupsilon2' : glyph-construction {
	assign-unicode 0x28B
	include eMarks
	include : create-stroke
		:.start-from SB XH
		:.heads-to   DOWNWARD
		:.set-width  STROKE 0
		:.line-to    SB SMALLSMOOTHB
		:.arc-vh-to  [MIDDLE + OMIDCOR_S] O
		:.arc-hv-to  RIGHTSB SMALLSMOOTHA
		:.line-to    RIGHTSB [XH - HOOK - HALFSTROKE]
		:.heads-to   UPWARD
	include : VerticalHook [RIGHTSB - HALFSTROKE * ITALICCOR] [XH - HOOK - HALFSTROKE] [-[RIGHTSB - HALFSTROKE * ITALICCOR - MIDDLE]] [-HOOK]
}
create-glyph 'scriptg' : glyph-construction {
	assign-unicode 0x261
	include pMarks
	include : oRight
	include : sHookLower DESCENDER SMALLSMOOTHA SHOOK
	include : VBarRight RIGHTSB [DESCENDER + SMALLSMOOTHA] XH
}
define [RamsHornShape bottom top] : glyph-construction {
	local hf : [adviceBlackness 4] / 2
	local d : hf * 2 + WIDTH * 0.05

	
	include : create-stroke
		:.start-from [SB + HALFSTROKE * ITALICCOR + O] top
		:.heads-to   DOWNWARD
		:.set-width  HALFSTROKE HALFSTROKE
		:.curve-to   [MIDDLE + d - hf] [mix bottom top 0.3] [MIDDLE + d - hf] [bottom + d * [1 - globalTransform.yx * 0.5]]
		:.set-width  hf hf
		:.arc-vh-to  [MIDDLE + OMIDCOR * hf * 2] [bottom + hf]
		:.arc-hv-to  [MIDDLE - d + hf] [bottom + d * [1 + globalTransform.yx * 0.5]]
		:.curve-to   [MIDDLE - d + hf] [mix bottom top 0.3] [RIGHTSB - HALFSTROKE * ITALICCOR - O] top
		:.set-width  HALFSTROKE HALFSTROKE
		:.heads-to   UPWARD
}
create-glyph 'latingamma' : glyph-construction {
	assign-unicode 0x263
	include pMarks
	include : RamsHornShape DESCENDER XH
}
create-glyph 'ramshorn' : glyph-construction {
	assign-unicode 0x264
	include eMarks
	include : RamsHornShape 0 XH
}
# legged
create-glyph 'rlongleg' : glyph-construction {
	assign-unicode 0x27C
	include pMarks
	include glyphs.r
	include : VBarLeft [SB + RBALANCE] DESCENDER 0
}
# Left-tail
create-glyph 'nltail' : glyph-construction {
	assign-unicode 0x272
	include glyphs.n AS_BASE
	include : VerticalHook [SB + HALFSTROKE * ITALICCOR] 0 [-HOOK] HOOK
}
# Retroflex-tail
create-glyph 'srtail' : glyph-construction {
	assign-unicode 0x282
	include glyphs.rtailBR
	apply-transform : Upright
	apply-transform : Translate [SB + STROKE * ITALICCOR] 0
	apply-transform : Italify
	include pMarks
	include glyphs.s
	include : VBarLeft SB 0 SHOOK
}
create-glyph 'lrtail' : glyph-construction {
	assign-unicode 0x26D
	include glyphs.rtailBR
	apply-transform : Translate [MIDDLE + HALFSTROKE * ITALICCOR] 0
	include glyphs.'l.hooky'
	include ifMarks
}
create-glyph 'rrtail' : glyph-construction {
	assign-unicode 0x27D
	include pMarks
	include glyphs.r
	include : create-glyph : glyph-construction {
		include glyphs.rtailBR
		apply-transform : Upright
		apply-transform : Translate [SB + RBALANCE + STROKE * ITALICCOR] 0
		apply-transform : Italify
	}
}
create-glyph 'turnrrtail' : glyph-construction {
	assign-unicode 0x27B
	include pMarks
	include glyphs.r
	include : FlipAround MIDDLE [XH / 2]
	include : create-glyph : glyph-construction {
		include glyphs.rtailBR
		apply-transform : Upright
		apply-transform : Translate [RIGHTSB - RBALANCE] 0
		apply-transform : Italify
	}
}
create-glyph 'trtail' : glyph-construction {
	assign-unicode 0x288
	include ifMarks
	include : SmallTShape CAP DESCENDER
}
# Curly tail
define [CurlyTail fine wide rinner m1 y1 bottom _right x1 x2 y2] : glyph-construction {
	local right : _right - fine * [if [_right > m1] 1 [-1]]
	local mid : mix [mix m1 right 0.5] [right - rinner * [if [_right > m1] 1 [-1]]] 0.4
	local midb : mix [mix m1 right 0.5] [right - rinner * [if [_right > m1] 1 [-1]]] 0.3
	include : create-stroke
		:.start-from m1 y1
		:.heads-to   DOWNWARD
		:.set-width  [if [_right > m1] 0 wide] [if [_right > m1] wide 0]
		:.arc-vh-to  midb [bottom + fine + O]
		:.set-width  [if [_right > m1] 0 fine] [if [_right > m1] fine 0]
		:.arc-hv-to  right [bottom + fine + rinner]
		:.arc-vh-to  mid [bottom + fine + rinner * 2 - O]
		:.curve-to   x1 [bottom + fine + rinner * 2 - O] x2 y2
}
define [HCurlyTail fine wide rinner left m1 _right x1 x2 y2] : glyph-construction {
	local right : _right - fine
	local mid : right - rinner + O
	include : create-stroke
		:.start-from left wide
		:.heads-to   RIGHTWARD
		:.set-width  0 wide
		:.line-to    m1 wide
		:.arc-hv-to  right [wide + rinner]
		:.set-width  0 fine
		:.arc-vh-to  mid [wide + rinner * 2 - O]
		:.curve-to   x1 [wide + rinner * 2 - O] x2 y2
}
create-glyph 'ncurlytail' : glyph-construction {
	assign-unicode 0x235
	local fine : adviceBlackness 4.5
	local rinner : fine * 0.35
	local wide STROKE
	local m1 : RIGHTSB - rinner * 2
	local x1 : mix SB m1 0.8
	local x2 : mix SB m1 0.5
	local y2 : -fine
	include eMarks
	include : VBarLeft SB 0 XH wide
	include : nShoulder [SB + wide * ITALICCOR] [mix SB m1 0.5] m1 [STROKE * 0.4] nothing [fine * 2] nothing nothing wide
	include : CurlyTail fine wide rinner m1 [fine * 2] 0 [m1 + rinner * 2 + fine] x1 x2 y2
}
create-glyph 'dcurlytail' : glyph-construction {
	assign-unicode 0x221
	local fine : adviceBlackness 4.5
	local rinner : fine * 0.35
	local wide STROKE
	local m1 : RIGHTSB - rinner * 2
	local x1 : mix SB m1 0.8
	local x2 : mix SB m1 0.5
	local y2 : -fine * 1.5
	include eMarks
	include : VBarRight m1 [fine * 2] CAP
	include : list {
		ORing XO O [SB + O] [m1 - HALFSTROKE] SMALLSMOOTHA SMALLSMOOTHB 0
		ORing [XO - STROKE] [O + STROKE] [SB + STROKE * ITALICCOR + O] [m1 - STROKE * ITALICCOR] [SMALLSMOOTHA - STROKE] [SMALLSMOOTHB - STROKE] 0
	}
	reverse-last
	include : CurlyTail fine wide rinner m1 [fine * 2] 0 [m1 + rinner * 2 + fine] x1 x2 y2
}
create-glyph 'lcurlytail' : glyph-construction {
	assign-unicode 0x234
	include bMarks
	local fine : adviceBlackness 4.5
	local rinner : fine * 0.6
	local m1 : MIDDLE + HALFSTROKE * ITALICCOR
	local x1 : mix SB m1 0.8
	local x2 : mix SB m1 0.25
	local y2 : - fine
	include : leftwardTopSerif MIDDLE CAP LONGJUT
	include : VBarRight m1 [fine * 2] [CAP - STROKE]
	include : CurlyTail fine STROKE rinner m1 [fine * 2] 0 [m1 + LONGJUT ] x1 x2 y2
}
create-glyph 'jcurlytail' : glyph-construction {
	assign-unicode 0x29D
	include pMarks
	set-anchor 'above' BASE [MIDDLE + JBALANCE] XH
	local fine : adviceBlackness 4.25
	local rinner : fine * 0.6
	local m1 : MIDDLE - HALFSTROKE * ITALICCOR + JBALANCE
	local x1 : mix RIGHTSB m1 0.75
	local x2 : mix RIGHTSB m1 0.25
	local y2 : DESCENDER + O
	include : leftwardTopSerif [MIDDLE + JBALANCE] XH LONGJUT
	include : VBarLeft m1 [DESCENDER + fine * 3] [XH - STROKE]
	include : CurlyTail fine STROKE rinner m1 [DESCENDER + fine * 3] DESCENDER [m1 - LONGJUT] x1 x2 y2
	include glyphs.dotAbove
}
create-glyph 'eshcurlytail' : glyph-construction {
	assign-unicode 0x286
	include ifMarks
	local fine : adviceBlackness 4.25
	local rinner : fine * 0.6
	local m1 : MIDDLE - HALFSTROKE * ITALICCOR 
	local x1 : mix RIGHTSB m1 0.75
	local x2 : mix RIGHTSB m1 0.25
	local y2 : DESCENDER + O
	include glyphs.'longs.upright'
	include : CurlyTail fine STROKE rinner m1 [DESCENDER + fine * 3] DESCENDER [m1 - LONGJUT ] x1 x2 y2
}
create-glyph 'tcurlytail' : glyph-construction {
	assign-unicode 0x236
	include bMarks
	local fine : adviceBlackness 4.25
	local rinner : fine * 0.5
	local m1 : MIDDLE - TBALANCE - HALFSTROKE
	local x1 m1
	local x2 : mix SB m1 0.4
	local y2 : -fine
	include : HBarTop [m1 + HALFSTROKE - LONGJUT + TBALANCE2] [m1 + HALFSTROKE + LONGJUT + TBALANCE2] XH
	include : VBarLeft m1 CAP [fine * 2]
	include : CurlyTail fine STROKE rinner [m1 + STROKE * ITALICCOR] [fine * 2] 0 [m1 + STROKE * ITALICCOR + LONGJUT] x1 x2 y2
}
create-glyph 'ccurlytail' : glyph-construction {
	assign-unicode 0x255
	include eMarks
	local rinner : [[XH * 0.425] - STROKE * 1.5] / 2
	
	include : create-stroke
		:.start-from [RIGHTSB - OXHOOK] [XH - HOOK]
		:.set-width  STROKE 0
		:.curve-to   [MIDDLE + KAPPA_HOOK * [MIDDLE - para.sb]] XO [MIDDLE - OMIDCOR_S] XO
		:.arc-hv-to  [SB + O] [XH - SMALLSMOOTHA]
		:.line-to    [SB + O] SMALLSMOOTHB
		:.heads-to   DOWNWARD

	local m1 : SB + O + STROKE * ITALICCOR
	local x1 : mix SB RIGHTSB 0.25
	local x2 : SB + HALFSTROKE
	local y2 : -XH * 0.1
	include : CurlyTail STROKE STROKE rinner m1 SMALLSMOOTHB 0 RIGHTSB x1 x2 y2
}
create-glyph 'ezhcurlytail' : glyph-construction {
	assign-unicode 0x293
	include eMarks
	local rinner : [[XH * 0.425] - STROKE * 1.5] / 2
	
	include : EzhShape XH DESCENDER
	this.contours.pop
	this.contours.pop

	local m1 : RIGHTSB - STROKE * ITALICCOR
	local x1 : mix RIGHTSB SB 0.25
	local x2 : RIGHTSB - HALFSTROKE
	local y2 DESCENDER
	include : CurlyTail STROKE STROKE rinner m1 [mix [mix DESCENDER XH 0.6] DESCENDER 0.5] DESCENDER SB x1 x2 y2
}
create-glyph 'zcurlytail' : glyph-construction {
	assign-unicode 0x291
	include eMarks
	
	local cor 1.2
	local fine : adviceBlackness 4.25
	local x1 : mix [SB + STROKE] RIGHTSB 0.55
	local x2 : mix [SB + STROKE] RIGHTSB 0.3
	local y2 : -XH * 0.2
	local rinner : fine * 0.3
	local m1 : RIGHTSB - fine / 2 - rinner + O
	include : HCurlyTail fine STROKE rinner SB m1 [RIGHTSB + fine / 2] x1 x2 y2
	
	include : HBarTop SB RIGHTSB XH
	
	start-from SB STROKE
	line-to [SB + STROKE * cor] STROKE
	line-to RIGHTSB [XH - STROKE]
	line-to [RIGHTSB - STROKE * cor] [XH - STROKE]
	reverse-last
}
# Hooktop
define [HooktopLeftBar stroke] : glyph-construction {
	include : create-stroke
		:.start-from [RIGHTSB - OXHOOK] [CAP - HOOK]
		:.set-width  [fallback stroke STROKE] 0
		:.curve-to   [MIDDLE + KAPPA_HOOK * [MIDDLE - para.sb]] CAPO [MIDDLE - OMIDCOR_S] CAPO
		:.arc-hv-to  SB [CAP - SMALLSMOOTHA]
		:.line-to    SB 0
		:.heads-to   DOWNWARD
}
create-glyph 'hooktoph' : glyph-construction {
	assign-unicode 0x266
	include bMarks
	include : nShoulder [SB + STROKE * ITALICCOR] MIDDLE RIGHTSB [STROKE * 0.4]
	include : HooktopLeftBar
}
create-glyph 'hooktopb' : glyph-construction {
	assign-unicode 0x253
	include bMarks
	include : oLeft
	include : HooktopLeftBar
}
# Belted
define [Belt] : glyph-construction {
	local fine : adviceBlackness 4.5
	local r : XH * 0.05
	include : create-stroke
		:.start-from MIDDLE [CAPMIDDLE + r]
		:.set-width  0 fine
		:.heads-to   LEFTWARD
		:.line-to    [MIDDLE - HALFSTROKE - r * 1.5] [CAPMIDDLE + r]
		:.arc-hv-to  [MIDDLE - HALFSTROKE - r * 2.5] CAPMIDDLE
		:.arc-vh-to  [MIDDLE - HALFSTROKE - r * 1.5] [CAPMIDDLE - r]
		:.line-to    [MIDDLE + HALFSTROKE + r * 1.5 + fine] [CAPMIDDLE - r]
}
create-glyph 'lbelt' : glyph-construction {
	assign-unicode 0x26C
	include glyphs.'l.serifed' AS_BASE
	include : Belt
}
create-glyph 'lbeltrtail' : glyph-construction {
	assign-unicode 0xA78E
	include glyphs.lrtail AS_BASE
	include : Belt
}
create-glyph 'ltildeover' : glyph-construction {
	assign-unicode 0x26B
	include glyphs.'l.serifed' AS_BASE
	include : create-glyph : glyph-construction {
		include glyphs.tildeAbove
		apply-transform : Upright
		apply-transform : Translate [MIDDLE - markMiddle] [CAP * 0.525 - [mix aboveMarkBot aboveMarkTop 0.5]]
		apply-transform : Italify
	}
}
# glottalstop
create-glyph 'glottalstop' : glyph-construction {
	assign-unicode 0x294
	include bMarks
	local m : mix [DOTSIZE + STROKE] [XH / 2] 0.5
	include : xsStrand [MIDDLE - HALFSTROKE * ITALICCOR] m RIGHTSB [CAP - SMOOTHB]
	include : VBar MIDDLE 0 m
	include : twoHookUpper CAP SMOOTHB HOOK
}
create-glyph 'revglottalstop' : glyph-construction {
	assign-unicode 0x295
	include bMarks
	local m : mix [DOTSIZE + STROKE] [XH / 2] 0.5
	include : xsStrand SB [CAP - SMOOTHB] [MIDDLE + HALFSTROKE * ITALICCOR] m
	include : create-stroke
		:.start-from [MIDDLE + HALFSTROKE * ITALICCOR] m
		:.set-width  0 STROKE
		:.line-to    [MIDDLE + HALFSTROKE * ITALICCOR] 0
		:.heads-to   DOWNWARD
	include : sHookUpper CAP SMOOTHB HOOK
}
create-glyph 'fineglottalstop' : glyph-construction {
	include bMarks
	local m : mix [DOTSIZE + STROKE] [XH / 2] 0.5
	include : xsStrand [MIDDLE - markHalfStroke * ITALICCOR] m RIGHTSB [CAP - SMOOTHB] markHalfStroke markHalfStroke
	include : VBar MIDDLE 0 m [markHalfStroke * 2]
	include : twoHookUpper CAP SMOOTHB HOOK nothing [markHalfStroke * 2]
}
create-glyph 'finerevglottalstop' : glyph-construction {
	include bMarks
	local m : mix [DOTSIZE + STROKE] [XH / 2] 0.5
	include : xsStrand SB [CAP - SMOOTHB] [MIDDLE + markHalfStroke * ITALICCOR] m markHalfStroke markHalfStroke
	include : create-stroke
		:.start-from [MIDDLE + markHalfStroke * ITALICCOR] m
		:.set-width  0 [markHalfStroke * 2]
		:.line-to    [MIDDLE + markHalfStroke * ITALICCOR] 0
		:.heads-to   DOWNWARD
	include : sHookUpper CAP SMOOTHB HOOK nothing [markHalfStroke * 2]
}
# Clicks
create-glyph 'palatoalveolarclick' : glyph-construction {
	assign-unicode 0x1C2
	include glyphs.bar AS_BASE
	include glyphs.equal
}
# Barred
create-glyph 'ibar' : glyph-construction {
	assign-unicode 0x268
	include glyphs.'dotlessi.serifed' AS_BASE
	include glyphs.dotAbove
	include : HOverlayBar [mix MIDDLE SB 0.75] [mix MIDDLE RIGHTSB 0.75] [XH * 0.525]
}
create-glyph 'ubar' : glyph-construction {
	assign-unicode 0x289
	include glyphs.u AS_BASE
	include : HOverlayBar [mix 0 SB 0.5] [mix WIDTH RIGHTSB 0.5] [XH * 0.525]
}
# Flap & fishhook & viby
create-glyph 'rflap' : glyph-construction {
	assign-unicode 0x27E
	include eMarks
	local rhookx : RIGHTSB + JBALANCE / 2
	local rmiddle : [mix [SB + RBALANCE + STROKE] [rhookx - HALFSTROKE] 0.5] - OMIDCOR_S

	include : create-stroke
		:.start-from rhookx [XH - RHOOK]
		:.set-width  STROKE 0
		:.curve-to   [mix rmiddle rhookx KAPPA_AHOOK] XO rmiddle XO
		:.arc-hv-to  [SB + RBALANCE] [XH - SMALLSMOOTHA]
		:.line-to    [SB + RBALANCE] 0
		:.heads-to   DOWNWARD
}
create-glyph 'ifishhook' : glyph-construction {
	assign-unicode 0x27F
	include pMarks
	include : VBar MIDDLE DESCENDER [XH - HOOK]
	include : VerticalHook MIDDLE [XH - HOOK] [-LONGJUT + ILBALANCE] [-HOOK + HALFSTROKE]
	apply-transform : Translate ILBALANCE 0
}
create-glyph 'iviby' : glyph-construction {
	assign-unicode 0x285
	include pMarks
	include : VBar MIDDLE 0 [XH - HOOK - HALFSTROKE]
	include : VerticalHook MIDDLE [XH - HOOK - HALFSTROKE] [-LONGJUT] [-HOOK]
	include : VerticalHook MIDDLE 0 LONGJUT HOOK
}
# SMCPs
create-glyph 'smcpR' : glyph-construction {
	assign-unicode 0x280
	include eMarks
	include : RShape XH
}
create-glyph 'smcpG' : glyph-construction {
	assign-unicode 0x262
	include eMarks
	include : GShape XH SMOOTHA SMOOTHB
}
create-glyph 'smcpL' : glyph-construction {
	assign-unicode 0x29F
	include eMarks
	include : LShape XH
}
create-glyph 'smcpI' : glyph-construction {
	assign-unicode 0x26A
	include eMarks
	include : ISerifShape XH
}
create-glyph 'smcpturnE' : glyph-construction {
	assign-unicode 0x2C7B
	include eMarks
	include : EShape XH
	include : FlipAround MIDDLE [XH / 2]
}
# Others
create-glyph 'turnf' : glyph-construction {
	assign-unicode 0x25F
	include glyphs.'longs.upright'
	include : fBar
	include : FlipAround MIDDLE [XH / 2]
	include pMarks
}
create-glyph 'lyogh' : glyph-construction {
	assign-unicode 0x26E
	include ifMarks
	include : EzhShape XH DESCENDER 0.4
	include : VBarLeft SB [XH * 0.1] CAP
}
# Aliases
alias 'latinLambda' 0x245 'Lambda'
alias 'latindelta' 0x1E9F 'delta'
alias 'latinepsilon' 0x25B 'epsilon'
alias 'closeturnepsilon' 0x25E 'cyrve.italic'
alias 'smcpB' 0x299 'cyrve.upright'
alias 'latinphi' 0x278 'varphi'
alias 'bulleye' 0x298 'zero.dotted'
alias 'dentalclick' 0x1C0 'bar'
dual 'alveolarlateralclick' 0x1C1 'bar' [WIDTH * 0.35]
alias 'alveolarclick' 0x1C3 'exclam'
alias 'smcpH' 0x29C 'cyren'
alias 'latiniota' 0x269 'dotlessi.italic'
# Turned glyphs
turned nothing 0x250 'a' MIDDLE [XH / 2]
turned nothing 0x252 'scripta' MIDDLE [XH / 2]
turned nothing 0x254 'c' MIDDLE [XH / 2]
turned nothing 0x18E 'E' MIDDLE [CAP / 2]
turned nothing 0x1DD 'e' MIDDLE [XH / 2]
turned 'schwa' 0x259 'e' MIDDLE [XH / 2]
turned nothing 0x1D77 'g' MIDDLE [mix DESCENDER XH 0.5]
turned nothing 0x265 'h' MIDDLE [XH / 2] pMarks
turned nothing 0x29E 'k' MIDDLE [XH / 2] pMarks
turned nothing 0x26F 'm' MIDDLE [XH / 2]
turned nothing 0x279 'r' MIDDLE [XH / 2] [anchorDeriv eMarks (.anchors (.bottomright (.x RIGHTSB - RBALANCE .y 0)))]
turned nothing 0x27A 'rlongleg' MIDDLE [XH / 2] [anchorDeriv bMarks (.anchors (.bottomright (.x RIGHTSB - RBALANCE .y 0)))]
turned 'invsmcpR' 0x281 'cyrya' MIDDLE [XH / 2]
turned nothing 0x287 't' MIDDLE [XH / 2] pMarks
turned nothing 0x28C 'v' MIDDLE [XH / 2]
turned nothing 0x28D 'w' MIDDLE [XH / 2]
turned nothing 0x28E 'y' MIDDLE [XH / 2] bMarks
turned nothing 0x1D02 'ae' MIDDLE [XH / 2]
turned nothing 0x1D09 'i' MIDDLE [XH / 2] pMarks
turned 'latinUpsilon1' 0x1B1 'Omega' MIDDLE [CAP / 2]
turned nothing 0x25C 'latinepsilon' MIDDLE [XH / 2]
turned 'closeepsilon' 0x29A 'closeturnepsilon' MIDDLE [XH / 2]
turned 'invglottalstop' 0x296 'revglottalstop' MIDDLE [CAP / 2]




# compatibility ligatures
create-glyph 'f_i' : glyph-construction {
	assign-unicode 0xFB01
	include bMarks
	include : create-glyph : glyph-construction {
		include glyphs.longs
		apply-transform : Translate [-[MIDDLE - HALFSTROKE - SB * 2]] 0
	}
	include : VBarRight [RIGHTSB - SB * 0.5] 0 XH
	include : HBarTop SB [RIGHTSB - SB * 0.5] XH
}
create-glyph 'f_l' : glyph-construction {
	assign-unicode 0xFB02
	include bMarks
	include : create-glyph : glyph-construction {
		include glyphs.longs
		apply-transform : Translate [-[MIDDLE - HALFSTROKE - SB * 2]] 0
	}
	include : VBarRight [RIGHTSB - SB * 0.5] 0 CAP
	include : HBarTop SB [STROKE + SB * 4] XH
}