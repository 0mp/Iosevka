define font [require './empty.json']
define glyphList font.glyf
define glyphs (.'.notdef' glyphList.0)


define Glyph [require './support/glyph'].Glyph
define Stroke [require './support/stroke'].Stroke

define para (
	.width 500
	.stroke 85
	.dotsize 100
	.sb 50
	.cap 771
	.xheight 572
	.hook 135
	.smooth 192
	.smallsmooth 242
	.o [-8]
	.descender [-178]
	.kappa 0.51
	.italicangle 10
)

define variantSelector (
	.zero 'slashed'
)

define globalTransform (
	.xx 1
	.yx [Math.tan [para.italicangle / 180 * Math.PI]]
	.xy 0
	.yy 1
	.x 0
	.y 0
)

define UPWARD (.x [-1] .y 0)
define DOWNWARD (.x 1 .y 0)
define RIGHTWARD (.x globalTransform.yx .y 1)
define LEFTWARD  (.x [- globalTransform.yx] .y [-1])

# metrics
define DESCENDER para.descender
define WIDTH para.width
define CAP para.cap
define XH para.xheight
define O para.o
define SB para.sb
define HOOK para.hook
define SMOOTH para.smooth
define SMALLSMOOTH para.smallsmooth
define STROKE para.stroke
define DOTSIZE para.dotsize


# derived metrics
define XO : XH - O
define CAPO : CAP - O
define HALFSTROKE : STROKE / 2
define RIGHTSB : WIDTH - SB
define MIDDLE : WIDTH / 2
define CAPMIDDLE : CAP / 2
define CAP_SMOOTH : CAP - SMOOTH
define DOTRADIUS : para.dotsize / 2

# style parameters
define KAPPA para.kappa
define COKAPPA : 1 - KAPPA
define COBKAPPA : COKAPPA - 0.1
define BKAPPA : KAPPA + 0.1
define KAPPA_HOOK 0.7


Stroke.bindParameters para

define [Ring u d l r] : begin {
	local my [[u + d] / 2]
	local mx [[l + r] / 2]
	local s : new Stroke
	:.set-transform globalTransform
	:.start-from mx d
	:.cubic-to [mx + [l - mx] * BKAPPA] d l [my + [d - my] * BKAPPA] l my
	:.cubic-to l [my + [u - my] * BKAPPA] [mx + [l - mx] * BKAPPA] u mx u
	:.cubic-to [mx + [r - mx] * BKAPPA] u r [my + [u - my] * BKAPPA] r my
	:.cubic-to r [my + [d - my] * BKAPPA] [mx + [r - mx] * BKAPPA] d mx d
	return s.points
}
define [ORing u d l r smooth] : begin {
	local myu [u - smooth]
	local myd [d + smooth]
	local mx [[l + r] / 2]
	local s : new Stroke
	:.set-transform globalTransform
	:.start-from mx d
	:.cubic-to [mx + [l - mx] * BKAPPA] d l [myd + [d - myd] * BKAPPA] l myd
	:.line-to l myu
	:.cubic-to l [myu + [u - myu] * BKAPPA] [mx + [l - mx] * BKAPPA] u mx u
	:.cubic-to [mx + [r - mx] * BKAPPA] u r [myu + [u - myu] * BKAPPA] r myu
	:.line-to r myd
	:.cubic-to r [myd + [d - myd] * BKAPPA] [mx + [r - mx] * BKAPPA] d mx d
	return s.points
}

define-macro glyph-construction : syntax-rules {
	@`[glyph-construction @::steps] ('.syntactic-closure' @`[lambda [] [begin {
		local set-width : this.set-width.bind this
		local assign-unicode : this.assign-unicode.bind this
		local start-from : this.start-from.bind this
		local line-to : this.line-to.bind this
		local curve-to : this.curve-to.bind this
		local cubic-to : this.cubic-to.bind this
		local put-shapes : this.put-shapes.bind this
		local reverse-last : this.reverse-last.bind this
		local include-glyph : this.include-glyph.bind this
		local create-stroke : this.create-stroke.bind this
		this.gizmo = globalTransform
		begin @::[steps.map formOf]
		return nothing
	}]] env)
}

define [create-glyph name actions] : begin {
	define glyphObject [new Glyph name]
	glyphList.push glyphObject
	glyphs`name = glyphObject
	actions.call glyphObject
	return glyphObject
}

###### SYMBOLS

create-glyph 'space' : glyph-construction {
	set-width WIDTH
	assign-unicode ' '
}
create-glyph 'bar' : glyph-construction {
	set-width WIDTH
	assign-unicode '|'
	put-shapes : create-stroke :.start-from MIDDLE [DESCENDER / 2]
	:.set-width [STROKE / 2] [STROKE / 2]
	:.line-to MIDDLE [CAP - DESCENDER / 2]
	:.form-stroke
}

###### UPPER CASE

### A X Y : Capital letters with curly stands
create-glyph 'A' : glyph-construction {
	set-width WIDTH
	assign-unicode 'A'
	
	local TURN [XH * 0.1]
	
	local leftbar : create-stroke
	leftbar.start-from SB 0
	:.pen-direction UPWARD
	:.set-width 0 STROKE
	:.line-to SB TURN
	:.pen-direction UPWARD
	:.curve-to SB [TURN + 0.27 * [CAP - TURN]] [MIDDLE - STROKE / 2] CAP
	:.set-width 0 [STROKE * 0.8]
	
	local rightbar : create-stroke
	rightbar.start-from RIGHTSB 0
	:.pen-direction UPWARD
	:.set-width STROKE 0
	:.line-to RIGHTSB TURN
	:.pen-direction UPWARD
	:.curve-to RIGHTSB [TURN + 0.27 * [CAP - TURN]] [MIDDLE + STROKE / 2] CAP
	:.set-width [STROKE * 0.8] 0
	
	local hbar : create-stroke 
	:.start-from [SB + STROKE] [XH / 2]
	:.pen-direction RIGHTWARD
	:.set-width 0 STROKE
	:.line-to [RIGHTSB - STROKE] [XH / 2]
	:.pen-direction RIGHTWARD
	
	put-shapes : leftbar.form-stroke
	put-shapes : hbar.form-stroke
	put-shapes : rightbar.form-stroke
	
	#top cap
	start-from [MIDDLE - STROKE / 2] CAP
	line-to [MIDDLE + STROKE / 2] CAP
	line-to MIDDLE [CAP - STROKE]
}
create-glyph 'X' : glyph-construction {
	set-width WIDTH
	assign-unicode 'X'
	
	local TURN [XH * 0.05]
	local straight 0.6
	local strench  0.125
	
	local barone : create-stroke
	:.start-from [SB + HALFSTROKE] 0
	:.set-width HALFSTROKE HALFSTROKE
	:.pen-direction UPWARD
	:.line-to [SB + HALFSTROKE] TURN
	:.curve-to [SB + HALFSTROKE] [TURN + strench * [CAP - TURN]] [MIDDLE + straight * [SB + HALFSTROKE - MIDDLE]] [CAPMIDDLE + straight * [TURN + strench * [CAP - TURN] - CAPMIDDLE]]
	:.line-to  [MIDDLE + straight * [RIGHTSB - HALFSTROKE - MIDDLE]] [CAPMIDDLE + straight * [CAP - TURN - strench * [CAP - TURN] - CAPMIDDLE]]
	:.curve-to [RIGHTSB - HALFSTROKE] [CAP - TURN - strench * [CAP - TURN]] [RIGHTSB - HALFSTROKE] [CAP - TURN]
	:.line-to [RIGHTSB - HALFSTROKE] CAP
	:.pen-direction UPWARD
	
	local bartwo : create-stroke
	:.start-from [RIGHTSB - HALFSTROKE] 0
	:.set-width HALFSTROKE HALFSTROKE
	:.pen-direction UPWARD
	:.line-to [RIGHTSB - HALFSTROKE] TURN
	:.curve-to [RIGHTSB - HALFSTROKE] [TURN + strench * [CAP - TURN]] [MIDDLE + straight * [RIGHTSB - HALFSTROKE - MIDDLE]] [CAPMIDDLE + straight * [TURN + strench * [CAP - TURN] - CAPMIDDLE]]
	:.line-to [MIDDLE + straight * [SB + HALFSTROKE - MIDDLE]] [CAPMIDDLE + straight * [CAP - TURN - strench * [CAP - TURN] - CAPMIDDLE]]
	:.curve-to [SB + HALFSTROKE] [CAP - TURN - strench * [CAP - TURN]] [SB + HALFSTROKE] [CAP - TURN]
	:.line-to [SB + HALFSTROKE] CAP
	:.pen-direction UPWARD

	put-shapes : barone.form-stroke
	put-shapes : bartwo.form-stroke
}
create-glyph 'Y' : glyph-construction {
	set-width WIDTH
	assign-unicode 'Y'
	
	local TURN [XH * 0.05]
	local straight 0.6
	local strench  0.15
	local cross    [CAP * 0.4]
	
	local barone : create-stroke
	:.start-from MIDDLE cross
	:.set-width HALFSTROKE HALFSTROKE
	:.line-to  [MIDDLE + straight * [RIGHTSB - HALFSTROKE - MIDDLE]] [cross + straight * [CAP - TURN - strench * [CAP - TURN] - cross]]
	:.curve-to [RIGHTSB - HALFSTROKE] [CAP - TURN - strench * [CAP - TURN]] [RIGHTSB - HALFSTROKE] [CAP - TURN]
	:.line-to [RIGHTSB - HALFSTROKE] CAP
	:.pen-direction UPWARD
	
	local bartwo : create-stroke
	:.start-from MIDDLE cross
	:.set-width HALFSTROKE HALFSTROKE
	:.line-to  [MIDDLE + straight * [SB + HALFSTROKE - MIDDLE]] [cross + straight * [CAP - TURN - strench * [CAP - TURN] - cross]]
	:.curve-to [SB + HALFSTROKE] [CAP - TURN - strench * [CAP - TURN]] [SB + HALFSTROKE] [CAP - TURN]
	:.line-to [SB + HALFSTROKE] CAP
	:.pen-direction UPWARD

	put-shapes : barone.form-stroke
	put-shapes : bartwo.form-stroke
	put-shapes : create-stroke 
		:.start-from MIDDLE 0 
		:.set-width HALFSTROKE HALFSTROKE
		:.pen-direction UPWARD 
		:.line-to MIDDLE [cross + HALFSTROKE]
		:.pen-direction UPWARD 
		:.form-stroke
}

### B D P R
create-glyph 'B' : glyph-construction {
	set-width WIDTH
	assign-unicode 'B'
	
	local bowl 451
	local tkappa [COKAPPA - 0.22]
	local bkappa [COKAPPA - 0.2]
	
	local turntop : [CAP + [bowl - STROKE]] / 2
	local turnbottom : bowl / 2
	
	local topbowl : create-stroke
	topbowl.start-from SB CAP
	:.pen-direction RIGHTWARD
	:.line-to  [RIGHTSB - SB * 0.5 - turnbottom] CAP
	:.cubic-to [RIGHTSB - SB * 0.5 - tkappa * turnbottom] CAP [RIGHTSB - SB * 0.5] [turntop + [CAP - turntop] * KAPPA] [RIGHTSB - SB * 0.5] turntop
	:.cubic-to [RIGHTSB - SB * 0.5] [turntop + KAPPA * [bowl - STROKE - turntop]] [RIGHTSB - SB * 0.5 - tkappa * turnbottom] [bowl - STROKE] [RIGHTSB - SB * 0.5 - turnbottom] [bowl - STROKE]
	:.line-to SB [bowl - STROKE]
	:.pen-direction LEFTWARD
	
	local bottombowl : create-stroke
	bottombowl.start-from SB 0
	:.pen-direction RIGHTWARD
	:.line-to  [RIGHTSB - turnbottom] 0
	:.cubic-to [RIGHTSB - bkappa * turnbottom] 0 RIGHTSB [turnbottom * KAPPA] RIGHTSB turnbottom
	:.cubic-to RIGHTSB [turnbottom + KAPPA * [bowl - turnbottom]] [RIGHTSB - bkappa * turnbottom] bowl [RIGHTSB - turnbottom] bowl
	:.line-to SB bowl
	:.pen-direction LEFTWARD
	
	local leftbar : create-stroke 
	:.start-from SB 0 
	:.pen-direction UPWARD
	:.line-to SB CAP
	:.pen-direction UPWARD
	
	put-shapes : topbowl.form-stroke 0 STROKE
	put-shapes : bottombowl.form-stroke STROKE 0
	put-shapes : leftbar.form-stroke 0 STROKE
}

create-glyph 'D' : glyph-construction {
	set-width WIDTH
	assign-unicode 'D'
	
	local dsmooth [SMOOTH * 1.55]
	local bsmooth [SMOOTH * 1.3]
	local bkappa  [COKAPPA - 0.2]
	
	local leftbar : create-stroke 
	:.start-from SB 0
	:.pen-direction UPWARD
	:.line-to SB CAP
	:.pen-direction UPWARD
	
	local bowl : create-stroke
	bowl.start-from SB 0
	:.pen-direction RIGHTWARD
	:.line-to [RIGHTSB - bsmooth] 0
	:.cubic-to [RIGHTSB - bkappa * bsmooth] 0 RIGHTSB [COBKAPPA * dsmooth] RIGHTSB dsmooth
	:.line-to RIGHTSB [CAP - dsmooth]
	:.cubic-to RIGHTSB [CAP - COBKAPPA * dsmooth] [RIGHTSB - bkappa * bsmooth] CAP [RIGHTSB - bsmooth] CAP
	:.line-to SB CAP
	:.pen-direction LEFTWARD

	
	put-shapes : bowl.form-stroke STROKE 0
	put-shapes : leftbar.form-stroke 0 STROKE
}
create-glyph 'P' : glyph-construction {
	set-width WIDTH
	assign-unicode 'P'
	
	local bowl CAPMIDDLE
	local bkappa [COKAPPA - 0.2]
	
	local turntop : [CAP + [bowl - HALFSTROKE]] / 2
	local turnbottom : bowl / 2
	
	local topbowl : create-stroke
		:.start-from SB CAP
		:.pen-direction RIGHTWARD
		:.line-to  [RIGHTSB - turnbottom] CAP
		:.cubic-to [RIGHTSB - bkappa * turnbottom] CAP RIGHTSB [turntop + [CAP - turntop] * KAPPA] RIGHTSB turntop
		:.cubic-to RIGHTSB  [turntop + KAPPA * [bowl - HALFSTROKE - turntop]] [RIGHTSB - bkappa * turnbottom] [bowl - HALFSTROKE] [RIGHTSB - turnbottom] [bowl - HALFSTROKE]
		:.line-to SB [bowl - HALFSTROKE]
		:.pen-direction LEFTWARD
	
	local leftbar : create-stroke 
		:.start-from SB 0 :.pen-direction UPWARD
		:.line-to SB CAP :.pen-direction UPWARD
	
	put-shapes : topbowl.form-stroke 0 STROKE
	put-shapes : leftbar.form-stroke 0 STROKE
}
create-glyph 'R' : glyph-construction {
	set-width WIDTH
	assign-unicode 'R'
	include-glyph glyphs.P
	
	local TURN [XH * 0.1]
	local right [RIGHTSB + O]
	put-shapes : create-stroke
	:.start-from [right - HALFSTROKE] 0
	:.pen-direction UPWARD
	:.set-width HALFSTROKE HALFSTROKE
	:.curve-to [right - HALFSTROKE] [TURN + 0.1 * [XH - TURN]] MIDDLE CAPMIDDLE
	:.form-stroke
}

### C G O zero Q

create-glyph 'C' : glyph-construction {
	set-width WIDTH
	assign-unicode 'C'
	local outline : create-stroke
	outline.start-from [RIGHTSB - SB * 0.1] [CAP - HOOK]
	:.curve-to [MIDDLE + KAPPA_HOOK * [MIDDLE - para.sb]] CAPO MIDDLE CAPO
	:.cubic-to [SB + [1 - BKAPPA] * [WIDTH / 2 - SB]] CAPO SB [CAP - COBKAPPA * SMOOTH] SB CAP_SMOOTH
	:.line-to  SB SMOOTH
	:.cubic-to SB [COBKAPPA * SMOOTH] [SB + [1 - BKAPPA] * [WIDTH / 2 - SB]] O [WIDTH / 2] O
	:.curve-to [MIDDLE + KAPPA_HOOK * [MIDDLE - SB]] O [RIGHTSB - SB * 0.1] HOOK
	put-shapes : outline.form-stroke STROKE 0
}

create-glyph 'G' : glyph-construction {
	set-width WIDTH
	assign-unicode 'G'
	local outline : create-stroke
	outline.start-from [RIGHTSB - SB * 0.1] [CAP - HOOK]
	:.curve-to [MIDDLE + KAPPA_HOOK * [MIDDLE - para.sb]] CAPO MIDDLE CAPO
	:.cubic-to [SB + [1 - BKAPPA] * [WIDTH / 2 - SB]] CAPO SB [CAP - COBKAPPA * SMOOTH] SB CAP_SMOOTH
	:.line-to  SB SMOOTH
	:.cubic-to SB [COBKAPPA * SMOOTH] [SB + [1 - BKAPPA] * [WIDTH / 2 - SB]] O [WIDTH / 2] O
	:.cubic-to [MIDDLE + BKAPPA * [RIGHTSB - MIDDLE]] O RIGHTSB [COBKAPPA * SMOOTH] RIGHTSB SMOOTH
	:.line-to  RIGHTSB [CAP / 2 + STROKE / 2]
	:.pen-direction UPWARD
	put-shapes : outline.form-stroke STROKE 0
	
	local bar : create-stroke 
		:.start-from MIDDLE [CAP / 2 + STROKE / 2]
		:.line-to RIGHTSB [CAP / 2 + STROKE / 2]
		:.pen-direction RIGHTWARD
	put-shapes : bar.form-stroke 0 STROKE
}

create-glyph 'O' : glyph-construction {
	set-width WIDTH
	assign-unicode 'O'
	local outline : create-stroke
	outline.start-from MIDDLE CAPO
	:.cubic-to [SB + [1 - BKAPPA] * [WIDTH / 2 - SB]] CAPO SB [CAP - COBKAPPA * SMOOTH] SB [CAP - SMOOTH]
	:.line-to  SB SMOOTH
	:.cubic-to SB [COBKAPPA * SMOOTH] [SB + [1 - BKAPPA] * [WIDTH / 2 - SB]] O [WIDTH / 2] O
	:.cubic-to [MIDDLE + BKAPPA * [RIGHTSB - MIDDLE]] O RIGHTSB [COBKAPPA * SMOOTH] RIGHTSB SMOOTH
	:.line-to  RIGHTSB [CAP - SMOOTH]
	:.cubic-to RIGHTSB [CAP - COBKAPPA * SMOOTH] [MIDDLE + BKAPPA * [RIGHTSB - MIDDLE]] CAPO MIDDLE CAPO
	put-shapes : outline.form-stroke STROKE 0
}

create-glyph 'zero.slashed' : glyph-construction {
	set-width WIDTH
	
	put-shapes glyphs.O.contours
	
	local bar : create-stroke :.start-from [SB + STROKE / 2] [CAP * [1 - 0.65]] :.line-to [RIGHTSB - STROKE / 2] [CAP * 0.65]
	put-shapes : bar.form-stroke [STROKE / 2] [STROKE / 2]
}
create-glyph 'zero.unslashed' : glyph-construction {
	include-glyph glyphs.O
}
create-glyph 'zero.dotted' : glyph-construction {
	include-glyph glyphs.O
	put-shapes : list {
		Ring [CAPMIDDLE + DOTRADIUS] [CAPMIDDLE - DOTRADIUS] [MIDDLE + DOTRADIUS] [MIDDLE - DOTRADIUS]
	}
}
create-glyph 'zero' : glyph-construction {
	set-width WIDTH
	assign-unicode '0'
	include-glyph glyphs.[match variantSelector.zero {
		'slashed'   'zero.slashed'
		'dotted'    'zero.dotted'
		'unslahsed' 'zero.unslashed'
		otherwise   'zero.slashed'
	}]
}

create-glyph 'Q' : glyph-construction {
	set-width WIDTH
	assign-unicode 'Q'
	
	put-shapes glyphs.O.contours
	start-from MIDDLE 0
	line-to    [MIDDLE + STROKE / 2] [-CAP * 0.2]
	line-to    [MIDDLE + STROKE / 2 + STROKE] [-CAP * 0.2]
	line-to    [MIDDLE + STROKE] 0
	line-to    [MIDDLE + STROKE * [1 - 0.5 / 3]] [STROKE * 0.5]
	reverse-last
}


### F E H L I
create-glyph 'F' : glyph-construction {
	set-width WIDTH
	assign-unicode 'F'
	put-shapes : create-stroke :.start-from SB 0 :.pen-direction UPWARD :.set-width 0 STROKE 
		:.line-to SB CAP :.pen-direction UPWARD :.form-stroke
	put-shapes : create-stroke :.start-from SB CAP :.set-width 0 STROKE :.pen-direction RIGHTWARD
		:.line-to RIGHTSB CAP :.pen-direction RIGHTWARD :.form-stroke
	put-shapes : create-stroke :.start-from SB CAPMIDDLE :.set-width HALFSTROKE HALFSTROKE :.pen-direction RIGHTWARD
		:.line-to [RIGHTSB - STROKE] CAPMIDDLE :.pen-direction RIGHTWARD :.form-stroke
}
create-glyph 'E' : glyph-construction {
	set-width WIDTH
	assign-unicode 'E'
	include-glyph glyphs.F
	put-shapes : create-stroke :.start-from SB 0 :.set-width STROKE 0 :.pen-direction RIGHTWARD
		:.line-to RIGHTSB 0 :.pen-direction RIGHTWARD :.form-stroke
}
create-glyph 'H' : glyph-construction {
	set-width WIDTH
	assign-unicode 'H'
	
	put-shapes : create-stroke :.start-from SB 0 :.pen-direction UPWARD :.set-width 0 STROKE 
		:.line-to SB CAP :.pen-direction UPWARD :.form-stroke
	put-shapes : create-stroke :.start-from RIGHTSB 0 :.pen-direction UPWARD :.set-width STROKE 0 
		:.line-to RIGHTSB CAP :.pen-direction UPWARD :.form-stroke
	put-shapes : create-stroke :.start-from SB [CAP / 2] :.set-width HALFSTROKE HALFSTROKE :.pen-direction RIGHTWARD
		:.line-to RIGHTSB [CAP / 2] :.pen-direction RIGHTWARD :.form-stroke
}

create-glyph 'L' : glyph-construction {
	set-width WIDTH
	assign-unicode 'L'
	
	put-shapes : create-stroke
		:.start-from [SB * 1.5] CAP
		:.set-width STROKE 0
		:.pen-direction DOWNWARD
		:.line-to [SB * 1.5] 0
		:.pen-direction DOWNWARD
		:.form-stroke
	put-shapes : create-stroke
		:.start-from [SB * 1.5] 0
		:.set-width STROKE 0
		:.pen-direction RIGHTWARD
		:.line-to RIGHTSB 0
		:.pen-direction RIGHTWARD
		:.form-stroke
}

create-glyph 'dotlessI.straight' : glyph-construction {
	put-shapes : create-stroke
		:.start-from MIDDLE 0
		:.pen-direction UPWARD
		:.set-width HALFSTROKE HALFSTROKE
		:.line-to MIDDLE CAP
		:.pen-direction UPWARD
		:.form-stroke
}
create-glyph 'dotlessI.symmetric' : glyph-construction {
	include-glyph glyphs.'dotlessI.straight'
	# Top serif
	put-shapes : create-stroke
	:.start-from [MIDDLE - WIDTH * 0.26 - STROKE * globalTransform.yx] CAP
	:.set-width 0 STROKE
	:.line-to [MIDDLE + WIDTH * 0.26 - STROKE * globalTransform.yx] CAP
	:.form-stroke
	# Bottom serif
	put-shapes : create-stroke
	:.start-from [MIDDLE - WIDTH * 0.26 + STROKE * globalTransform.yx] 0
	:.set-width STROKE 0
	:.line-to [MIDDLE + WIDTH * 0.26 + STROKE * globalTransform.yx] 0
	:.form-stroke
}
create-glyph 'I' : glyph-construction {
	set-width WIDTH
	assign-unicode 'I'

	include-glyph glyphs.'dotlessI.symmetric'
}


### S
create-glyph 'S' : glyph-construction {
	set-width WIDTH; assign-unicode 'S'
	
	local slope 0.11

	local bowltop : create-stroke
	bowltop.start-from [RIGHTSB - SB * 0.1] [CAP - HOOK]
	:.set-width STROKE 0
	:.curve-to [MIDDLE + KAPPA_HOOK * [MIDDLE - para.sb]] CAPO MIDDLE CAPO
	:.cubic-to [SB + [1 - BKAPPA] * [WIDTH / 2 - SB]] CAPO SB [CAP - COBKAPPA * SMOOTH] SB CAP_SMOOTH
	
	local strokemiddle : create-stroke
	strokemiddle.start-from [SB + STROKE / 2] CAP_SMOOTH
	:.set-width [STROKE / 2] [STROKE / 2]
	:.curve-to [SB + STROKE / 2] [[0.5 + slope] * CAP + [2 * slope * CAP] / [0.4 * WIDTH] * [0.3 * WIDTH - SB - STROKE / 2]] [0.3 * WIDTH] [[0.5 + slope] * CAP]
	:.line-to [0.7 * WIDTH] [[0.5 - slope] * CAP]
	:.curve-to [RIGHTSB - STROKE / 2] [[0.5 - slope] * CAP - [2 * slope * CAP] / [0.4 * WIDTH] * [0.3 * WIDTH - SB - STROKE / 2]] [RIGHTSB - STROKE / 2] SMOOTH
	
	local bowlbottom : create-stroke
	bowlbottom.start-from RIGHTSB SMOOTH :.set-width 0 STROKE
	:.cubic-to RIGHTSB [COBKAPPA * SMOOTH] [MIDDLE + BKAPPA * [RIGHTSB - MIDDLE]] O MIDDLE O
	:.curve-to [MIDDLE - KAPPA_HOOK * [MIDDLE - para.sb]] O [SB * 1.1] HOOK
		
	put-shapes : bowltop.form-stroke
	put-shapes : strokemiddle.form-stroke
	put-shapes : bowlbottom.form-stroke
}
create-glyph 'dollar' : glyph-construction {
	set-width WIDTH; assign-unicode '$'
	put-shapes glyphs.S.contours
	put-shapes : create-stroke :.start-from MIDDLE CAP :.set-width HALFSTROKE HALFSTROKE :.line-to MIDDLE [CAP - DESCENDER / 2] :.form-stroke
	put-shapes : create-stroke :.start-from MIDDLE [DESCENDER / 2] :.set-width HALFSTROKE HALFSTROKE :.line-to MIDDLE 0 :.form-stroke
}


###### LOWER CASE

create-glyph 'o' : glyph-construction {
	set-width WIDTH
	assign-unicode 'o'
	local outline : create-stroke
	set outline.points : ORing XO O SB RIGHTSB SMALLSMOOTH
	put-shapes : outline.form-stroke 0 STROKE
}
create-glyph 'o.left' : glyph-construction {
	set-width WIDTH
	# build outline manually
	put-shapes : list {
		ORing XO O [SB + STROKE / 2] RIGHTSB SMALLSMOOTH
		ORing [XO - STROKE] [O + STROKE] [SB + STROKE] [RIGHTSB - STROKE] [SMALLSMOOTH - STROKE]
	}
	reverse-last
}
create-glyph 'o.right' : glyph-construction {
	set-width WIDTH
	# build outline manually
	put-shapes : list {
		ORing XO O SB [RIGHTSB - STROKE / 2] SMALLSMOOTH
		ORing [XO - STROKE] [O + STROKE] [SB + STROKE] [RIGHTSB - STROKE] [SMALLSMOOTH - STROKE]
	}
	reverse-last
}
create-glyph 'p' : glyph-construction {
	set-width WIDTH
	assign-unicode 'p'
	put-shapes glyphs.'o.left'.contours
	put-shapes : create-stroke 
	:.start-from SB XH
	:.pen-direction DOWNWARD
	:.set-width STROKE 0
	:.line-to SB DESCENDER
	:.pen-direction DOWNWARD
	:.form-stroke
}
create-glyph 'b' : glyph-construction {
	set-width WIDTH
	assign-unicode 'b'
	put-shapes glyphs.'o.left'.contours
	put-shapes : create-stroke 
	:.start-from SB 0
	:.pen-direction UPWARD
	:.set-width 0 STROKE
	:.line-to SB CAP
	:.pen-direction UPWARD
	:.form-stroke
}
create-glyph 'q' : glyph-construction {
	set-width WIDTH
	assign-unicode 'q'
	put-shapes glyphs.'o.right'.contours
	put-shapes : create-stroke 
	:.start-from RIGHTSB XH
	:.pen-direction DOWNWARD
	:.set-width 0 STROKE
	:.line-to RIGHTSB DESCENDER
	:.pen-direction DOWNWARD
	:.form-stroke
}
create-glyph 'd' : glyph-construction {
	set-width WIDTH
	assign-unicode 'd'
	put-shapes glyphs.'o.right'.contours
	put-shapes : create-stroke 
	:.start-from RIGHTSB 0
	:.pen-direction UPWARD
	:.set-width STROKE 0
	:.line-to RIGHTSB CAP
	:.pen-direction UPWARD
	:.form-stroke
}
create-glyph 'g' : glyph-construction {
	set-width WIDTH
	assign-unicode 'g'
	
	put-shapes : list {
		Ring XO [XH * 0.4] [SB * 1.5] [RIGHTSB - 0.5 * SB] SMALLSMOOTH
		Ring [XO - STROKE] [[XH * 0.4] + STROKE] [SB * 1.5 + STROKE] [[RIGHTSB - 0.5 * SB] - STROKE] [SMALLSMOOTH - STROKE]
	}
	reverse-last
	
	put-shapes : create-stroke 
	:.start-from MIDDLE [XH * 0.4]
	:.set-width  0 [STROKE * 0.75]
	:.arc-hv-to  [SB * 1.5 + STROKE]  [[O - DESCENDER * 0.85 + XH * 0.4] * 0.47]
	:.set-width  0 STROKE
	:.arc-vh-to  [MIDDLE + DESCENDER * 0.15] [O - DESCENDER * 0.85]
	:.line-to    [MIDDLE - DESCENDER * 0.15] [O - DESCENDER * 0.85]
	:.arc-hv-to  [RIGHTSB - O * 2] [[-STROKE] * globalTransform.yx * 2]
	:.arc-vh-to  MIDDLE [DESCENDER + O]
	:.arc-hv-to  SB [DESCENDER * 0.1]
	:.arc-vh-to  [MIDDLE + DESCENDER * 0.15] [O - DESCENDER * 0.85]
	:.form-stroke
	
	start-from RIGHTSB XH
	line-to    RIGHTSB [XH - STROKE]
	line-to    MIDDLE  [XH - STROKE - O]
	line-to    MIDDLE  XH
}
### c e
create-glyph 'c' : glyph-construction {
	set-width WIDTH
	assign-unicode 'c'
	local outline : create-stroke
	outline.start-from [RIGHTSB - SB * 0.1] [XH - HOOK]
	:.curve-to [MIDDLE + KAPPA_HOOK * [MIDDLE - para.sb]] XO MIDDLE XO
	:.cubic-to [SB + [1 - BKAPPA] * [MIDDLE - SB]] XO SB [XH - COBKAPPA * SMALLSMOOTH] SB [XH - SMALLSMOOTH]
	:.line-to  SB SMALLSMOOTH
	:.cubic-to SB [COBKAPPA * SMALLSMOOTH] [SB + [1 - BKAPPA] * [MIDDLE - SB]] O MIDDLE O
	:.curve-to [MIDDLE + KAPPA_HOOK * [MIDDLE - SB]] O [RIGHTSB - SB * 0.1] HOOK
	put-shapes : outline.form-stroke STROKE 0
}
create-glyph 'e' : glyph-construction {
	set-width WIDTH
	assign-unicode 'e'
	
	local barbottom [XH * 0.44]
	
	local outline : create-stroke
		:.start-from RIGHTSB barbottom
		:.pen-direction UPWARD
		:.set-width STROKE 0
		:.line-to   RIGHTSB [XH - SMALLSMOOTH]
		:.arc-vh-to MIDDLE XO
		:.cubic-to  [SB + [1 - BKAPPA] * [MIDDLE - SB]] XO SB [XH - COBKAPPA * SMALLSMOOTH] SB [XH - SMALLSMOOTH]
		:.line-to   SB SMALLSMOOTH
		:.cubic-to  SB [COBKAPPA * SMALLSMOOTH] [SB + [1 - BKAPPA] * [MIDDLE - SB]] O MIDDLE O
		:.curve-to  [MIDDLE + KAPPA_HOOK * [MIDDLE - SB]] O [RIGHTSB - SB * 0.1] HOOK
	
	local bar : create-stroke
		:.start-from [SB + HALFSTROKE] barbottom
		:.set-width STROKE 0
		:.pen-direction RIGHTWARD
		:.line-to [RIGHTSB - HALFSTROKE] barbottom
		:.pen-direction RIGHTWARD
	
	put-shapes : outline.form-stroke
	put-shapes : bar.form-stroke
}
### x
create-glyph 'x' : glyph-construction {
	set-width WIDTH
	assign-unicode 'x'
	
	local TURN [XH * 0.1]
	
	local barone : create-stroke
	:.start-from [SB + HALFSTROKE] 0
	:.pen-direction UPWARD
	:.set-width HALFSTROKE HALFSTROKE
	:.cubic-to [SB + HALFSTROKE] [TURN + 0.17 * [XH - TURN]] [RIGHTSB - HALFSTROKE] [XH - TURN - 0.17 * [XH - TURN]] [RIGHTSB - HALFSTROKE] XH
	:.pen-direction UPWARD
	
	local bartwo : create-stroke
	:.start-from [RIGHTSB - HALFSTROKE] 0
	:.pen-direction UPWARD
	:.set-width HALFSTROKE HALFSTROKE
	:.cubic-to [RIGHTSB - HALFSTROKE] [TURN + 0.17 * [XH - TURN]] [SB + HALFSTROKE] [XH - TURN - 0.17 * [XH - TURN]] [SB + HALFSTROKE] XH
	:.pen-direction UPWARD

	put-shapes : barone.form-stroke
	put-shapes : bartwo.form-stroke
}



exports.font = font